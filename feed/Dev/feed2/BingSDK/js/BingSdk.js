//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Limited Permissive License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************

//*********************************************************
// {987ABEBC-953F-4B15-9386-0F9F404643F5}
// Bing Apps Toolkit v0.6
//*********************************************************
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/


/// <dictionary target="parameter">obj</dictionary>
/// <dictionary target="variable">arg,obj</dictionary>
(function appexPlatformUtilitiesInit() {
    "use strict";
    WinJS.Namespace.define("BingApps.Utilities",
    {
        onError: function (error) {
            /// <summary>
            /// Handle promise errors
            /// </summary>
            /// <param name="error">
            /// Error data
            /// </param>
            /// <returns>
            /// Nothing
            /// </returns>

            console.error(error);
            return WinJS.Promise.wrapError(error);
        },

        enableArrowKeyNavigation: function (element, ignoreLeftRight) {
            var getAjacentItem = function (nextSibling, Xaxis) {
                var left = element.offsetLeft;
                var top = element.offsetTop;
                var elem = element;
                if (nextSibling) {
                    elem = elem.nextSibling;
                    while (elem) {
                        if (Xaxis && elem.offsetTop === top) {
                            return elem;
                        }
                        if (!Xaxis && elem.offsetLeft === left) {
                            return elem;
                        }
                        elem = elem.nextSibling;
                    }
                } else {
                    elem = elem.previousSibling;
                    while (elem) {
                        if (Xaxis && elem.offsetTop === top) {
                            return elem;
                        }
                        if (!Xaxis && elem.offsetLeft === left) {
                            return elem;
                        }
                        elem = elem.previousSibling;
                    }
                }
                return null;
            };
            var onkey = function (evt) {
                var isNextSibling = false;
                var Xaxis = true;
                switch (evt.keyCode) {
                    case WinJS.Utilities.Key.leftArrow:
                        if (ignoreLeftRight) {
                            return;
                        }
                        break;
                    case WinJS.Utilities.Key.rightArrow:
                        if (ignoreLeftRight) {
                            return;
                        }
                        isNextSibling = true;
                        break;
                    case WinJS.Utilities.Key.downArrow:
                        isNextSibling = true;
                        Xaxis = false;
                        break;
                    case WinJS.Utilities.Key.upArrow:
                        Xaxis = false;
                        break;
                    default:
                        return;
                }
                if (document.dir === "rtl") {
                    isNextSibling = !isNextSibling;
                }
                var ajacent = getAjacentItem(isNextSibling, Xaxis);
                if (ajacent) {
                    ajacent.focus();
                }
            };
            element.addEventListener("keydown", onkey);
        },
        enablePointerUpDownAnimations: function (element) {
            /// <summary>
            /// Enables pointer up/down animations on the given element.
            /// </summary>
            /// <param name="element">
            /// DOM element to enable animations on.
            /// </param>
            /// <returns>
            /// Nothing
            /// </returns>
            element.addEventListener("MSLostPointerCapture", function platformUtilities_onMSLostPointerCapture(event) {
                WinJS.UI.Animation.pointerUp(this).then();
                WinJS.Utilities.data(this).pointerDown = false;
            }, false);
            element.addEventListener("MSPointerCancel", function platformUtilities_onMSPointerCancel(event) {
                WinJS.UI.Animation.pointerUp(this).then();
                WinJS.Utilities.data(this).pointerDown = false;
            }, false);
            element.addEventListener("MSPointerUp", function platformUtilities_onMSPointerUp(event) {
                WinJS.UI.Animation.pointerUp(this).then();
                WinJS.Utilities.data(this).pointerDown = false;
            }, false);
            element.addEventListener("MSPointerDown", function platformUtilities_onMSPointerDown(event) {
                WinJS.UI.Animation.pointerDown(this).then();
                WinJS.Utilities.data(this).pointerDown = true;
            }, false);
            element.addEventListener("MSPointerOut", function platformUtilities_onMSPointerOut(event) {
                var elementData = WinJS.Utilities.data(this);
                if (elementData.pointerDown) {
                    WinJS.UI.Animation.pointerUp(this).then();
                    elementData.pointerDown = false;
                }
            }, false);
        },
        registerSwipeProxy: function (element, onSwipe, onEnter, onExit) {
            /// <summary>provides logic to detect swipe direction</summary>
            /// <param name="element" type="object">element to listen to swipe events on</param>
            /// <param name="onSwipe" type="object">function invoked when a swipe direction has been determined</param>
            /// <param name="onEnter" type="object">function invoked when pointer is detected</param>
            /// <param name="onExit" type="object">function invoked when capture is lost or gesture stops</param>

            var onPointerMove = function (ptr) {
                try {
                    var pos = ptr.currentPoint.position;
                    if (!previousPt) {
                        previousPt = pos;
                    }
                    var evt = { slope: 0, event: ptr, pointer: capturedPtr, isVertical: true };
                    var deltaX = pos.x - previousPt.x;
                    if (deltaX !== 0) {
                        var slope = ((pos.y - previousPt.y) / (deltaX));
                        evt.slope = slope;
                        if (Math.abs(slope) < 1) { //90 degree plane centered on 0 degrees and 180 degrees. 45 degree slope counts as vertical
                            evt.isVertical = false;
                        }
                        if (onSwipe) {
                            onSwipe(evt);
                        }
                    }
                    previousPt = pos;
                } catch (ex) {
                    // ptr.currentPoint is an invalid object.
                }

            };
            element.addEventListener("MSPointerDown", function platformUtilities_onMSPointerDownSwipe(ptr) {
                capturedPtr = ptr;
                previousPt = ptr.currentPoint.position;
                element.addEventListener("MSPointerMove", onPointerMove);
                if (onEnter) {
                    onEnter(ptr);
                }
            });
            var capturedPtr = null;
            var previousPt = null;
            var leave = function (evt) {
                element.removeEventListener("MSPointerMove", onPointerMove);
                if (onExit) {
                    onExit(evt);
                }
            };
            element.addEventListener("MSLostPointerCapture", leave);
            element.addEventListener("MSPointerUp", leave);
        },
        registerItemClickProxy: function (element, predicate, completion) {
            /// <summary>
            /// Registers an onclick proxy to the root element, figures out which item was clicked and invokes completion handler
            /// </summary>
            /// <param name="element">
            /// DOM element targeted by the event handlers
            /// </param>
            /// <param name="predicate">
            /// Predicate used to identify top-level DOM element in the event bubble
            /// </param>
            /// <param name="completion">
            /// Completion handler that will be invoked with the appropriate DOM element
            /// </param>
            /// <returns>
            /// Nothing
            /// </returns>

            return function platformUtilities_itemClickProxyHandler() {
                var pointerUpEventObject = null;
                var pressedElement = null;
                var isUiaClick = false;
                var pressedLocation = { x: -1, y: -1 };
                var LEFT_MSPOINTER_BUTTON = 0; // left button

                function onClick(evt) {
                    if (pointerUpEventObject === null) {
                        // pointerUpEventObject is null which tells us that we received a click event without an associated MSPointerUp event.
                        // This means that the click event was triggered thru UIA rather than thru the GUI.
                        isUiaClick = true;
                        pressedElement = evt.srcElement;
                    }
                    delayedPointerUp();
                }

                function onKeyDown(evt) {
                    switch (evt.keyCode) {
                        case WinJS.Utilities.Key.enter:
                        case WinJS.Utilities.Key.space:
                            maybeInvokeItem(evt.srcElement);
                            break;
                        default:
                            break;
                    }
                }

                function onMsPointerUp(evt) {
                    pointerUpEventObject = evt;
                    msSetImmediate(delayedPointerUp);
                }

                function onMsPointerDown(evt) {
                    var leftButton = isLeftButton(evt);

                    // don't store event if it's a right button click
                    if (leftButton) {
                        pressedElement = evt.srcElement;
                        pressedLocation.x = evt.clientX;
                        pressedLocation.y = evt.clientY;
                    }
                }

                function delayedPointerUp() {
                    // ignore pointer up event if:
                    //      - no event object, or
                    //      - element that caused the pointer up is not the same element that caused the pointer down
                    if (isUiaClick || (pointerUpEventObject &&
                            (pointerUpEventObject.srcElement === pressedElement ||
                            (pointerUpEventObject.clientX === pressedLocation.x && pointerUpEventObject.clientY === pressedLocation.y)))) {

                        // assign default predicate if none provided
                        predicate = predicate || function (domElement) { return true; };
                        //var domElement = pointerUpEventObject.srcElement;
                        pointerUpEventObject = null;
                        //pressedElement = null;
                        isUiaClick = false;

                        maybeInvokeItem(pressedElement);
                    }
                }

                function isLeftButton(evt) {
                    return evt.button === LEFT_MSPOINTER_BUTTON;
                }

                function maybeInvokeItem(domElement) {
                    // walk up the DOM until the module control is found, and get the item from it.
                    while (domElement) {
                        if (predicate(domElement)) {
                            break;
                        }
                        domElement = domElement.parentElement;
                    }

                    if (domElement && completion) {
                        completion(domElement);
                    }
                }

                // setup click behavior
                element.addEventListener("click", onClick);
                element.addEventListener("keydown", onKeyDown);
                element.addEventListener("MSPointerUp", onMsPointerUp);
                element.addEventListener("MSPointerDown", onMsPointerDown);
            }();
        },


        /// <summary>
        /// Adds event-related methods to the control. This is similar to WinJS.UI.DOMEventMixin 
        /// but the dispatchEvent method of DOMEventMixinWithBubbline bubbles up the events unlike 
        /// WinJS.UI.DomEventMixin.
        /// </summary>
        DOMEventMixinWithBubbling: {
            _domElement: null,

            addEventListener: function (type, listener, useCapture) {
                /// <summary>
                /// Adds an event listener to the control.
                /// </summary>
                /// <param name="type" type="String">
                /// The type (name) of the event.
                /// </param>
                /// <param name="listener" type="Function">
                /// The listener to invoke when the event gets raised.
                /// </param>
                /// <param name="useCapture" type="Boolean">
                /// true to initiate capture; otherwise, false.
                /// </param>
                (this.element || this._domElement).addEventListener(type, listener, useCapture || false);
            },
            dispatchEvent: function (type, eventProperties) {
                /// <summary>
                /// Raises an event of the specified type, adding the specified additional properties.
                /// This method bubbles up the events unlike the one in WinJS.UI.DomEventMixin.
                /// </summary>
                /// <param name="type" type="String">
                /// The type (name) of the event.
                /// </param>
                /// <param name="eventProperties" type="Object">
                /// The set of additional properties to be attached to the event object when the event is raised.
                /// </param>
                /// <returns type="Boolean">
                /// true if preventDefault was called on the event, otherwise false.
                /// </returns>
                var eventValue = document.createEvent("Event");
                var bubbling = true;
                var cancellable = false;
                eventValue.initEvent(type, bubbling, cancellable);
                eventValue.detail = eventProperties;
                if (typeof eventProperties === "object") {
                    Object.keys(eventProperties).forEach(function (key) {
                        eventValue[key] = eventProperties[key];
                    });
                }
                return (this.element || this._domElement).dispatchEvent(eventValue);
            },
            removeEventListener: function (type, listener, useCapture) {
                /// <summary>
                /// Removes an event listener from the control.
                /// </summary>
                /// <param name="type" type="String">
                /// The type (name) of the event.
                /// </param>
                /// <param name="listener" type="Function">
                /// The listener to remove.
                /// </param>
                /// <param name="useCapture" type="Boolean">
                /// true to initiate capture; otherwise, false.
                /// </param>
                (this.element || this._domElement).removeEventListener(type, listener, useCapture || false);
            }
        },

        isCursorKey: function (keyCode) {
            return keyCode === WinJS.Utilities.Key.upArrow ||
                    keyCode === WinJS.Utilities.Key.downArrow ||
                    keyCode === WinJS.Utilities.Key.leftArrow ||
                    keyCode === WinJS.Utilities.Key.rightArrow;
        },

        getAncestorByClassName: function (startElement, ancestorClassName) {
            var ancestor = startElement || null;

            while (ancestor && !WinJS.Utilities.hasClass(ancestor, ancestorClassName)) {
                ancestor = ancestor.parentElement || null;
            }

            return ancestor;
        },

        parseDataAttribute: function (attributeName, element) {
            var data = null,
                dataAttribute = element.getAttribute(attributeName);

            if (dataAttribute) {
                data = JSON.parse(dataAttribute);
            }

            return data;
        },

        createObject: function (className, initializationParameter) {
            /// <summary>
            /// Creates an instance of an object given the fully qualified namespace class name
            /// </summary>
            /// <param name="className" type="String">
            /// The name of the class to instantiate
            /// </param>
            /// <param name="initializationParameter" type="Object">
            /// An initialization parameter used in the constructor
            /// </param>
            /// <returns>
            /// An instance of className
            /// </returns>

            var obj = null;
            var namespaceParts = null;
            var i = 0;
            var namespace = null;

            if (className) {
                // Get the namespace parts
                namespaceParts = className.split(".");

                if (namespaceParts &&
                    namespaceParts.length > 0) {

                    // Get the object
                    for (i = 0; i < namespaceParts.length; i++) {

                        if (i === 0) {
                            namespace = window[namespaceParts[0]];
                        } else {
                            namespace = namespace[namespaceParts[i]];
                        }

                        // Quit if we can't find the namespace
                        if (!namespace) {
                            break;
                        }

                    }

                    // When we have a fully qualify the namespace, instantiate the object
                    if (namespace) {
                        if (arguments.length <= 2) {
                            /// <disable> JS2063 </disable>
                            obj = new namespace(initializationParameter);
                            /// <enable> JS2063 </enable>
                        } else {
                            var parameters = [];
                            for (i = 1; i < arguments.length; i++) {
                                parameters[i - 1] = arguments[i];
                            }

                            var construct = function constructFn(constructor, args) {
                                function F() {
                                    return constructor.apply(this, args);
                                }
                                F.prototype = namespace.prototype;
                                return new F();
                            };
                            return construct(namespace, parameters);
                        }
                    }
                }
            }

            return obj;
        },


        getControl: function (id) {
            /// <summary>
            /// Returns the WinJS control object given a DOM element or the DOM id
            /// <param name="id">
            /// DOM element or DOM id
            /// </param>
            /// </summary>

            var element = null;
            if (typeof id === "string") {
                element = document.getElementById(id);
            } else {
                element = id;
            }

            if (element) {
                if (element.winControl) {
                    return element.winControl;
                } else {
                    return null;
                }
            } else {
                return null;
            }
        },

        setInnerHtml: function (elem, html) {
            if (html) {
                WinJS.Utilities.setInnerHTML(elem, toStaticHTML(html));
            } else {
                elem.innerText = "";
            }
        },

        stripHTML: function (string) {
            if (string) {
                return string.replace(/<(?:.|\n)*?>/gm, "");
            }
            else {
                return "";
            }
        },

        containsHTML: function (string) {
            if (string) {
                var strippedString = this.stripHTML(string);
                if (string === strippedString) {
                    return false;
                }
                else {
                    return true;
                }
            }
            else {
                return false;
            }
        },

        convertManageToJSON: function (obj) {
            /// <summary>
            /// Converts a managed object to a JSON object
            /// </summary>
            /// <param name="obj">
            /// Managed object to convert
            /// </param>
            /// <returns>
            /// Returns a JSON object
            /// </returns>

            var newObj = {},
                i = 0;

            var size = 0;
            if (typeof obj["size"] === "undefined" && typeof obj["indexOf"] === "undefined") {
                for (var propertyName in obj) {
                    var property = obj[propertyName];
                    if (property && typeof property === "object") {
                        if (typeof property["size"] === "undefined" && typeof property["indexOf"] === "undefined") {
                            newObj[propertyName] = BingApps.Utilities.convertManageToJSON(property);
                        } else {
                            newObj[propertyName] = [];
                            size = property.size;
                            for (i = 0; i < size; i++) {
                                newObj[propertyName].push(BingApps.Utilities.convertManageToJSON(property[i]));
                            }
                        }
                    } else if (typeof property !== "function") {
                        newObj[propertyName] = property;
                    }
                }
            } else {
                newObj = [];
                size = obj.size;
                for (i = 0; i < size; i++) {
                    var arrayItem = obj[i];
                    if (typeof arrayItem === "object") {
                        newObj.push(BingApps.Utilities.convertManageToJSON(arrayItem));
                    } else if (typeof arrayItem !== "function") {
                        newObj.push(arrayItem);
                    }
                }
            }
            return newObj;
        },

        _uniqueId: 0,
        generateUniqueId: function () {
            /// <summary>Generates a unique id</summary>
            /// <returns>Some unique string</returns>
            var appId = "BingApps";
            BingApps.Utilities._uniqueId++;
            return appId + "." + BingApps.Utilities._uniqueId + "." + (new Date()).getTime();
        },

        computeStringHash: function (inputString) {
            /// <summary>
            /// Computes hash for a given string. It uses hash expression = s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1].
            /// This works well better for smaller length strings. This will not generate a unique hash always but for a smaller 
            /// set it'll work well.
            /// </summary>
            /// <param name="inputString">String to find the hash for</param>
            /// <returns>Hash value of the input string in the form of string</returns>
            var hash = 0;
            var str = (typeof inputString === 'string' ? inputString : JSON.stringify(inputString));
            var length = str ? str.length : 0;
            var character = null;
            for (var i = 0; i < length; i++) {
                character = str.charCodeAt(i);
                hash = ((hash << 5) - hash) + character;
                hash = hash & hash; //Convert to 32bit integer
            }
            return hash.toString();
        },

        truncateMultilineText: function (multilineElt) {
            var parentElt = multilineElt.parentElement;

            // measure the height of the element and its container
            var parentHeight = parentElt.clientHeight;
            var height = multilineElt.clientHeight;

            // if the element doesn't fit within its container
            if (height > parentHeight) {
                var originalString = multilineElt.innerText;
                var originalLength = originalString.length;

                // estimate the string length based on the height ratio of the element and its parent
                var initialLength = this._getEstimatedStringLength(originalLength, height, parentHeight);

                // find the next word boundary
                var nextWordBoundaryIndex = originalString.indexOf(" ", initialLength);
                initialLength = (nextWordBoundaryIndex === -1 ? initialLength : nextWordBoundaryIndex);

                // truncate at the initial estimate
                var tryLength = initialLength;
                var tryString = this._truncateString(originalString, tryLength);
                multilineElt.innerText = tryString;

                // measure the height again
                height = multilineElt.clientHeight;

                // while element is still too high to fit its container
                while (height > parentHeight) {
                    // find the previous word boundary
                    var oneLessWordLength = originalString.lastIndexOf(" ", tryLength - 1);
                    tryLength = oneLessWordLength === -1 ? tryLength - 1 : oneLessWordLength;

                    // if reached the beginning of the string, quit
                    if (tryLength <= 0) {
                        break;
                    }

                    // truncate, measure, and repeat
                    tryString = this._truncateString(originalString, tryLength);
                    multilineElt.innerText = tryString;
                    height = multilineElt.clientHeight;
                }
            }
        },

        _truncateString: function (str, length) {
            /// <summary>
            /// Returns the truncation of str to the given length, and adds "..." if any truncation happens.
            /// </summary>
            return str.substr(0, length) + (length >= str.length ? "" : "...");
        },

        _getEstimatedStringLength: function (strLength, currentHeight, desiredHeight) {
            /// <summary>
            /// For the input string length, given that its height is currentHeight, returns an estimated string length that would fit in desiredHeight.
            /// </summary>
            return Math.floor(strLength * desiredHeight / currentHeight);
        },

        _textDirectionInstance: null,
        getTextDirection: function (text) {
            if (BingApps.Utilities._textDirectionInstance === null) {
                BingApps.Utilities._textDirectionInstance = new BingApps.Utilities.TextDirection();
            }

            return BingApps.Utilities._textDirectionInstance.getTextDirection(text);
        },

        TextDirection: WinJS.Class.define(function textDirection_ctor() {
            this._rangeLookup = { 0: 0, 65: 1, 91: 0, 97: 1, 123: 0, 170: 1, 171: 0, 181: 1, 182: 0, 186: 1, 187: 0, 192: 1, 215: 0, 216: 1, 247: 0, 248: 1, 697: 0, 699: 1, 706: 0, 720: 1, 722: 0, 736: 1, 741: 0, 750: 1, 751: 0, 880: 1, 884: 0, 886: 1, 888: 0, 890: 1, 894: 0, 895: 0, 900: 0, 902: 1, 903: 0, 904: 1, 907: 0, 908: 1, 909: 0, 910: 1, 930: 0, 931: 1, 1014: 0, 1015: 1, 1155: 0, 1162: 1, 1320: 0, 1329: 1, 1367: 0, 1369: 1, 1376: 0, 1377: 1, 1416: 0, 1417: 1, 1418: 0, 1419: 0, 1425: 0, 1470: 2, 1471: 0, 1472: 2, 1473: 0, 1475: 2, 1476: 0, 1478: 2, 1479: 0, 1480: 0, 1488: 2, 1515: 0, 1520: 2, 1525: 0, 1536: 2, 1540: 0, 1542: 0, 1544: 2, 1545: 0, 1547: 2, 1548: 0, 1549: 2, 1550: 0, 1563: 2, 1564: 0, 1566: 2, 1611: 0, 1632: 2, 1642: 0, 1643: 2, 1648: 0, 1649: 2, 1750: 0, 1757: 2, 1758: 0, 1765: 2, 1767: 0, 1774: 2, 1776: 0, 1786: 2, 1806: 0, 1807: 2, 1809: 0, 1810: 2, 1840: 0, 1867: 0, 1869: 2, 1958: 0, 1969: 2, 1970: 0, 1984: 2, 2027: 0, 2036: 2, 2038: 0, 2042: 2, 2043: 0, 2048: 2, 2070: 0, 2074: 2, 2075: 0, 2084: 2, 2085: 0, 2088: 2, 2089: 0, 2094: 0, 2096: 2, 2111: 0, 2112: 2, 2137: 0, 2140: 0, 2142: 2, 2143: 0, 2304: 0, 2307: 1, 2362: 0, 2363: 1, 2364: 0, 2365: 1, 2369: 0, 2377: 1, 2381: 0, 2382: 1, 2385: 0, 2392: 1, 2402: 0, 2404: 1, 2424: 0, 2425: 1, 2432: 0, 2433: 0, 2434: 1, 2436: 0, 2437: 1, 2445: 0, 2447: 1, 2449: 0, 2451: 1, 2473: 0, 2474: 1, 2481: 0, 2482: 1, 2483: 0, 2486: 1, 2490: 0, 2492: 0, 2493: 1, 2497: 0, 2501: 0, 2503: 1, 2505: 0, 2507: 1, 2509: 0, 2510: 1, 2511: 0, 2519: 1, 2520: 0, 2524: 1, 2526: 0, 2527: 1, 2530: 0, 2532: 0, 2534: 1, 2546: 0, 2548: 1, 2555: 0, 2556: 0, 2561: 0, 2563: 1, 2564: 0, 2565: 1, 2571: 0, 2575: 1, 2577: 0, 2579: 1, 2601: 0, 2602: 1, 2609: 0, 2610: 1, 2612: 0, 2613: 1, 2615: 0, 2616: 1, 2618: 0, 2620: 0, 2621: 0, 2622: 1, 2625: 0, 2627: 0, 2631: 0, 2633: 0, 2635: 0, 2638: 0, 2641: 0, 2642: 0, 2649: 1, 2653: 0, 2654: 1, 2655: 0, 2662: 1, 2672: 0, 2674: 1, 2677: 0, 2678: 0, 2689: 0, 2691: 1, 2692: 0, 2693: 1, 2702: 0, 2703: 1, 2706: 0, 2707: 1, 2729: 0, 2730: 1, 2737: 0, 2738: 1, 2740: 0, 2741: 1, 2746: 0, 2748: 0, 2749: 1, 2753: 0, 2758: 0, 2759: 0, 2761: 1, 2762: 0, 2763: 1, 2765: 0, 2766: 0, 2768: 1, 2769: 0, 2784: 1, 2786: 0, 2788: 0, 2790: 1, 2800: 0, 2801: 0, 2802: 0, 2817: 0, 2818: 1, 2820: 0, 2821: 1, 2829: 0, 2831: 1, 2833: 0, 2835: 1, 2857: 0, 2858: 1, 2865: 0, 2866: 1, 2868: 0, 2869: 1, 2874: 0, 2876: 0, 2877: 1, 2879: 0, 2880: 1, 2881: 0, 2885: 0, 2887: 1, 2889: 0, 2891: 1, 2893: 0, 2894: 0, 2902: 0, 2903: 1, 2904: 0, 2908: 1, 2910: 0, 2911: 1, 2914: 0, 2916: 0, 2918: 1, 2936: 0, 2946: 0, 2947: 1, 2948: 0, 2949: 1, 2955: 0, 2958: 1, 2961: 0, 2962: 1, 2966: 0, 2969: 1, 2971: 0, 2972: 1, 2973: 0, 2974: 1, 2976: 0, 2979: 1, 2981: 0, 2984: 1, 2987: 0, 2990: 1, 3002: 0, 3006: 1, 3008: 0, 3009: 1, 3011: 0, 3014: 1, 3017: 0, 3018: 1, 3021: 0, 3022: 0, 3024: 1, 3025: 0, 3031: 1, 3032: 0, 3046: 1, 3059: 0, 3067: 0, 3073: 1, 3076: 0, 3077: 1, 3085: 0, 3086: 1, 3089: 0, 3090: 1, 3113: 0, 3114: 1, 3124: 0, 3125: 1, 3130: 0, 3133: 1, 3134: 0, 3137: 1, 3141: 0, 3142: 0, 3145: 0, 3146: 0, 3150: 0, 3157: 0, 3159: 0, 3160: 1, 3162: 0, 3168: 1, 3170: 0, 3172: 0, 3174: 1, 3184: 0, 3192: 0, 3199: 1, 3200: 0, 3202: 1, 3204: 0, 3205: 1, 3213: 0, 3214: 1, 3217: 0, 3218: 1, 3241: 0, 3242: 1, 3252: 0, 3253: 1, 3258: 0, 3260: 0, 3261: 1, 3269: 0, 3270: 1, 3273: 0, 3274: 1, 3276: 0, 3278: 0, 3285: 1, 3287: 0, 3294: 1, 3295: 0, 3296: 1, 3298: 0, 3300: 0, 3302: 1, 3312: 0, 3313: 1, 3315: 0, 3330: 1, 3332: 0, 3333: 1, 3341: 0, 3342: 1, 3345: 0, 3346: 1, 3387: 0, 3389: 1, 3393: 0, 3397: 0, 3398: 1, 3401: 0, 3402: 1, 3405: 0, 3406: 1, 3407: 0, 3415: 1, 3416: 0, 3424: 1, 3426: 0, 3428: 0, 3430: 1, 3446: 0, 3449: 1, 3456: 0, 3458: 1, 3460: 0, 3461: 1, 3479: 0, 3482: 1, 3506: 0, 3507: 1, 3516: 0, 3517: 1, 3518: 0, 3520: 1, 3527: 0, 3530: 0, 3531: 0, 3535: 1, 3538: 0, 3541: 0, 3542: 0, 3543: 0, 3544: 1, 3552: 0, 3570: 1, 3573: 0, 3585: 1, 3633: 0, 3634: 1, 3636: 0, 3643: 0, 3647: 0, 3648: 1, 3655: 0, 3663: 1, 3676: 0, 3713: 1, 3715: 0, 3716: 1, 3717: 0, 3719: 1, 3721: 0, 3722: 1, 3723: 0, 3725: 1, 3726: 0, 3732: 1, 3736: 0, 3737: 1, 3744: 0, 3745: 1, 3748: 0, 3749: 1, 3750: 0, 3751: 1, 3752: 0, 3754: 1, 3756: 0, 3757: 1, 3761: 0, 3762: 1, 3764: 0, 3770: 0, 3771: 0, 3773: 1, 3774: 0, 3776: 1, 3781: 0, 3782: 1, 3783: 0, 3784: 0, 3790: 0, 3792: 1, 3802: 0, 3804: 1, 3806: 0, 3840: 1, 3864: 0, 3866: 1, 3893: 0, 3894: 1, 3895: 0, 3896: 1, 3897: 0, 3902: 1, 3912: 0, 3913: 1, 3949: 0, 3953: 0, 3967: 1, 3968: 0, 3973: 1, 3974: 0, 3976: 1, 3981: 0, 3992: 0, 3993: 0, 4029: 0, 4030: 1, 4038: 0, 4039: 1, 4045: 0, 4046: 1, 4059: 0, 4096: 1, 4141: 0, 4145: 1, 4146: 0, 4152: 1, 4153: 0, 4155: 1, 4157: 0, 4159: 1, 4184: 0, 4186: 1, 4190: 0, 4193: 1, 4209: 0, 4213: 1, 4226: 0, 4227: 1, 4229: 0, 4231: 1, 4237: 0, 4238: 1, 4253: 0, 4254: 1, 4294: 0, 4304: 1, 4349: 0, 4352: 1, 4681: 0, 4682: 1, 4686: 0, 4688: 1, 4695: 0, 4696: 1, 4697: 0, 4698: 1, 4702: 0, 4704: 1, 4745: 0, 4746: 1, 4750: 0, 4752: 1, 4785: 0, 4786: 1, 4790: 0, 4792: 1, 4799: 0, 4800: 1, 4801: 0, 4802: 1, 4806: 0, 4808: 1, 4823: 0, 4824: 1, 4881: 0, 4882: 1, 4886: 0, 4888: 1, 4955: 0, 4957: 0, 4960: 1, 4989: 0, 4992: 1, 5008: 0, 5018: 0, 5024: 1, 5109: 0, 5120: 0, 5121: 1, 5760: 0, 5761: 1, 5787: 0, 5789: 0, 5792: 1, 5873: 0, 5888: 1, 5901: 0, 5902: 1, 5906: 0, 5909: 0, 5920: 1, 5938: 0, 5941: 1, 5943: 0, 5952: 1, 5970: 0, 5972: 0, 5984: 1, 5997: 0, 5998: 1, 6001: 0, 6002: 0, 6004: 0, 6016: 1, 6071: 0, 6078: 1, 6086: 0, 6087: 1, 6089: 0, 6100: 1, 6107: 0, 6108: 1, 6109: 0, 6110: 0, 6112: 1, 6122: 0, 6128: 0, 6138: 0, 6144: 0, 6159: 0, 6160: 1, 6170: 0, 6176: 1, 6264: 0, 6272: 1, 6313: 0, 6314: 1, 6315: 0, 6320: 1, 6390: 0, 6400: 1, 6429: 0, 6432: 0, 6435: 1, 6439: 0, 6441: 1, 6444: 0, 6448: 1, 6450: 0, 6451: 1, 6457: 0, 6460: 0, 6464: 0, 6465: 0, 6468: 0, 6470: 1, 6510: 0, 6512: 1, 6517: 0, 6528: 1, 6572: 0, 6576: 1, 6602: 0, 6608: 1, 6619: 0, 6622: 0, 6656: 1, 6679: 0, 6681: 1, 6684: 0, 6686: 1, 6742: 0, 6743: 1, 6744: 0, 6751: 0, 6752: 0, 6753: 1, 6754: 0, 6755: 1, 6757: 0, 6765: 1, 6771: 0, 6781: 0, 6783: 0, 6784: 1, 6794: 0, 6800: 1, 6810: 0, 6816: 1, 6830: 0, 6912: 0, 6916: 1, 6964: 0, 6965: 1, 6966: 0, 6971: 1, 6972: 0, 6973: 1, 6978: 0, 6979: 1, 6988: 0, 6992: 1, 7019: 0, 7028: 1, 7037: 0, 7040: 0, 7042: 1, 7074: 0, 7078: 1, 7080: 0, 7082: 1, 7083: 0, 7086: 1, 7098: 0, 7104: 1, 7142: 0, 7143: 1, 7144: 0, 7146: 1, 7149: 0, 7150: 1, 7151: 0, 7154: 1, 7156: 0, 7164: 1, 7212: 0, 7220: 1, 7222: 0, 7224: 0, 7227: 1, 7242: 0, 7245: 1, 7296: 0, 7376: 0, 7379: 1, 7380: 0, 7393: 1, 7394: 0, 7401: 1, 7405: 0, 7406: 1, 7411: 0, 7424: 1, 7616: 0, 7655: 0, 7676: 0, 7680: 1, 7958: 0, 7960: 1, 7966: 0, 7968: 1, 8006: 0, 8008: 1, 8014: 0, 8016: 1, 8024: 0, 8025: 1, 8026: 0, 8027: 1, 8028: 0, 8029: 1, 8030: 0, 8031: 1, 8062: 0, 8064: 1, 8117: 0, 8118: 1, 8125: 0, 8126: 1, 8127: 0, 8130: 1, 8133: 0, 8134: 1, 8141: 0, 8144: 1, 8148: 0, 8150: 1, 8156: 0, 8157: 0, 8160: 1, 8173: 0, 8176: 0, 8178: 1, 8181: 0, 8182: 1, 8189: 0, 8191: 0, 8192: 0, 8206: 1, 8207: 2, 8208: 0, 8234: 1, 8235: 2, 8236: 0, 8237: 1, 8238: 2, 8239: 0, 8293: 0, 8298: 0, 8305: 1, 8306: 0, 8308: 0, 8319: 1, 8320: 0, 8335: 0, 8336: 1, 8349: 0, 8352: 0, 8378: 0, 8400: 0, 8433: 0, 8448: 0, 8450: 1, 8451: 0, 8455: 1, 8456: 0, 8458: 1, 8468: 0, 8469: 1, 8470: 0, 8473: 1, 8478: 0, 8484: 1, 8485: 0, 8486: 1, 8487: 0, 8488: 1, 8489: 0, 8490: 1, 8494: 0, 8495: 1, 8506: 0, 8508: 1, 8512: 0, 8517: 1, 8522: 0, 8526: 1, 8528: 0, 8544: 1, 8585: 0, 8586: 0, 8592: 0, 9014: 1, 9083: 0, 9109: 1, 9110: 0, 9204: 0, 9216: 0, 9255: 0, 9280: 0, 9291: 0, 9312: 0, 9372: 1, 9450: 0, 9900: 1, 9901: 0, 9984: 0, 9985: 0, 10187: 0, 10188: 0, 10189: 0, 10190: 0, 10240: 1, 10496: 0, 11085: 0, 11088: 0, 11098: 0, 11264: 1, 11311: 0, 11312: 1, 11359: 0, 11360: 1, 11493: 0, 11499: 1, 11503: 0, 11506: 0, 11513: 0, 11520: 1, 11558: 0, 11568: 1, 11622: 0, 11631: 1, 11633: 0, 11647: 0, 11648: 1, 11671: 0, 11680: 1, 11687: 0, 11688: 1, 11695: 0, 11696: 1, 11703: 0, 11704: 1, 11711: 0, 11712: 1, 11719: 0, 11720: 1, 11727: 0, 11728: 1, 11735: 0, 11736: 1, 11743: 0, 11744: 0, 11826: 0, 11904: 0, 11930: 0, 11931: 0, 12020: 0, 12032: 0, 12246: 0, 12272: 0, 12284: 0, 12288: 0, 12293: 1, 12296: 0, 12321: 1, 12330: 0, 12337: 1, 12342: 0, 12344: 1, 12349: 0, 12352: 0, 12353: 1, 12439: 0, 12441: 0, 12445: 1, 12448: 0, 12449: 1, 12539: 0, 12540: 1, 12544: 0, 12549: 1, 12590: 0, 12593: 1, 12687: 0, 12688: 1, 12731: 0, 12736: 0, 12772: 0, 12784: 1, 12829: 0, 12831: 0, 12832: 1, 12880: 0, 12896: 1, 12924: 0, 12927: 1, 12977: 0, 12992: 1, 13004: 0, 13008: 1, 13055: 0, 13056: 1, 13175: 0, 13179: 1, 13278: 0, 13280: 1, 13311: 0, 13312: 1, 13313: 0, 19893: 1, 19894: 0, 19904: 0, 19968: 1, 19969: 0, 40907: 1, 40908: 0, 40960: 1, 42125: 0, 42128: 0, 42183: 0, 42192: 1, 42509: 0, 42512: 1, 42540: 0, 42560: 1, 42607: 0, 42612: 0, 42620: 0, 42624: 1, 42648: 0, 42656: 1, 42736: 0, 42738: 1, 42744: 0, 42752: 0, 42786: 1, 42888: 0, 42889: 1, 42895: 0, 42896: 1, 42898: 0, 42912: 1, 42922: 0, 43002: 1, 43010: 0, 43011: 1, 43014: 0, 43015: 1, 43019: 0, 43020: 1, 43045: 0, 43047: 1, 43048: 0, 43052: 0, 43056: 1, 43064: 0, 43066: 0, 43072: 1, 43124: 0, 43128: 0, 43136: 1, 43204: 0, 43205: 0, 43214: 1, 43226: 0, 43232: 0, 43250: 1, 43260: 0, 43264: 1, 43302: 0, 43310: 1, 43335: 0, 43346: 1, 43348: 0, 43359: 1, 43389: 0, 43392: 0, 43395: 1, 43443: 0, 43444: 1, 43446: 0, 43450: 1, 43452: 0, 43453: 1, 43470: 0, 43471: 1, 43482: 0, 43486: 1, 43488: 0, 43520: 1, 43561: 0, 43567: 1, 43569: 0, 43571: 1, 43573: 0, 43575: 0, 43584: 1, 43587: 0, 43588: 1, 43596: 0, 43597: 1, 43598: 0, 43600: 1, 43610: 0, 43612: 1, 43644: 0, 43648: 1, 43696: 0, 43697: 1, 43698: 0, 43701: 1, 43703: 0, 43705: 1, 43710: 0, 43712: 1, 43713: 0, 43714: 1, 43715: 0, 43739: 1, 43744: 0, 43777: 1, 43783: 0, 43785: 1, 43791: 0, 43793: 1, 43799: 0, 43808: 1, 43815: 0, 43816: 1, 43823: 0, 43968: 1, 44005: 0, 44006: 1, 44008: 0, 44009: 1, 44013: 0, 44014: 0, 44016: 1, 44026: 0, 44032: 1, 44033: 0, 55203: 1, 55204: 0, 55216: 1, 55239: 0, 55243: 1, 55292: 0, 55296: 1, 55297: 0, 56191: 1, 56193: 0, 56319: 1, 56321: 0, 57343: 1, 57345: 0, 63743: 1, 64046: 0, 64048: 1, 64110: 0, 64112: 1, 64218: 0, 64256: 1, 64263: 0, 64275: 1, 64280: 0, 64285: 2, 64286: 0, 64287: 2, 64297: 0, 64298: 2, 64311: 0, 64312: 2, 64317: 0, 64318: 2, 64319: 0, 64320: 2, 64322: 0, 64323: 2, 64325: 0, 64326: 2, 64450: 0, 64467: 2, 64830: 0, 64832: 0, 64848: 2, 64912: 0, 64914: 2, 64968: 0, 65008: 2, 65021: 0, 65022: 0, 65024: 0, 65050: 0, 65056: 0, 65063: 0, 65072: 0, 65107: 0, 65108: 0, 65127: 0, 65128: 0, 65132: 0, 65136: 2, 65141: 0, 65142: 2, 65277: 0, 65279: 0, 65280: 0, 65281: 0, 65313: 1, 65339: 0, 65345: 1, 65371: 0, 65382: 1, 65471: 0, 65474: 1, 65480: 0, 65482: 1, 65488: 0, 65490: 1, 65496: 0, 65498: 1, 65501: 0, 65504: 0, 65511: 0, 65512: 0, 65519: 0, 65529: 0, 65534: 0, 65536: 1, 65548: 0, 65549: 1, 65575: 0, 65576: 1, 65595: 0, 65596: 1, 65598: 0, 65599: 1, 65614: 0, 65616: 1, 65630: 0, 65664: 1, 65787: 0, 65792: 1, 65793: 0, 65794: 1, 65795: 0, 65799: 1, 65844: 0, 65847: 1, 65856: 0, 65931: 0, 65936: 0, 65948: 0, 66000: 1, 66045: 0, 66046: 0, 66176: 1, 66205: 0, 66208: 1, 66257: 0, 66304: 1, 66335: 0, 66336: 1, 66340: 0, 66352: 1, 66379: 0, 66432: 1, 66462: 0, 66463: 1, 66500: 0, 66504: 1, 66518: 0, 66560: 1, 66718: 0, 66720: 1, 66730: 0, 67584: 2, 67590: 0, 67592: 2, 67593: 0, 67594: 2, 67638: 0, 67639: 2, 67641: 0, 67644: 2, 67645: 0, 67647: 2, 67670: 0, 67671: 2, 67680: 0, 67840: 2, 67868: 0, 67871: 0, 67872: 2, 67898: 0, 67903: 2, 67904: 0, 68096: 2, 68097: 0, 68100: 0, 68101: 0, 68103: 0, 68108: 0, 68112: 2, 68116: 0, 68117: 2, 68120: 0, 68121: 2, 68148: 0, 68152: 0, 68155: 0, 68159: 0, 68160: 2, 68168: 0, 68176: 2, 68185: 0, 68192: 2, 68224: 0, 68352: 2, 68406: 0, 68409: 0, 68416: 2, 68438: 0, 68440: 2, 68467: 0, 68472: 2, 68480: 0, 68608: 2, 68681: 0, 69216: 2, 69247: 0, 69632: 1, 69633: 0, 69634: 1, 69688: 0, 69703: 1, 69710: 0, 69714: 0, 69734: 1, 69744: 0, 69760: 0, 69762: 1, 69811: 0, 69815: 1, 69817: 0, 69819: 1, 69826: 0, 73728: 1, 74607: 0, 74752: 1, 74851: 0, 74864: 1, 74868: 0, 77824: 1, 78895: 0, 92160: 1, 92729: 0, 110592: 1, 110594: 0, 118784: 1, 119030: 0, 119040: 1, 119079: 0, 119081: 1, 119143: 0, 119146: 1, 119155: 0, 119171: 1, 119173: 0, 119180: 1, 119210: 0, 119214: 1, 119262: 0, 119296: 0, 119366: 0, 119552: 0, 119639: 0, 119648: 1, 119666: 0, 119808: 1, 119893: 0, 119894: 1, 119965: 0, 119966: 1, 119968: 0, 119970: 1, 119971: 0, 119973: 1, 119975: 0, 119977: 1, 119981: 0, 119982: 1, 119994: 0, 119995: 1, 119996: 0, 119997: 1, 120004: 0, 120005: 1, 120070: 0, 120071: 1, 120075: 0, 120077: 1, 120085: 0, 120086: 1, 120093: 0, 120094: 1, 120122: 0, 120123: 1, 120127: 0, 120128: 1, 120133: 0, 120134: 1, 120135: 0, 120138: 1, 120145: 0, 120146: 1, 120486: 0, 120488: 1, 120539: 0, 120540: 1, 120597: 0, 120598: 1, 120655: 0, 120656: 1, 120713: 0, 120714: 1, 120771: 0, 120772: 1, 120780: 0, 120782: 0, 120832: 0, 126976: 0, 127020: 0, 127024: 0, 127124: 0, 127136: 0, 127151: 0, 127153: 0, 127167: 0, 127169: 0, 127184: 0, 127185: 0, 127200: 0, 127232: 0, 127243: 0, 127248: 1, 127279: 0, 127280: 1, 127338: 0, 127344: 1, 127387: 0, 127462: 1, 127491: 0, 127504: 1, 127547: 0, 127552: 1, 127561: 0, 127568: 1, 127570: 0, 127744: 0, 127777: 0, 127792: 0, 127798: 0, 127799: 0, 127869: 0, 127872: 0, 127892: 0, 127904: 0, 127941: 0, 127942: 0, 127947: 0, 127968: 0, 127985: 0, 128000: 0, 128063: 0, 128064: 0, 128065: 0, 128066: 0, 128140: 1, 128141: 0, 128248: 0, 128249: 0, 128253: 0, 128256: 0, 128292: 1, 128293: 0, 128318: 0, 128336: 0, 128360: 0, 128507: 0, 128512: 0, 128513: 0, 128529: 0, 128530: 0, 128533: 0, 128534: 0, 128535: 0, 128536: 0, 128537: 0, 128538: 0, 128539: 0, 128540: 0, 128543: 0, 128544: 0, 128550: 0, 128552: 0, 128556: 0, 128557: 0, 128558: 0, 128560: 0, 128564: 0, 128565: 0, 128577: 0, 128581: 0, 128592: 0, 128640: 0, 128710: 0, 128768: 0, 128884: 0, 131072: 1, 131073: 0, 173782: 1, 173783: 0, 173824: 1, 173825: 0, 177972: 1, 177973: 0, 177984: 1, 177985: 0, 178205: 1, 178206: 0, 194560: 1, 195102: 0, 917505: 0, 917506: 0, 917536: 0, 917632: 0, 917760: 0, 918000: 0, 983040: 1, 983041: 0, 1048573: 1, 1048574: 0, 1048576: 1, 1048577: 0, 1114109: 1 };
            this._ranges = [0, 65, 91, 97, 123, 170, 171, 181, 182, 186, 187, 192, 215, 216, 247, 248, 697, 699, 706, 720, 722, 736, 741, 750, 751, 880, 884, 886, 888, 890, 894, 895, 900, 902, 903, 904, 907, 908, 909, 910, 930, 931, 1014, 1015, 1155, 1162, 1320, 1329, 1367, 1369, 1376, 1377, 1416, 1417, 1418, 1419, 1425, 1470, 1471, 1472, 1473, 1475, 1476, 1478, 1479, 1480, 1488, 1515, 1520, 1525, 1536, 1540, 1542, 1544, 1545, 1547, 1548, 1549, 1550, 1563, 1564, 1566, 1611, 1632, 1642, 1643, 1648, 1649, 1750, 1757, 1758, 1765, 1767, 1774, 1776, 1786, 1806, 1807, 1809, 1810, 1840, 1867, 1869, 1958, 1969, 1970, 1984, 2027, 2036, 2038, 2042, 2043, 2048, 2070, 2074, 2075, 2084, 2085, 2088, 2089, 2094, 2096, 2111, 2112, 2137, 2140, 2142, 2143, 2304, 2307, 2362, 2363, 2364, 2365, 2369, 2377, 2381, 2382, 2385, 2392, 2402, 2404, 2424, 2425, 2432, 2433, 2434, 2436, 2437, 2445, 2447, 2449, 2451, 2473, 2474, 2481, 2482, 2483, 2486, 2490, 2492, 2493, 2497, 2501, 2503, 2505, 2507, 2509, 2510, 2511, 2519, 2520, 2524, 2526, 2527, 2530, 2532, 2534, 2546, 2548, 2555, 2556, 2561, 2563, 2564, 2565, 2571, 2575, 2577, 2579, 2601, 2602, 2609, 2610, 2612, 2613, 2615, 2616, 2618, 2620, 2621, 2622, 2625, 2627, 2631, 2633, 2635, 2638, 2641, 2642, 2649, 2653, 2654, 2655, 2662, 2672, 2674, 2677, 2678, 2689, 2691, 2692, 2693, 2702, 2703, 2706, 2707, 2729, 2730, 2737, 2738, 2740, 2741, 2746, 2748, 2749, 2753, 2758, 2759, 2761, 2762, 2763, 2765, 2766, 2768, 2769, 2784, 2786, 2788, 2790, 2800, 2801, 2802, 2817, 2818, 2820, 2821, 2829, 2831, 2833, 2835, 2857, 2858, 2865, 2866, 2868, 2869, 2874, 2876, 2877, 2879, 2880, 2881, 2885, 2887, 2889, 2891, 2893, 2894, 2902, 2903, 2904, 2908, 2910, 2911, 2914, 2916, 2918, 2936, 2946, 2947, 2948, 2949, 2955, 2958, 2961, 2962, 2966, 2969, 2971, 2972, 2973, 2974, 2976, 2979, 2981, 2984, 2987, 2990, 3002, 3006, 3008, 3009, 3011, 3014, 3017, 3018, 3021, 3022, 3024, 3025, 3031, 3032, 3046, 3059, 3067, 3073, 3076, 3077, 3085, 3086, 3089, 3090, 3113, 3114, 3124, 3125, 3130, 3133, 3134, 3137, 3141, 3142, 3145, 3146, 3150, 3157, 3159, 3160, 3162, 3168, 3170, 3172, 3174, 3184, 3192, 3199, 3200, 3202, 3204, 3205, 3213, 3214, 3217, 3218, 3241, 3242, 3252, 3253, 3258, 3260, 3261, 3269, 3270, 3273, 3274, 3276, 3278, 3285, 3287, 3294, 3295, 3296, 3298, 3300, 3302, 3312, 3313, 3315, 3330, 3332, 3333, 3341, 3342, 3345, 3346, 3387, 3389, 3393, 3397, 3398, 3401, 3402, 3405, 3406, 3407, 3415, 3416, 3424, 3426, 3428, 3430, 3446, 3449, 3456, 3458, 3460, 3461, 3479, 3482, 3506, 3507, 3516, 3517, 3518, 3520, 3527, 3530, 3531, 3535, 3538, 3541, 3542, 3543, 3544, 3552, 3570, 3573, 3585, 3633, 3634, 3636, 3643, 3647, 3648, 3655, 3663, 3676, 3713, 3715, 3716, 3717, 3719, 3721, 3722, 3723, 3725, 3726, 3732, 3736, 3737, 3744, 3745, 3748, 3749, 3750, 3751, 3752, 3754, 3756, 3757, 3761, 3762, 3764, 3770, 3771, 3773, 3774, 3776, 3781, 3782, 3783, 3784, 3790, 3792, 3802, 3804, 3806, 3840, 3864, 3866, 3893, 3894, 3895, 3896, 3897, 3902, 3912, 3913, 3949, 3953, 3967, 3968, 3973, 3974, 3976, 3981, 3992, 3993, 4029, 4030, 4038, 4039, 4045, 4046, 4059, 4096, 4141, 4145, 4146, 4152, 4153, 4155, 4157, 4159, 4184, 4186, 4190, 4193, 4209, 4213, 4226, 4227, 4229, 4231, 4237, 4238, 4253, 4254, 4294, 4304, 4349, 4352, 4681, 4682, 4686, 4688, 4695, 4696, 4697, 4698, 4702, 4704, 4745, 4746, 4750, 4752, 4785, 4786, 4790, 4792, 4799, 4800, 4801, 4802, 4806, 4808, 4823, 4824, 4881, 4882, 4886, 4888, 4955, 4957, 4960, 4989, 4992, 5008, 5018, 5024, 5109, 5120, 5121, 5760, 5761, 5787, 5789, 5792, 5873, 5888, 5901, 5902, 5906, 5909, 5920, 5938, 5941, 5943, 5952, 5970, 5972, 5984, 5997, 5998, 6001, 6002, 6004, 6016, 6071, 6078, 6086, 6087, 6089, 6100, 6107, 6108, 6109, 6110, 6112, 6122, 6128, 6138, 6144, 6159, 6160, 6170, 6176, 6264, 6272, 6313, 6314, 6315, 6320, 6390, 6400, 6429, 6432, 6435, 6439, 6441, 6444, 6448, 6450, 6451, 6457, 6460, 6464, 6465, 6468, 6470, 6510, 6512, 6517, 6528, 6572, 6576, 6602, 6608, 6619, 6622, 6656, 6679, 6681, 6684, 6686, 6742, 6743, 6744, 6751, 6752, 6753, 6754, 6755, 6757, 6765, 6771, 6781, 6783, 6784, 6794, 6800, 6810, 6816, 6830, 6912, 6916, 6964, 6965, 6966, 6971, 6972, 6973, 6978, 6979, 6988, 6992, 7019, 7028, 7037, 7040, 7042, 7074, 7078, 7080, 7082, 7083, 7086, 7098, 7104, 7142, 7143, 7144, 7146, 7149, 7150, 7151, 7154, 7156, 7164, 7212, 7220, 7222, 7224, 7227, 7242, 7245, 7296, 7376, 7379, 7380, 7393, 7394, 7401, 7405, 7406, 7411, 7424, 7616, 7655, 7676, 7680, 7958, 7960, 7966, 7968, 8006, 8008, 8014, 8016, 8024, 8025, 8026, 8027, 8028, 8029, 8030, 8031, 8062, 8064, 8117, 8118, 8125, 8126, 8127, 8130, 8133, 8134, 8141, 8144, 8148, 8150, 8156, 8157, 8160, 8173, 8176, 8178, 8181, 8182, 8189, 8191, 8192, 8206, 8207, 8208, 8234, 8235, 8236, 8237, 8238, 8239, 8293, 8298, 8305, 8306, 8308, 8319, 8320, 8335, 8336, 8349, 8352, 8378, 8400, 8433, 8448, 8450, 8451, 8455, 8456, 8458, 8468, 8469, 8470, 8473, 8478, 8484, 8485, 8486, 8487, 8488, 8489, 8490, 8494, 8495, 8506, 8508, 8512, 8517, 8522, 8526, 8528, 8544, 8585, 8586, 8592, 9014, 9083, 9109, 9110, 9204, 9216, 9255, 9280, 9291, 9312, 9372, 9450, 9900, 9901, 9984, 9985, 10187, 10188, 10189, 10190, 10240, 10496, 11085, 11088, 11098, 11264, 11311, 11312, 11359, 11360, 11493, 11499, 11503, 11506, 11513, 11520, 11558, 11568, 11622, 11631, 11633, 11647, 11648, 11671, 11680, 11687, 11688, 11695, 11696, 11703, 11704, 11711, 11712, 11719, 11720, 11727, 11728, 11735, 11736, 11743, 11744, 11826, 11904, 11930, 11931, 12020, 12032, 12246, 12272, 12284, 12288, 12293, 12296, 12321, 12330, 12337, 12342, 12344, 12349, 12352, 12353, 12439, 12441, 12445, 12448, 12449, 12539, 12540, 12544, 12549, 12590, 12593, 12687, 12688, 12731, 12736, 12772, 12784, 12829, 12831, 12832, 12880, 12896, 12924, 12927, 12977, 12992, 13004, 13008, 13055, 13056, 13175, 13179, 13278, 13280, 13311, 13312, 13313, 19893, 19894, 19904, 19968, 19969, 40907, 40908, 40960, 42125, 42128, 42183, 42192, 42509, 42512, 42540, 42560, 42607, 42612, 42620, 42624, 42648, 42656, 42736, 42738, 42744, 42752, 42786, 42888, 42889, 42895, 42896, 42898, 42912, 42922, 43002, 43010, 43011, 43014, 43015, 43019, 43020, 43045, 43047, 43048, 43052, 43056, 43064, 43066, 43072, 43124, 43128, 43136, 43204, 43205, 43214, 43226, 43232, 43250, 43260, 43264, 43302, 43310, 43335, 43346, 43348, 43359, 43389, 43392, 43395, 43443, 43444, 43446, 43450, 43452, 43453, 43470, 43471, 43482, 43486, 43488, 43520, 43561, 43567, 43569, 43571, 43573, 43575, 43584, 43587, 43588, 43596, 43597, 43598, 43600, 43610, 43612, 43644, 43648, 43696, 43697, 43698, 43701, 43703, 43705, 43710, 43712, 43713, 43714, 43715, 43739, 43744, 43777, 43783, 43785, 43791, 43793, 43799, 43808, 43815, 43816, 43823, 43968, 44005, 44006, 44008, 44009, 44013, 44014, 44016, 44026, 44032, 44033, 55203, 55204, 55216, 55239, 55243, 55292, 55296, 55297, 56191, 56193, 56319, 56321, 57343, 57345, 63743, 64046, 64048, 64110, 64112, 64218, 64256, 64263, 64275, 64280, 64285, 64286, 64287, 64297, 64298, 64311, 64312, 64317, 64318, 64319, 64320, 64322, 64323, 64325, 64326, 64450, 64467, 64830, 64832, 64848, 64912, 64914, 64968, 65008, 65021, 65022, 65024, 65050, 65056, 65063, 65072, 65107, 65108, 65127, 65128, 65132, 65136, 65141, 65142, 65277, 65279, 65280, 65281, 65313, 65339, 65345, 65371, 65382, 65471, 65474, 65480, 65482, 65488, 65490, 65496, 65498, 65501, 65504, 65511, 65512, 65519, 65529, 65534, 65536, 65548, 65549, 65575, 65576, 65595, 65596, 65598, 65599, 65614, 65616, 65630, 65664, 65787, 65792, 65793, 65794, 65795, 65799, 65844, 65847, 65856, 65931, 65936, 65948, 66000, 66045, 66046, 66176, 66205, 66208, 66257, 66304, 66335, 66336, 66340, 66352, 66379, 66432, 66462, 66463, 66500, 66504, 66518, 66560, 66718, 66720, 66730, 67584, 67590, 67592, 67593, 67594, 67638, 67639, 67641, 67644, 67645, 67647, 67670, 67671, 67680, 67840, 67868, 67871, 67872, 67898, 67903, 67904, 68096, 68097, 68100, 68101, 68103, 68108, 68112, 68116, 68117, 68120, 68121, 68148, 68152, 68155, 68159, 68160, 68168, 68176, 68185, 68192, 68224, 68352, 68406, 68409, 68416, 68438, 68440, 68467, 68472, 68480, 68608, 68681, 69216, 69247, 69632, 69633, 69634, 69688, 69703, 69710, 69714, 69734, 69744, 69760, 69762, 69811, 69815, 69817, 69819, 69826, 73728, 74607, 74752, 74851, 74864, 74868, 77824, 78895, 92160, 92729, 110592, 110594, 118784, 119030, 119040, 119079, 119081, 119143, 119146, 119155, 119171, 119173, 119180, 119210, 119214, 119262, 119296, 119366, 119552, 119639, 119648, 119666, 119808, 119893, 119894, 119965, 119966, 119968, 119970, 119971, 119973, 119975, 119977, 119981, 119982, 119994, 119995, 119996, 119997, 120004, 120005, 120070, 120071, 120075, 120077, 120085, 120086, 120093, 120094, 120122, 120123, 120127, 120128, 120133, 120134, 120135, 120138, 120145, 120146, 120486, 120488, 120539, 120540, 120597, 120598, 120655, 120656, 120713, 120714, 120771, 120772, 120780, 120782, 120832, 126976, 127020, 127024, 127124, 127136, 127151, 127153, 127167, 127169, 127184, 127185, 127200, 127232, 127243, 127248, 127279, 127280, 127338, 127344, 127387, 127462, 127491, 127504, 127547, 127552, 127561, 127568, 127570, 127744, 127777, 127792, 127798, 127799, 127869, 127872, 127892, 127904, 127941, 127942, 127947, 127968, 127985, 128000, 128063, 128064, 128065, 128066, 128140, 128141, 128248, 128249, 128253, 128256, 128292, 128293, 128318, 128336, 128360, 128507, 128512, 128513, 128529, 128530, 128533, 128534, 128535, 128536, 128537, 128538, 128539, 128540, 128543, 128544, 128550, 128552, 128556, 128557, 128558, 128560, 128564, 128565, 128577, 128581, 128592, 128640, 128710, 128768, 128884, 131072, 131073, 173782, 173783, 173824, 173825, 177972, 177973, 177984, 177985, 178205, 178206, 194560, 195102, 917505, 917506, 917536, 917632, 917760, 918000, 983040, 983041, 1048573, 1048574, 1048576, 1048577, 1114109];
        },
        {
            _rangeLookup: {},
            _ranges: [],
            _search: function (charCode) {
                /// <summary>Do binary search</summary>
                /// <param name="charCode">Character code to find closest range for</param>
                /// <returns>The containing range</returns>

                var low = 0,
                    high = this._ranges.length - 1,
                    i = 0;

                while (low <= high) {
                    i = Math.floor((low + high) / 2);
                    if (charCode < this._ranges[i]) {
                        if (high <= i + 1) {
                            return this._ranges[i - 1];
                        } else {
                            high = i + 1;
                            continue;
                        }
                    } else if (charCode > this._ranges[i]) {
                        if (low >= i - 1) {
                            return this._ranges[i];
                        } else {
                            low = i - 1;
                            continue;
                        }
                    } else {
                        return this._ranges[i];
                    }
                }

                return this._ranges[i];
            },

            _getCharacterCodeDirection: function (charCode) {
                /// <summary>Find the direction of the character</summary>
                /// <param name="charCode">Character code</param>
                /// <returns>The text direction</returns>

                var i = this._search(charCode);
                return this._rangeLookup[i];
            },

            _convertToStringDirection: function (dir) {
                if (dir === BingApps.Utilities.TextDirection.ltr) {
                    return "ltr";
                } else {
                    return "rtl";
                }
            },

            getTextDirection: function (text) {
                /// <summary>Find the text direction</summary>
                /// <param name="text">String to find text direction for</param>

                if (typeof text !== "string" || !text) {
                    return "ltr";
                }

                for (var i = 0; i < text.length; i++) {
                    var charCode = text.charCodeAt(i);
                    var charDirection = this._getCharacterCodeDirection(charCode);
                    if (charDirection !== BingApps.Utilities.TextDirection.unknown) {
                        return this._convertToStringDirection(charDirection);
                    }
                }

                return "ltr";
            },
        },
        {
            ltr: 1,
            rtl: 2,
            unknown: 0
        }),


        /// <summary>
        /// An in-memory cache with LRU eviction scheme
        /// </summary>
        MemoryCache: WinJS.Class.define(

        function memoryCache_ctor(maxSize) {
            /// <summary>
            /// Constructor: An in-memory cache with LRU eviction scheme
            /// </summary>
            /// <param name="maxSize">
            /// The maximum size of the cache
            /// </param>

            this.maxSize = maxSize;
            this._priorityQueue = [];
            this._lookupTable = {};
        },
        {

            /// <field>
            /// The maximum size of the cache
            /// </field>
            maxSize: 0,

            /// <field>
            /// The priority queue
            /// </field>
            _priorityQueue: [],

            /// <field>
            /// Lookup table
            /// </field>
            field: {},

            addItem: function (key, item) {
                /// <summary>
                /// Adds an item to the cache
                /// </summary>
                /// <param name="key">
                /// The key of the item
                /// </param>
                /// <param name="item">
                /// The item itself
                /// </param>
                /// <returns>
                /// Nothing
                /// </returns>

                // Check if the item exists
                if (!this.getItem(key)) {
                    if (this._priorityQueue.length === this.maxSize) {
                        delete this._lookupTable[this._priorityQueue[0]];
                        this._priorityQueue.splice(0, 1);
                    }
                    this._lookupTable[key] = item;
                    this._priorityQueue.push(key);
                }
                else {
                    this._lookupTable[key] = item;
                }
            },

            getItem: function (key) {
                /// <summary>
                /// Retrieves an item from the cache
                /// </summary>
                /// <param name="key">
                /// The key of the item
                /// </param>
                /// <returns>
                /// Returns the item or null if it is not found
                /// </returns>

                // Get the item from the lookup table
                var item = this._lookupTable[key];

                // Modify the position in the priority queue if the item was found in the lookup table.
                if (item) {
                    for (var i = 0; i < this._priorityQueue.length; i++) {
                        var entry = this._priorityQueue[i];
                        if (entry === key) {
                            this._priorityQueue.splice(i, 1);
                            this._priorityQueue.push(key);
                            break;
                        }
                    }
                }
                return item;
            },


        }),

        isPromiseCanceled: function (err) {
            if (!err) {
                return false;
            }
            return err.name === "Canceled";
        },

    });

    String.prototype.format = function () {
        /// <summary>
        /// Extend String prototype to include string formatter function
        /// Usage: "{0} {1}".format("I love", "JavaScript");
        /// </summary>

        var formatted = this,
            arg = null;
        for (arg = 0; arg < arguments.length; arg++) {
            formatted = formatted.replace("{" + arg + "}", arguments[arg]);
        }
        return formatted;
    };

    String.prototype.startsWith = function (str) {
        return (this.match("^" + str) !== null);
    };

    String.prototype.endsWith = function (str) {
        return (this.match(str + "$") !== null);
    };

})();

(function appexPlatformControlsHTMLElementInit() {
    "use strict";

    HTMLElement.prototype.getOffset = function () {
        return this.getOffsetLeft();
    };

    HTMLElement.prototype.getOffsetLeft = function () {
        if (window.getComputedStyle(this).direction === "rtl") {
            var element = this;
            var parent = element.offsetParent;
            return parent.offsetWidth - element.offsetLeft - element.offsetWidth;
        } else {
            return this.offsetLeft;
        }
    };

    HTMLElement.prototype.setOffsetLeft = function (value) {
        if (window.getComputedStyle(this).direction === "rtl") {
            var element = this;
            var parent = element.offsetParent;
            this.offsetLeft = parent.offsetWidth - value - element.offsetWidth;
        } else {
            this.offsetLeft = value;
        }
    };

    HTMLElement.prototype.getMarginLeft = function () {
        var margin = null;
        if (window.getComputedStyle(this).direction === "rtl") {
            margin = window.getComputedStyle(this).marginRight;
        } else {
            margin = window.getComputedStyle(this).marginLeft;
        }

        return parseInt(margin.replace("px", ""));
    };

    HTMLElement.prototype.setMarginLeft = function (value) {
        if (window.getComputedStyle(this).direction === "rtl") {
            this.style.marginRight = value;
        } else {
            this.style.marginLeft = value;
        }
    };
    HTMLElement.prototype.getMarginRight = function () {
        var margin = null;
        if (window.getComputedStyle(this).direction === "rtl") {
            margin = window.getComputedStyle(this).marginLeft;
        } else {
            margin = window.getComputedStyle(this).marginRight;
        }

        return parseInt(margin.replace("px", ""));
    };

    HTMLElement.prototype.setMarginRight = function (value) {
        if (window.getComputedStyle(this).direction === "rtl") {
            this.style.marginLeft = value;
        } else {
            this.style.marginRight = value;
        }
    };
    HTMLElement.prototype.getPaddingLeft = function () {
        if (window.getComputedStyle(this).direction === "rtl") {
            return this.style.paddingRight;
        } else {
            return this.style.paddingLeft;
        }
    };

    HTMLElement.prototype.setPaddingLeft = function (value) {
        if (window.getComputedStyle(this).direction === "rtl") {
            this.style.paddingRight = value;
        } else {
            this.style.paddingLeft = value;
        }
    };

    HTMLElement.prototype.getLeft = function () {
        if (window.getComputedStyle(this).direction === "rtl") {
            return this.style.right;
        } else {
            return this.style.left;
        }
    };

    HTMLElement.prototype.setLeft = function (value) {
        if (window.getComputedStyle(this).direction === "rtl") {
            this.style.right = value;
        } else {
            this.style.left = value;
        }
    };

})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

/// <reference path="services.js" />

/// <dictionary target='parameter'>frag,obj</dictionary>
(function appexPlatformUIInit() {
    "use strict";

    WinJS.Namespace.define("BingApps.Utilities",
    {
        getAppName: function () {
            /// <summary>Get the app name</summary>

            var defaultVal = "";
            var appName = WinJS.Resources.getString("AppTitle");

            return appName.empty ? defaultVal : appName.value;
        },

        _elementIds: 0,
        _previousTheme: "",
        setTheme: function (className, hasDarkBackground) {
            /// <summary>Adds the className to document.body for theming. Removes previous theme</summary>
            /// <param name="className">CSS class to apply</param>
            /// <param name="hasDarkBackground">Theme has a dark background</param>

            msWriteProfilerMark("BingApps:SetTheme:s");

            WinJS.Utilities.removeClass(document.body, BingApps.Utilities._previousTheme);
            if (className) {
                WinJS.Utilities.addClass(document.body, className);
                BingApps.Utilities._previousTheme = className;
            }

            if (hasDarkBackground) {
                WinJS.Utilities.addClass(document.body, "platformDarkBackground");
            } else {
                WinJS.Utilities.removeClass(document.body, "platformDarkBackground");
            }
            msWriteProfilerMark("BingApps:SetTheme:e");

        },

        setAutomationId: function (domElement, parent, suffix, id) {
            /// <summary> Set the automation id of an element </summary>
            /// <param name="domElement">The dom element to the id for</param>
            /// <param name="parent">The parent element whose id to use for the prefix</param>
            /// <param name="suffix">The suffix to use for the id</param>
            /// <param name="id">The raw id to use (if present, overrides the parent and suffix parameters)</param>

            if (id && id !== "") {
                domElement.id = id;
            }
            else if (!domElement.id && !parent && !suffix) {
                BingApps.Utilities._elementIds++;
                domElement.id = "platformUAId" + BingApps.Utilities._elementIds;
            } else if (parent && suffix) {
                domElement.id = parent.id + "_" + suffix;
            }
        },

        createElement: function (elementType, parent, suffix, id) {
            /// <summary> Creates an element and sets the automation id of an element </summary>
            /// <param name="elementType">The element type</param>
            /// <param name="parent">The parent element whose id to use for the prefix</param>
            /// <param name="suffix">The suffix to use for the id</param>
            /// <param name="id">The raw id to use (if present, overrides the parent and suffix parameters)</param>

            var e = document.createElement(elementType);
            BingApps.Utilities.setAutomationId(e, parent, suffix, id);
            return e;
        },

        /// <field>Cached data placeholder</field>
        cacheDataPlaceHolder: "cacheDataPlaceholder",

        disableAllEdgies: function (disabled) {
            /// <summary>
            /// Disables all edgies
            /// </summary>
            /// <returns>
            /// Nothing
            /// </returns>

            this._forEachEdgy(function platformUI_foreachEdgyDisable(edgy) {
                if (edgy) {
                    edgy.disabled = disabled;
                }
            });
        },

        dismissAllEdgies: function () {
            /// <summary>
            /// Dismiss all edgies
            /// </summary>
            /// <returns>
            /// Nothing
            /// </returns>

            this._forEachEdgy(function platformUI_foreachEdgyHide(edgy) {
                if (edgy && edgy.hide) {
                    edgy.hide();
                }
            });
        },

        _forEachEdgy: function (f) {
            /// <summary>
            /// Call a function on each edgy
            /// </summary>
            /// <returns>
            /// Nothing_forEachEdgy
            /// </returns>

            var appbarDoms = WinJS.Utilities.query(".win-appbar");
            for (var i = 0; i < appbarDoms.length; i++) {
                f(appbarDoms[i].winControl);
            }
        },

        /// <field>
        /// Template cache
        /// </field>
        _templateCache: new BingApps.Utilities.MemoryCache(20),

        cellSizeInPixels: 100,

        setModuleSizeAndClass: function (moduleInfo, div, gridLayout) {
            /// <summary>
            /// Function to load size a module and apply class name
            /// </summary>
            /// <param name="moduleInfo">
            /// An object that contains information about the module.
            /// {
            ///   fragmenthPath: path of fragment,
            ///   templateId: DOM id of template,
            ///   width: # of cells wide,
            ///   height: # of cells high,
            ///   className: css class name to applied to module
            /// }
            /// </param>
            /// <param name="div">
            /// Container DOM element.
            /// </param>
            /// <param name="gridLayout">
            /// Grid Layout structure that describes the layout of the grid (optional)
            /// {
            ///     cellWidth: width of cells in pixels
            ///     cellHeight: height of cells in pixels
            ///     horizontalPadding: horizontal padding between cells in pixels
            ///     verticalPadding: vertical padding between cells in pixels
            /// }
            /// </param>
            /// <returns>
            /// Nothing
            /// </returns>

            if (moduleInfo.width &&
                moduleInfo.height) {
                var cellHeight = BingApps.Utilities.cellSizeInPixels,
                cellWidth = BingApps.Utilities.cellSizeInPixels,
                verticalSpacing = 0,
                horizontalSpacing = 0,
                width = 0,
                height = 0;

                if (gridLayout) {
                    if (gridLayout.horizontalSpacing < 0) {
                        BingApps.Utilities.onError("Horizontal spacing must be greater than or equal to 0");
                    }
                    if (gridLayout.horizontalSpacing) {
                        horizontalSpacing = gridLayout.horizontalSpacing;
                    }
                    if (gridLayout.horizontalSpacing < 0) {
                        BingApps.Utilities.onError("Vertical spacing must be greater than or equal to 0");
                    }
                    if (gridLayout.verticalSpacing) {
                        verticalSpacing = gridLayout.verticalSpacing;
                    }
                    if (gridLayout.cellHeight <= 0) {
                        BingApps.Utilities.onError("Cell height must be greater than 0");
                    }
                    if (gridLayout.cellHeight) {
                        cellHeight = gridLayout.cellHeight;
                    }
                    if (gridLayout.cellWidth <= 0) {
                        BingApps.Utilities.onError("Cell width must be greater than 0");
                    }
                    if (gridLayout.cellWidth) {
                        cellWidth = gridLayout.cellWidth;
                    }

                }

                if (isNaN(moduleInfo.width)) {
                    // Allow freeform values
                    width = moduleInfo.width;
                } else {
                    if (moduleInfo.width <= 0) {
                        BingApps.Utilities.onError("ModuleInfo width must be greater than 0");
                    }
                    width = ((moduleInfo.width * cellWidth) + (moduleInfo.width - 1) * horizontalSpacing) + "px";
                }

                if (isNaN(moduleInfo.height)) {
                    // Allow freeform values
                    height = moduleInfo.height;
                } else {
                    if (moduleInfo.height <= 0) {
                        BingApps.Utilites.onError("ModuleInfo height must be greater than 0");
                    }
                    height = ((moduleInfo.height * cellHeight) + (moduleInfo.height - 1) * verticalSpacing) + "px";
                }

                div.style.width = width;
                div.style.height = height;
            }

            if (moduleInfo.className) {
                WinJS.Utilities.addClass(div, moduleInfo.className);
            }
        },

        _createPlaceholder: function (data, div) {
            var placeHolder = document.createElement("div");
            var placeHolderContainer = document.createElement("div");
            WinJS.Utilities.addClass(placeHolderContainer, "platformModuleContainer platformPlaceHolderContainer " + data.placeHolder);
            div.appendChild(placeHolderContainer);
            BingApps.Utilities.classifyPlaceholder(div);
            return placeHolderContainer;
        },

        classifyPlaceholder: function (div, classification) {
            if (!classification) {
                var height = div.offsetHeight;
                if (height > 250) {
                    classification = "large";
                } else if (height > 150 && height <= 250) {
                    classification = "medium";
                } else if (height <= 150 && height > 49) {
                    classification = "small";
                } else {
                    classification = "tiny";
                }
            }

            switch (classification) {
                case "hidden":
                    WinJS.Utilities.addClass(div, "platformPlaceHolderHidden");
                    break;

                case "tiny":
                    WinJS.Utilities.addClass(div, "platformPlaceHolderTiny");
                    break;

                case "small":
                    WinJS.Utilities.addClass(div, "platformPlaceHolderSmall");
                    break;

                case "large":
                    WinJS.Utilities.addClass(div, "platformPlaceHolderLarge");
                    break;

                case "medium":
                default:
                    WinJS.Utilities.addClass(div, "platformPlaceHolderMedium");
                    break;
            }
        },

        _renderFragment: function (fragmentPath, data, div, item) {
            /// <summary>
            /// Function to render a fragment
            /// </summary>
            /// <param name="fragmentPath">
            /// The path of the fragment to load
            /// </param>
            /// <param name="data">
            /// Data context
            /// </param>
            /// <param name="div">
            /// Container
            /// </param>
            /// <param name="item">
            /// Item object returned by the ListView
            /// </param>
            /// <returns>
            /// Returns a promise for the rendered item
            /// </returns>

            return new WinJS.Promise(function platformUI_renderFragmentPromiseInit(complete, error) {
                var cover = null,
                    placeHolder = null;

                // Check to see if we have a placeholder
                if (data.placeHolder && data.placeHolder !== BingApps.Utilities.cacheDataPlaceHolder) {
                    placeHolder = BingApps.Utilities.document._createPlaceholder(data, div);

                    if (data.dataPromise) {
                        complete(div);

                        // Wait on the actual data in the meantime
                        data.dataPromise.then(function platformUI_dataPromiseComplete(actualData) {
                            var container = document.createElement(container);
                            WinJS.UI.Fragments.renderCopy(fragmentPath, container).then(function platformUI_fragmentWithPlaceholderRenderCopyComplete() {
                                var fragments = WinJS.Utilities.query(".fragment", container);
                                var elementToBind = fragments.length > 0 ? fragments[0] : container;
                                WinJS.UI.processAll(elementToBind).then(function platformUI_fragmentWithPlaceholderProcessAllComplete() {
                                    WinJS.Resources.processAll(elementToBind).then(function platformUI_fragmentWithPlaceholderResourcesProcessAllComplete() {
                                        WinJS.Binding.processAll(elementToBind, actualData).then(function platformUI_fragmentWithPlaceholderBindingProcessAll() {
                                            WinJS.Utilities.addClass(container, "platformModuleContainer");
                                            div.appendChild(container);
                                            if (typeof item === "undefined" || item.isOnScreen()) {
                                                div.removeChild(placeHolder);
                                            }
                                            else {
                                                div.removeChild(placeHolder);
                                            }
                                        }, BingApps.Utilites.Utilities.onError);
                                    }, BingApps.Utilities.onError);
                                }, BingApps.Utilities.onError);
                            }, BingApps.Utilities.onError);
                        });
                    } else {
                        BingApps.Utilities.onError("No data promise provided");
                    }
                    // Check to see if we have cached data to show
                } else if (data.placeHolder && data.placeHolder === BingApps.Utilities.cacheDataPlaceHolder) {
                    placeHolder = document.createElement("div");
                    cover = document.createElement("div");
                    WinJS.Utilities.addClass(cover, "platformCachedCover platformModuleContainer");
                    WinJS.Utilities.addClass(placeHolder, "platformModuleContainer");
                    div.appendChild(placeHolder);
                    placeHolder.appendChild(cover);

                    WinJS.UI.Fragments.renderCopy(fragmentPath, placeHolder).then(function platformUI_fragmentWithCacheRenderCopyComplete() {
                        var fragments = WinJS.Utilities.query(".fragment", placeHolder);
                        var elementToBind = fragments.length > 0 ? fragments[0] : placeHolder;
                        WinJS.UI.processAll(elementToBind).then(function platformUI_fragmentWithCacheProcessAllComplete() {
                            WinJS.Resources.processAll(elementToBind).then(function platformUI_fragmentWithCacheResourcesProcessAllComplete() {
                                WinJS.Binding.processAll(elementToBind, data).then(function platformUI_fragmentWithCacheBindingProcessAllComplete() {
                                    complete(div);
                                    if (data.dataPromise) {
                                        // Wait on the actual data in the meantime
                                        data.dataPromise.then(function platformUI_dataPromiseComplete(actualData) {
                                            var container = document.createElement("div");
                                            WinJS.UI.Fragments.renderCopy(fragmentPath, container).then(function platformUI_fragmentWithCacheRenderCopyToContainerComplete() {
                                                var fragments = WinJS.Utilities.query(".fragment", container);
                                                var elementToBind = fragments.length > 0 ? fragments[0] : container;
                                                WinJS.Binding.processAll(elementToBind, actualData).then(function platformUI_fragmentWithCacheBindDataComplete() {
                                                    WinJS.Utilities.addClass(container, "platformModuleContainer");
                                                    container.style.zIndex = -1;
                                                    div.appendChild(container);
                                                    if (typeof item === "undefined" || item.isOnScreen()) {
                                                        WinJS.UI.Animation.crossFade(container, placeHolder).then(function platformUI_crossFadeComplete() {
                                                            div.removeChild(placeHolder);
                                                        });
                                                    } else {
                                                        div.removeChild(placeHolder);
                                                    }
                                                }, BingApps.Utilities.onError);
                                            }, BingApps.Utilities.onError);
                                        });
                                    } else {
                                        BingApps.Utilities.onError("No data promise provided");
                                    }
                                }, BingApps.Utilities.onError);
                            }, BingApps.Utilities.onError);
                        }, BingApps.Utilities.onError);
                    }, BingApps.Utilities.onError);

                    // Standard case where all data is available
                } else {
                    WinJS.UI.Fragments.renderCopy(fragmentPath, div).then(function platformUI_normalFragmentRenderCopyComplete() {
                        var fragments = WinJS.Utilities.query(".fragment", div);
                        var elementToBind = fragments.length > 0 ? fragments[0] : div;
                        WinJS.UI.processAll(elementToBind).then(function platformUI_normalFragmentBindComplete() {
                            WinJS.Resources.processAll(elementToBind).then(function platformUI_normalFragmentResourcesProcessAllComplete() {
                                WinJS.Binding.processAll(elementToBind, data).then(function platformUI_normalFragmentBindDataComplete() {
                                    complete(div);
                                },
                                BingApps.Utilities.onError);
                            },
                            BingApps.Utilities.onError);
                        },
                        BingApps.Utilities.onError);
                    }, BingApps.Utilities.onError);
                }
            });
        },

        _renderTemplate: function (template, data, div, item) {
            /// <summary>
            /// Function to render a template
            /// </summary>
            /// <param name="template">
            /// WinJS.Binding.Template
            /// </param>
            /// <param name="data">
            /// Data context
            /// </param>
            /// <param name="div">
            /// Container
            /// </param>
            /// <param name="item">
            /// Item object returned by the ListView
            /// </param>
            /// <returns>
            /// Returns a promise for the rendered item
            /// </returns>

            return new WinJS.Promise(function platformUI_renderTemplatePromiseInit(complete, error) {
                var placeHolder = null,
                    cover = null;

                // Check to see if we have a placeholder
                if (data.placeHolder && data.placeHolder !== BingApps.Utilities.cacheDataPlaceHolder) {
                    placeHolder = BingApps.Utilities._createPlaceholder(data, div);

                    if (data.dataPromise) {
                        complete(div);
                        // Wait on the actual data in the meantime
                        data.dataPromise.then(function platformUI_actualDataPromiseComplete(actualData) {
                            template.render(actualData, null).then(function platformUI_renderActualDataComplete(container) {
                                WinJS.Utilities.addClass(container, "platformModuleContainer");
                                div.appendChild(container);
                                if (typeof item === "undefined" || item.isOnScreen()) {
                                    div.removeChild(placeHolder);
                                }
                                else {
                                    div.removeChild(placeHolder);
                                }
                            }, BingApps.Utilities.onError);
                        });
                    } else {
                        BingApps.Utilities.onError("No data promise provided");
                    }
                    // Check to see if we have cached data to show
                } else if (data.placeHolder && data.placeHolder === BingApps.Utilities.cacheDataPlaceHolder) {
                    placeHolder = document.createElement("div");
                    cover = document.createElement("div");
                    WinJS.Utilities.addClass(cover, "platformCachedCover platformModuleContainer");
                    WinJS.Utilities.addClass(placeHolder, "platformModuleContainer");
                    div.appendChild(placeHolder);
                    placeHolder.appendChild(cover);
                    template.render(data, placeHolder).then(function platformUI_renderDataToPlaceholderComplete() {
                        complete(div);
                        if (data.dataPromise) {
                            // Wait on the actual data in the meantime
                            data.dataPromise.then(function platformUI_actualDataPromiseComplete(actualData) {
                                template.render(actualData, null).then(function platformUI_renderActualDataComplete(container) {
                                    WinJS.Utilities.addClass(container, "platformModuleContainer");
                                    container.style.zIndex = -1;
                                    div.appendChild(container);
                                    if (typeof item === "undefined" || item.isOnScreen()) {
                                        WinJS.UI.Animation.crossFade(container, placeHolder).then(function platformUI_crossFadeComplete() {
                                            div.removeChild(placeHolder);
                                        });
                                    } else {
                                        div.removeChild(placeHolder);
                                    }
                                }, BingApps.Utilities.onError);
                            });
                        } else {
                            BingApps.Utilities.onError("No data promise provided");
                        }
                    },
                    BingApps.Utilities.onError);
                    // Standard case where all data is available
                } else {
                    template.render(data, div).then(function platformUI_normalRenderTemplateComplete(container) {
                        complete(div);
                    }, BingApps.Utilities.onError);
                }
            });
        },

        _getTemplateKey: function (moduleInfo) {
            /// <summary>
            /// Function to load size a module and apply class name
            /// </summary>
            /// <param name="moduleInfo">
            /// An object that contains information about the module.
            /// {
            ///   fragmenthPath: path of fragment,
            ///   templateId: DOM id of template,
            ///   width: # of cells wide,
            ///   height: # of cells high,
            ///   className: css class name to applied to module
            /// }
            /// </param>
            /// <returns>
            /// Returns a unique identifier for the module template
            /// </returns>

            if (moduleInfo.fragmentPath &&
                moduleInfo.templateId) {
                return moduleInfo.fragmentPath + "/" + moduleInfo.templateId;
            } else if (moduleInfo.templateId) {
                return WinJS.Navigation.location.fragment + "/" + moduleInfo.templateId;
            } else {
                return moduleInfo.fragmentPath;
            }
        },

        loadModule: function (moduleInfo, data, div, gridLayout, item) {
            /// <summary>
            /// Function to load a module
            /// </summary>
            /// <param name="moduleInfo">
            /// An object that contains information about the module.
            /// {
            ///   fragmenthPath: path of fragment,
            ///   templateId: DOM id of template,
            ///   width: # of cells wide,
            ///   height: # of cells high,
            ///   className: css class name to applied to module
            /// }
            /// </param>
            /// <param name="data">
            /// Data to bind to template
            /// </param>
            /// <param name="div">
            /// Container DOM element. Optional. If omitted, one will be created and
            /// moduleInfo sizing and class will be applied to the created one.
            /// </param>
            /// <param name="gridLayout">
            /// Grid Layout structure that describes the layout of the grid (optional)
            /// {
            ///     cellWidth: width of cells in pixels
            ///     cellHeight: height of cells in pixels
            ///     horizontalPadding: horizontal padding between cells in pixels
            ///     verticalPadding: vertical padding between cells in pixels
            /// }
            /// </param>
            /// <param name="item">
            /// Item object returned by the ListView
            /// </param>
            /// <returns>
            /// Promise containing the complete DOM element
            /// </returns>
            var uniqueMarker = moduleInfo.templateId;
            return new WinJS.Promise(function platformUI_loadModulePromiseInit(complete, error) {
                // If the template is in external fragment
                if (moduleInfo.fragmentPath && moduleInfo.templateId) {
                    // Create a container div if one has not been provided
                    if (!div) {
                        div = document.createElement("div");
                        BingApps.Utilities.setModuleSizeAndClass(moduleInfo, div, gridLayout);
                    }

                    var templatePromise = BingApps.Utilities._fetchModule(moduleInfo);
                    if (WinJS.Promise.is(templatePromise)) {
                        templatePromise.then(function platformUI_templatePromiseComplete(template) {
                            // Render the template
                            BingApps.Utilities._renderTemplate(template, data, div, item).then(function platformUI_renderTemplateFromPromiseComplete() {
                                msWriteProfilerMark("BingApps:loadModule:" + uniqueMarker + ":e");
                                complete(div);
                            });
                        });

                    } else {
                        // Render the template
                        BingApps.Utilities._renderTemplate(templatePromise, data, div, item).then(function platformUI_renderTemplateComplete() {
                            msWriteProfilerMark("BingApps:loadModule:" + uniqueMarker + ":e");
                            complete(div);
                        });
                    }

                    // If the template is an entire fragment
                } else if (moduleInfo.fragmentPath) {
                    BingApps.Utilities.setModuleSizeAndClass(moduleInfo, div, gridLayout);
                    BingApps.Utilities._renderFragment(moduleInfo.fragmentPath, data, div, item).then(function platformUI_renderModuleFragmentPathComplete(div) {
                        complete(div);
                        msWriteProfilerMark("BingApps:loadModule:" + uniqueMarker + ":e");
                    });
                    // If the template is already on the page
                } else if (moduleInfo.templateId) {
                    var template = document.getElementById(moduleInfo.templateId);
                    if (template && template.winControl) {
                        BingApps.Utilities._renderTemplate(template.winControl, data, div, item).then(function platformUI_renderTemplateFromIdComplete() {
                            BingApps.Utilities._templateCache.addItem(BingApps.Utilities._getTemplateKey(moduleInfo), template);
                            msWriteProfilerMark("BingApps:loadModule:" + uniqueMarker + ":e");
                            complete(div);
                        },
                        BingApps.Utilities.onError);
                    } else {
                        if (BingApps.isDebug) {
                            BingApps.Utilities.onError("Unable to find template. Check templateId");
                        } else {
                            complete(div);
                        }
                    }
                } else {
                    BingApps.Utilities.onError("Invalid id and fragment path");
                }
            });
        },

        _lastFragmentPath: null,
        _lastFragment: null,

        _fetchModule: function (moduleInfo) {
            /// <summary>
            /// Function to fetch a module
            /// </summary>
            /// <param name="moduleInfo">
            /// An object that contains information about the module.
            /// {
            ///   fragmenthPath: path of fragment,
            ///   templateId: DOM id of template,
            ///   width: # of cells wide,
            ///   height: # of cells high,
            ///   className: css class name to applied to module
            /// }
            /// </param>
            /// <returns>
            /// Promise containing the template
            /// </returns>

            var key = BingApps.Utilities._getTemplateKey(moduleInfo),
                template = BingApps.Utilities._templateCache.getItem(key),
                promise = null;

            if (template) {
                return template;
            } else {
                promise = new WinJS.Promise(function platformUI_fetchModulePromiseInit(complete, error) {
                    var fragPromise = null;

                    // Avoid making another copy of the fragment if the last fragment is available
                    if (moduleInfo.fragmentPath === BingApps.Utilities._lastFragmentPath) {
                        fragPromise = WinJS.Promise.wrap(BingApps.Utilities._lastFragment);
                    } else {
                        // We don't need to explicitly call cache to cache the fragment. RenderCopy will do
                        // that automatically
                        fragPromise = WinJS.UI.Fragments.renderCopy(moduleInfo.fragmentPath);
                    }
                    fragPromise.then(function platformUI_moduleFragmentComplete(frag) {
                        BingApps.Utilities._lastFragment = frag;
                        BingApps.Utilities._lastFragmentPath = moduleInfo.fragmentPath;

                        var collection = WinJS.Utilities.query("#" + moduleInfo.templateId, frag);
                        if (collection.length > 0) {
                            // Find the template
                            var template = collection[0];
                            WinJS.UI.processAll(template).then(function platformUI_templateProcessAllComplete() {
                                WinJS.Resources.processAll(template).then(function platformUI_templateResourcesProcessAllComplete() {
                                    complete(template.winControl);
                                },
                                BingApps.Utilities.onError);
                            },
                            BingApps.Utilities.onError);
                        } else {
                            BingApps.Utilities.onError("Unable to find template");
                        }

                    },
                    BingApps.Utilities.onError);
                });

                // Add the promise to the cache
                BingApps.Utilities._templateCache.addItem(key, promise);
                promise.then(function platformUI_fetchModuleComplete(template) {
                    // Replace the promise with the real thing
                    BingApps.Utilities._templateCache.addItem(key, template);
                },
                BingApps.Utilities.onError);
                return promise;
            }
        },

    });


    WinJS.Namespace.define("BingApps.Utilities.Progress", {
        _domElements: {},
        _counts: {},

        /// <summary> Header progress type </summary>
        headerProgressType: "headerProgressType",
        /// <summary> Center progress type </summary>
        centerProgressType: "centerProgressType",

        _createElementIfNeeded: function (type) {
            /// <summary> Returns the DOM element for the progress type. Creates it if it has not been created yet. </summary>
            /// <param name="type">The type of the progress: headerProgressType or centerProgressType</param>
            /// <returns>Nothing</returns>

            var element = BingApps.Utilities.Progress._domElements[type];
            if (!element) {
                if (type === BingApps.Utilities.Progress.headerProgressType) {
                    element = document.createElement("progress");
                    WinJS.Utilities.addClass(element, "platformProgressHeader");
                    element.setAttribute("role", "presentation");
                } else if (type === BingApps.Utilities.Progress.centerProgressType) {
                    element = document.createElement("div");
                    WinJS.Utilities.addClass(element, "platformProgressCenterWrapper");
                    var progressElement = document.createElement("div");
                    WinJS.Utilities.addClass(progressElement, "platformProgressCenter");
                    var progress = document.createElement("progress");
                    WinJS.Utilities.addClass(progress, "win-large win-ring");
                    progress.setAttribute("role", "presentation");
                    progressElement.appendChild(progress);
                    var loading = document.createElement("div");
                    WinJS.Utilities.addClass(loading, "platformProgressAlert");
                    loading.setAttribute("aria-label", WinJS.Resources.getString("BingApps/progressAlertAriaLabel").value);
                    loading.setAttribute("role", "alert"); // implicit aria-live=assertive region
                    loading.setAttribute("aria-atomic", true);
                    loading.innerText = WinJS.Resources.getString("BingApps/Loading").value;
                    progressElement.appendChild(loading);
                    element.appendChild(progressElement);
                } else {
                    BingApps.Utilities.onError("Invalid progress type");
                }

                WinJS.Utilities.addClass(element, "platformProgress");
                BingApps.Utilities.Progress._domElements[type] = element;
                document.body.appendChild(element);
                BingApps.Utilities.Progress._counts[type] = 0;
            }
            return element;
        },

        _deleteElement: function (type) {
            var element = BingApps.Utilities.Progress._domElements[type];
            if (element) {
                if (element.parentElement) {
                    element.parentElement.removeChild(element);
                }
                BingApps.Utilities.Progress._domElements[type] = null;
            }
        },

        _updateAriaLiveRegion: function (type) {
            var element = BingApps.Utilities.Progress._domElements[type];
            if (element) {
                var alertEl = element.querySelector(".platformProgressAlert");
                if (alertEl) {
                    alertEl.innerText = WinJS.Resources.getString("BingApps/Loading").value;
                }
            }
        },

        showProgress: function (type) {
            /// <summary> Increment the ref count for progress indicator. Activates indicator if it hasn't already. </summary>
            /// <param name="type">The type of the progress: headerProgressType or centerProgressType</param>
            /// <returns>Nothing</returns>

            BingApps.Utilities.Progress._createElementIfNeeded(type);
            BingApps.Utilities.Progress._updateAriaLiveRegion(type);
            BingApps.Utilities.Progress._counts[type]++;
        },

        hideProgress: function (type) {
            /// <summary> Decrements the ref count for progress indicator. Deactivates indicator if the ref count reaches 0. </summary>
            /// <param name="type">The type of the progress: headerProgressType or centerProgressType</param>
            /// <returns>Nothing</returns>

            BingApps.Utilities.Progress._counts[type] = Math.max(0, BingApps.Utilities.Progress._counts[type] - 1);
            if (BingApps.Utilities.Progress._counts[type] === 0) {
                this._deleteElement(type);
            }
        },

        resetProgress: function (type) {
            /// <summary> Resets the ref count for progress indicator to 0 and turns off indicator</summary>
            /// <param name="type">The type of the progress: headerProgressType or centerProgressType</param>
            /// <returns>Nothing</returns>

            this._deleteElement(type);
            BingApps.Utilities.Progress._counts[type] = 0;
        },

        resetAll: function () {
            /// <summary> Resets all progress indicators</summary>
            /// <param name="type">The type of the progress: headerProgressType or centerProgressType</param>
            /// <returns>Nothing</returns>

            BingApps.Utilities.Progress.resetProgress(BingApps.Utilities.Progress.headerProgressType);
            BingApps.Utilities.Progress.resetProgress(BingApps.Utilities.Progress.centerProgressType);
        },

    });

    // Upon page navigation, reset the progress indicators
    WinJS.Navigation.addEventListener("navigating", BingApps.Utilities.Progress.resetAll);


    WinJS.Namespace.define("BingApps.Utilities.Error", {
        _errorControl: null,
        _callback: null,
        _type: null,

        NO_INTERNET: "noInternet",
        STANDARD_ERROR: "standardError",

        errorExists: function () {
            /// <summary> Determine if a platform error exists </summary>

            return this._errorControl !== null;
        },

        removeError: function (restoreProgress) {
            /// <summary> Remove the error control and restore the page </summary>

            if (BingApps.Utilities.Error._errorControl) {
                var element = BingApps.Utilities.Error._errorControl.element;
                if (element && element.parentNode) {
                    element.parentNode.removeChild(element);
                }
                BingApps.Utilities.Error._errorControl = null;
                var elementsToShow = WinJS.Utilities.query(".platformHideableContent", document.body);
                var i = 0;
                for (i = 0; i < elementsToShow.length; i++) {
                    WinJS.Utilities.removeClass(elementsToShow[i], "platformHide");
                }

                if (restoreProgress) {
                    for (var type in this._previousProgressCounts) {
                        for (i = 0; i < this._previousProgressCounts[type]; i++) {
                            BingApps.Utilities.Progress.showProgress(type);
                        }
                    }
                }
            }
        },

        _previousProgressCounts: [],

        showError: function (type, callback, customErrorControl, suspend, host) {
            /// <summary> Remove the error control and hide parts of the page </summary>
            /// <param name="type">The error type: BingApps.Utilities.Error.NO_INTERNET or STANDARD_ERROR</param>
            /// <param name="callback">The callback function to invoke when the button is pressed</param>

            if (suspend) {
                if (BingApps.Utilities.Error._errorControl) {
                    return;
                }

                this._previousProgressCounts = {};
                for (var progressType in BingApps.Utilities.Progress._counts) {
                    this._previousProgressCounts[progressType] = BingApps.Utilities.Progress._counts[progressType];
                }
            }

            // Hide all progress indicators
            BingApps.Utilities.Progress.resetAll();

            // Remove the old error
            BingApps.Utilities.Error.removeError();

            if (customErrorControl) {
                BingApps.Utilities.Error._errorControl = customErrorControl;
            }
            else {
                BingApps.Utilities.Error._errorControl = new BingApps.Utilities.ErrorControl();
                BingApps.Utilities.Error._errorControl.type = type;
            }

            BingApps.Utilities.Error._errorControl.buttonHide = suspend;
            BingApps.Utilities.Error._callback = callback;
            BingApps.Utilities.Error._type = type;

            // Create the error control
            if (!suspend) {
                BingApps.Utilities.Error._errorControl.callback = function () {
                    BingApps.Utilities.Error.removeError();
                    if (callback) {
                        callback();
                    }
                };
            }

            // Hide all major elements
            var elementsToHide = WinJS.Utilities.query(".platformHideableContent");
            for (var i = 0; i < elementsToHide.length; i++) {
                WinJS.Utilities.addClass(elementsToHide[i], "platformHide");
            }
            var parent = host || document.body;
            parent.appendChild(BingApps.Utilities.Error._errorControl.element);

        },

        showSystemMessage: function (errorText, callback, isSticky, closeButtonHidden, additionalClass) {
            /// <summary> Shows the system error message</summary>
            /// <param name="errorText">Error text.</param>
            /// <param name="callback">Callback function to invoke when button is pressed.</param>
            /// <param name="isSticky">Don't dismiss the flyout</param>
            /// <param name="closeButtonHidden">Hide the close button</param>

            BingApps.Utilities.dismissAllEdgies();
            var div = document.createElement("div"),
                flyout = null;

            WinJS.Utilities.addClass(div, "platformSystemFlyout");
            if (additionalClass) {
                WinJS.Utilities.addClass(div, additionalClass);
            }

            flyout = new BingApps.Utilities.Flyout(div, {
                buttonText: "",
                contentFragment: {
                    path: "/BingSdk/assets/Utilites/html/MessageFragments.html",   
                    id: "platformSystemMessage",
                    data: {
                        message: errorText
                    }
                },
                isSticky: isSticky,
                closeButtonHidden: closeButtonHidden
            });

            flyout.onHide = callback;

        },

        showCatastrophicError: function (e) {
            throw e;
        },

        getErrorModuleItem: function (retryCallback, width, height, messageResource, errorContainerClassName) {
            /// <summary>Returns an error module item for use in a MultisizeHorizontalGrid</summary>
            /// <param name="retryCallback">Function to invoke when retry button is pressed</param>
            /// <param name="width">Optional width of module</param>
            /// <param name="height">Optional height of module</param>
            /// <param name="messageResource"> Optional resource path to message content</param>
            /// <param name="divClassName"> Optional html class of the error message</param>
            /// <returns> Returns an item for use in a Binding.List</returns>

            var messageLocation = messageResource || "BingApps/standardErrorDescription";

            return {
                message: WinJS.Resources.getString(messageLocation),
                retryCallback: retryCallback,
                moduleInfo: {
                    width: width ? width : "250px",
                    height: height ? height : "250px",
                    isInteractive: true,
                    disableHover: true,
                    fragmentPath: "/BingSdk/assets/Utilites/html/MessageFragments.html",
                    templateId: "platformErrorModule"
                },
                errorContainerClassName: errorContainerClassName ? "platformErrorModule " + errorContainerClassName : "platformErrorModule"
            };
        },

        getProgressModuleItem: function (width, height) {
            /// <summary>Returns a progress module with the progress ring.</summary>
            /// <param name="width">Optional width of module</param>
            /// <param name="height">Optional height of module</param>

            return {
                moduleInfo: {
                    width: width ? width : "450px",
                    height: height ? height : "100%",
                    isInteractive: true,
                    disableHover: true,
                    fragmentPath: "SDKControls/SlideShow/js/platform.html",
                    templateId: "platformProgressModule"
                }
            };
        }
    });

    // Remove the error control whenever navigating
    WinJS.Navigation.addEventListener("navigating", BingApps.Utilities.Error.removeError);

    window.addEventListener("online", platform_onNetworkStatusChanged);
    window.addEventListener("offline", platform_onNetworkStatusChanged);

    function platform_onNetworkStatusChanged() {
        try {
            if (window.navigator.onLine) {
                if (BingApps.Utilities.Error.errorExists() &&
                    BingApps.Utilities.Error._type === BingApps.Utilities.Error.NO_INTERNET &&
                    BingApps.Utilities.Error._callback) {
                    BingApps.Utilities.Error.removeError();
                    BingApps.Utilities.Error._callback();
                }

                var errorModules = WinJS.Utilities.query(".platformRetryButton", document.body);
                for (var i = 0; i < errorModules.length; i++) {
                    var errorModule = errorModules.get(i);
                    if (errorModule.onclick) {
                        errorModule.onclick();
                    }
                }
            }
        }
        catch (e) {
        }
    };

})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

var DISABLE_ANIMATION = true;

// WindowEventManager handles all document & window events related to keyboard navigation and mouse/keyboard shortcuts
// WindowEventManager uses a singleton pattern
(function appexPlatformControlsWindowEventManagerInit() {
    "use strict";

    var WindowEventManager = WinJS.Namespace.define("BingApps.WindowEventManager", {

        Events: {
            PAGEUP: "pageup",
            PAGEDOWN: "pagedown",
            CURSORKEY: "cursorkey",
            TAB: "tab",
            MOUSE_BACK: "mouse_back",
            MOUSE_FORWARD: "mouse_forward",
            WINDOW_RESIZE: "window_resize"
        },

        _instance: null,

        getInstance: function () {
            if (WindowEventManager._instance === null) {
                WindowEventManager._instance = new WindowEventManager._WindowEventManager();
            }
            return WindowEventManager._instance;
        },

        destroyInstance: function () {
            if (WindowEventManager._instance !== null) {
                WindowEventManager._instance.destroy();
                WindowEventManager._instance = null;
            }
        },

        // Private Constructor
        _WindowEventManager: WinJS.Class.define(function windowEventManager_ctor() {
            this._element = document.createElement("div");

            this._pointerUpBinding = this._onWindowPointerUp.bind(this);
            this._keyDownBinding = this._onWindowKeyDown.bind(this);
            this._resizeBinding = this._resize.bind(this);

            window.addEventListener("MSPointerUp", this._pointerUpBinding);
            window.addEventListener("keydown", this._keyDownBinding);
            window.addEventListener("resize", this._resizeBinding);
        },
        {
            // Private Fields

            _element: null,

            _pointerUpBinding: null,
            _keyDownBinding: null,

            // Private Functions

            _resize: function (event) {
                this._dispatchEvent(WindowEventManager.Events.WINDOW_RESIZE, event);
            },

            _dispatchEvent: function (type, originalEvent) {
                var event = document.createEvent("CustomEvent");
                event.initCustomEvent(type, false, false, { originalEvent: originalEvent });
                this._element.dispatchEvent(event);
            },

            _onWindowPointerUp: function (event) {
                switch (event.button) {
                    // Mouse back button
                    case 3:
                        if (WinJS.Navigation.canGoBack) {
                            WinJS.Navigation.back();
                            this._dispatchEvent(WindowEventManager.Events.MOUSE_BACK, event);
                        }
                        break;
                        // Mouse forward button
                    case 4:
                        if (WinJS.Navigation.canGoForward) {
                            WinJS.Navigation.forward();
                            this._dispatchEvent(WindowEventManager.Events.MOUSE_FORWARD, event);
                        }
                        break;
                }
            },

            _onWindowKeyDown: function (event) {
                switch (event.keyCode) {
                    case WinJS.Utilities.Key.pageUp:
                        this._dispatchEvent(WindowEventManager.Events.PAGEUP, event);
                        break;
                    case WinJS.Utilities.Key.pageDown:
                        this._dispatchEvent(WindowEventManager.Events.PAGEDOWN, event);
                        break;
                    case WinJS.Utilities.Key.browserBack:
                        if (event.target.isContentEditable !== true) {
                            this._onShortcutKeyBack(event);
                        }
                        break;
                    case WinJS.Utilities.Key.leftArrow:
                        if (event.altKey) {
                            this._onShortcutKeyBack(event);
                        }
                        else {
                            this._dispatchEvent(WindowEventManager.Events.CURSORKEY, event);
                        }
                        break;
                    case WinJS.Utilities.Key.rightArrow:
                        if (!event.altKey) {
                            this._dispatchEvent(WindowEventManager.Events.CURSORKEY, event);
                        }
                        break;
                    case WinJS.Utilities.Key.upArrow:
                    case WinJS.Utilities.Key.downArrow:
                        this._dispatchEvent(WindowEventManager.Events.CURSORKEY, event);
                        break;
                    case WinJS.Utilities.Key.tab:
                        this._dispatchEvent(WindowEventManager.Events.TAB, event);
                        break;
                    default:
                        break;
                }
            },

            _onShortcutKeyBack: function (event) {
                if (WinJS.Navigation.canGoBack) {
                    WinJS.Navigation.back();
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            },

            // Public Methods

            addListener: function (type, callback) {
                this._element.addEventListener(type, callback);
            },

            removeListener: function (type, callback) {
                this._element.removeEventListener(type, callback);
            },

            destroy: function () {
                window.removeEventListener("MSPointerUp", this._pointerUpBinding);
                window.removeEventListener("keydown", this._keyDownBinding);
            }
        })
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

var DISABLE_ANIMATION = true;

(function appexPlatformControlsSquareButtonContainerInit() {
    "use strict";

    /// <summary>
    /// Button container that contains v2 buttons and an more button
    /// </summary>
    var NS = WinJS.Namespace.define("BingApps.UI", {
        SquareButtonContainer: WinJS.Class.define(function squareButtonContainer_ctor(element, options) {
            /// <summary>
            /// constructor
            /// </summary>
            /// <param name="element">
            /// The DOM element
            /// </param>
            /// <param name="options">
            /// Options structure
            /// </param>
            this.element = element || document.createElement("div");
            WinJS.Utilities.addClass(this.element, "platformChannelBar");

            if (options && options.id) {
                BingApps.Utilities.setAutomationId(this.element, null, null, "platformChannelBar_" + options.id);
            }
            else {
                BingApps.Utilities.setAutomationId(this.element);
            }
          
            this.element.winControl = this;
            WinJS.UI.setOptions(this, options);

            this._init();
        },
          {
              element: null,
              _buttons: null,
              _maxWidth: 0,
              _maxHeight: 0,
              _scrollLeft: 0,
              _scrollTop: 0,
              _fullWidth: true,
              _title: null,
              _wideScrollMode: true,
              _map: {},
              _total: 0,
              _channelIdToSubGroupMap: {},
              mode: {
                  get: function () {
                      return this._mode;
                  },
                  set: function (mode) {
                      this._mode = mode;
                  }
              },

              wideScrollMode: {
                  set: function (value) {
                      this._wideScrollMode = value;
                  },
                  get: function () {
                      return this._wideScrollMode;
                  }
              },
              title: {
                  set: function (value) {
                      this._title = value;
                  },
                  get: function () {
                      return this._title;
                  }
              },
              activeGroupId: {
                  set: function (value) {
                      this._activeGroupId = value;
                  },
                  get: function () {
                      return this._activeGroupId;
                  }
              },

              // map to remember already rendered channel button groups.
              channelButtonGroups: {},

              pageCountArray: {},
              active: {
                  get: function () {
                      var button = this.element.querySelector(".platformChannelButtonDiv.currentActive");
                      return button ? button.winControl : null;
                  }
              },
              fullWidth: {
                  set: function (v) {
                      this._fullWidth = v;
                      if (!v) {
                          WinJS.Utilities.addClass(this.element, "showLV");
                      }
                      else {
                          WinJS.Utilities.removeClass(this.element, "showLV");
                      }
                  },
                  get: function () {
                      return this._fullWidth;
                  }
              },

              hidden: {
                  get: function () {
                      return WinJS.Utilities.hasClass(this.element, "platformHidden");
                  },
                  set: function (v) {
                      if (v) {
                          WinJS.Utilities.addClass(this.element, "platformHidden");
                      }
                      else {
                          WinJS.Utilities.removeClass(this.element, "platformHidden");
                      }
                  }
              },

              isEmpty: {
                  get: function () {
                      return this._isEmpty;
                  },
                  set: function (contentEmpty) {
                      this._isEmpty = contentEmpty;
                  }
              },
              disabled: {
                  get: function () {
                      var button = this.element.querySelector(".platformChannelButtonDiv.disabled");
                      return button ? button.winControl : null;
                  }
              },

              updateTitleText: function () {
                  var that = this;
                  if (that.titleResource) {
                      var titleButton = that.element.querySelector("button.platformChannelBarTitleButton");
                      var titleLabel = that.element.querySelector(".platformChannelBarTitleLabel");
                      
                      var titleText = WinJS.Resources.getString(that.titleResource).value;
                      if (titleText) {
                          titleButton.innerText = titleText;
                          titleLabel.innerText = titleText;
                      }
                  }
              },

              _init: function () {
                  var title = this.titleContainer = document.createElement("div");
                  WinJS.Utilities.addClass(title, "platformChannelBarTitle win-focus-hide");
                  title.setAttribute("tabIndex", -1);

                  var label = document.createElement("div");
                  WinJS.Utilities.addClass(label, "platformChannelBarTitleLabel win-focus-hide");
                  title.appendChild(label);

                  var titleButton = document.createElement("button");
                  WinJS.Utilities.addClass(titleButton, "platformChannelBarTitleButton win-focus-hide");
                  title.appendChild(titleButton);
                  titleButton.setAttribute("tabIndex", 0);

                  if (this.title) {
                      label.innerText = this.title;
                      titleButton.innerText = this.title;
                  }

                  var peak = document.createElement("div");
                  WinJS.Utilities.addClass(peak, "platformChannelBarPeak");
                  this.peak = peak;

                  var paging = this.pageContainer = document.createElement("div");
                  WinJS.Utilities.addClass(paging, "platformChannelBarPaging");


                  var left = this.leftArrowContainer = document.createElement("div");
                  WinJS.Utilities.addClass(left, "platformChannelBarArrowContainer platformChannelBarLeft");

                  var right = this.rightArrowContainer = document.createElement("div");
                  WinJS.Utilities.addClass(right, "platformChannelBarArrowContainer platformChannelBarRight");

                  this._updatePagingArrow(1);

                  var buttonGroupContainer = this.buttonContainer = document.createElement("div");
                  WinJS.Utilities.addClass(buttonGroupContainer, "platformChannelGroups");

                  this.element.appendChild(title);
                  this.element.appendChild(peak);
                  this.element.appendChild(paging);
                  this.element.appendChild(left);
                  this.element.appendChild(right);
                  this.element.appendChild(buttonGroupContainer);

                  buttonGroupContainer.addEventListener("scroll", this._onScroll.bind(this));
              },
              channelIdToSubGroupMap: {
                  get: function () {
                      return this._channelIdToSubGroupMap;
                  },    
                  set: function (v) {
                      this._channelIdToSubGroupMap = v;
                  }
              },
              /// <field>
              /// Buttons command list to populate the container with
              /// </field>
              commands: {
                  set: function (value) {
                      msWriteProfilerMark("BingApps:ButtonContainer:commands:s");
                      BingApps.UI.StandardPresentationMode = "standard";
                      BingApps.UI.SnappedPresentationMode = "snapped";

                      var currentLayoutState = Windows.UI.ViewManagement.ApplicationView.value; 
                      this.mode = currentLayoutState !== 2 ? BingApps.UI.StandardPresentationMode : BingApps.UI.SnappedPresentationMode;

                      this._buttons = value;
                      this.channelButtonGroups = {};
                      this.pageCountArray = {};

                      var i = 0,
                          j = 0,
                          button = null,
                          buttonWidth = 0,
                          currentWidth = 0,
                          that = this,
                          onclick;

                      var groupContainer = that.buttonContainer;
                      // clear container, remove all buttons event listener before redraw
                      that.dispose();
                      that.buildChannelIdToDataMap(value);

                      // Reset the container
                      groupContainer.innerHTML = "";
                      if (this._buttons.length > 0 && this._buttons[0] && this._buttons[0].length > 0) {
                          this.selectGroup(this._buttons[0][0].parentId, true); // default is the first group
                          this.isEmpty = false;
                      }
                      
                      msWriteProfilerMark("BingApps:ButtonContainer:commands:e");
                  }
              },

              // remove all contents
              clearChannelBar: function () {
                  this.hidden = true;
                  this._buttons = null;
                  this._total = 0;
                  this.isEmpty = true;
                  this.pageControl = null;
                  this.channelButtonGroups = {};
                  this.pageCountArray = {};
                  this.buttonContainer.innerHTML = "";
                  this.pageContainer.innerHTML = "";
                  this.leftArrowContainer.innerHTML = "";
                  this.rightArrowContainer.innerHTML = "";
              },
              // return button data and how many buttons in this group
              containerOf: function (channelId) {
                  return channelId ? this._map[channelId] : null;
              },

              // flatten button structure
              buildChannelIdToDataMap: function( value) {
                  var total = 0,
                      map = {},
                      button = null, 
                      buttonGroup = null,
                      groupIndex = 0,
                      channelIndex = 0,
                      channelCount = 0,
                      groupCount = this._buttons ? this._buttons.length : 0;

                  for (groupIndex = 0; groupIndex < groupCount; groupIndex++) {
                      buttonGroup = this._buttons[groupIndex];
                      channelCount = buttonGroup ? buttonGroup.length : 0;
                      for (channelIndex = 0; channelIndex < channelCount; channelIndex++) {
                          button = buttonGroup[channelIndex];
                          if (button) {
                              total++;
                              // channelId -> { buttonData, groupChannelCount }
                              map[button.channelId] = { button: button, count: channelCount };
                          }
                      }
                  }

                  this._total = total;
                  this._map = map;
              },

              dispose: function () {
                  var that = this;
                  var buttons = that.buttonContainer.querySelectorAll(".platformChannelButtonDiv");
                  var length = buttons.length;
                  var button = null;
                  for (var i = 0; i < length; i++) {
                      button = buttons[i].winControl;
                      button.dispose();
                  }
              },
             
              // if groupid invalid, then render first group
              _renderOnDemand: function (groupId) {
                  var buttons = groupId ? this.channelIdToSubGroupMap[groupId] : null;
                  buttons = buttons || this._buttons[0];
                  var buttonGroupContainer = this._renderButtonGroup(buttons);

                  if (buttonGroupContainer) {
                      // insert group in dom tree.
                      var groupContainer = this.buttonContainer;
                      groupContainer.appendChild(buttonGroupContainer);
                  }

                  var mainButton = buttonGroupContainer.querySelector('[id=\"' + groupId + '\"]');
                  var location = WinJS.Navigation.location;
                  var channelId = location; 
                  if (mainButton && groupId === channelId) {
                      mainButton.winControl.disabled = true;
                  }
                  return buttonGroupContainer;
              },

              selectGroup: function (channelId, force) {
                  var layoutStale = false;
                  var current = null;
                  if (this.currentGroup) {
                      if (channelId !== this.activeGroupId) {
                          WinJS.Utilities.removeClass(this.currentGroup, "show");
                          this.activeGroupId = null;
                      }
                      else {
                          current = this.currentGroup;
                      }
                  }
                  if (force) {
                      current = this._renderOnDemand(channelId);
                  }
                  else if (!current) {
                      current = this.channelButtonGroups[channelId];
                      if (!current) {
                          current = this._renderOnDemand(channelId);
                      }
                      else {
                          layoutStale = true;
                      }
                  }                

                  if (current) {
                      this.currentGroup = current;
                      WinJS.Utilities.addClass(current, "show");
                      this.activeGroupId = channelId;
                  }

                  // if button group is previously rendered, needs to recalculate page info.
                  if (layoutStale) {
                      if (this.mode !== BingApps.UI.SnappedPresentationMode) {
                          this._layoutStandard(channelId);
                      }
                  }
              },

              // page indicator and arrows
              renderPageBar: function (groupId) {
                  this.pageContainer.innerHTML = "";
                  this.leftArrowContainer.innerHTML = "";
                  this.rightArrowContainer.innerHTML = "";
                  var buttonContainer = this.buttonContainer;
                  var pageCount = groupId ? this.pageCountArray[groupId] : 1;
                  if (pageCount && pageCount > 1) {
                      // pageBar
                      this.pageControl = new BingApps.UI.PagingBar(null, { pageCount: pageCount });
                      this.pageContainer.appendChild(this.pageControl.element);

                      //left arrow
                      var left = this.leftArrowContainer;
                      var leftButton = document.createElement("button");
                      
                      left.appendChild(leftButton);

                      BingApps.Utilities.setAutomationId(leftButton, left.parentElement, "left");
                      leftButton.setAttribute("aria-label", WinJS.Resources.getString("/platform/scrollLeftAriaLabel").value);
                      leftButton.addEventListener("click", this._onClickLeft.bind(this));

                      //right arrow
                      var right = this.rightArrowContainer;
                      var rightButton = document.createElement("button");
                      
                      right.appendChild(rightButton);
                      BingApps.Utilities.setAutomationId(rightButton, right.parentElement, "right");
                      rightButton.addEventListener("click", this._onClickRight.bind(this));
                      rightButton.setAttribute("aria-label", WinJS.Resources.getString("/platform/scrollRightAriaLabel").value);

                      this._updatePagingArrow(1);
                  }
                  else {
                      this.pageControl = null;
                  }
                  if (pageCount && pageCount > 1) {
                      if (this.mode !== BingApps.UI.SnappedPresentationMode) {
                          buttonContainer.style.overflowX = "auto";
                          buttonContainer.style.overflowY = "hidden";
                      }
                      else {
                          buttonContainer.style.overflowX = "hidden";
                          buttonContainer.style.overflowY = "auto";
                      }
                  }
                  else {
                      buttonContainer.style.overflowX = "hidden";
                      buttonContainer.style.overflowY = "hidden";
                  }
              },

              _onScroll: function (evt) {
                  if (!this.pageControl) {
                      return;
                  }

                  var newPage;
                  if (this.mode !== BingApps.UI.SnappedPresentationMode) {
                      var scrollLeft = this.buttonContainer.scrollLeft;

                      var deltaHoriz = scrollLeft - this._scrollLeft;
                      var currentPage = this.pageControl.pageNo;
                      if (deltaHoriz !== 0) {
                          this._scrollLeft = scrollLeft;

                          newPage = Math.ceil(this._scrollLeft / this._pageWidth) + 1;
                          if (newPage !== this.pageControl.pageNo) {
                              this._goto(newPage, true);
                          } else {                              
                              var subChannelsDiv = document.querySelector(".platformChannelBar.subChannels");
                              if (subChannelsDiv && !WinJS.Utilities.hasClass(subChannelsDiv, "platformHidden")) {
                                  this._updateSubChannels(subChannelsDiv);
                              }
                              
                          }
                      }
                  }
                  else {
                      var scrollTop = this.buttonContainer.scrollTop;
                      var deltaVert = scrollTop - this._scrollTop;
                      if (deltaVert !== 0) {
                          this._scrollTop = scrollTop;
                          newPage = Math.ceil(this._scrollTop / this._pageHeight) + 1;
                          if (newPage !== currentPage) {
                              this.pageControl.goto(newPage);
                              this._updatePagingArrow(this.pageControl.pageNo);
                          }
                      }
                  }
              },

              _updateSubChannels: function (subChannelsDiv) {
                  var subChannels = subChannelsDiv.winControl;

                  var isViewing = false;
                  var viewingDiv = document.querySelector(".platformChannelBar.viewing");
                  if (viewingDiv && !WinJS.Utilities.hasClass(viewingDiv, "platformHidden")) {
                      var viewing = viewingDiv.winControl;
                      if (viewing._activeGroupId === subChannels._activeGroupId) {
                          isViewing = true;
                      }
                  }

                  if (!isViewing) {
                      var buttonL1 = document.getElementById(subChannels._activeGroupId);
                      if (buttonL1) {
                          var buttonControl = buttonL1.winControl;
                          if (subChannelsDiv.parentNode && subChannelsDiv.parentNode.winControl.positionPeak) {
                              subChannelsDiv.parentNode.winControl.positionPeak(buttonControl);
                          }
                      }
                  }
              },

              updatePaging: function () {
                  if (this.pageControl) {
                      var pageNo = this.pageControl.pageNo;
                      this._scrollTo(pageNo);
                  }
              },

              _scrollTo : function (pageNo) {
                  if (this.mode !== BingApps.UI.SnappedPresentationMode) {
                      this.buttonContainer.scrollLeft = (pageNo - 1) * (this._pageWidth);
                      this._scrollLeft = this.buttonContainer.scrollLeft;
                  }
                  else {
                      this.buttonContainer.scrollTop = (pageNo - 1) * (this._pageHeight);
                      this._scrollTop = this.buttonContainer.scrollTop;
                  }
              },
              _goto: function (newPage, autoPosition) {
                  this.pageControl.goto(newPage);
                  var newPageNo = this.pageControl.pageNo;
                  if (!autoPosition) {
                      this._scrollTo(newPageNo);
                  }
                 
                  var subChannelsDiv = document.querySelector(".platformChannelBar.subChannels");
                  if (subChannelsDiv && !WinJS.Utilities.hasClass(subChannelsDiv, "platformHidden")) {
                      this._updateSubChannels(subChannelsDiv);
                  }
                  this._updatePagingArrow(newPageNo);
              },
              _updatePagingArrow: function (newPageNo) {
                  if (newPageNo === 1) {
                      WinJS.Utilities.addClass(this.leftArrowContainer, "platformInvisible");
                  }
                  else {
                      WinJS.Utilities.removeClass(this.leftArrowContainer, "platformInvisible");
                  }
                  var pageCount = this.pageControl ? this.pageControl.pageCount : 1;
                  if (newPageNo === pageCount) {
                      WinJS.Utilities.addClass(this.rightArrowContainer, "platformInvisible");
                  }
                  else {
                      WinJS.Utilities.removeClass(this.rightArrowContainer, "platformInvisible");
                  }
              },
              _onClickLeft: function (evt) {
                  var newPage = this.pageControl.pageNo;
                  this._goto(newPage - 1);
              },
              _onClickRight: function (evt) {
                  var newPage = this.pageControl.pageNo;
                  this._goto(newPage + 1);
              },

              // factor out layout part.
              // create button first, and then do layout.
              // if no data change, only size change, can just call layout to update position
              _renderButtonGroup: function (buttons) {
                  var i = 0,
                      button = null,
                      buttonData = null,
                      that = this;
                  var length = buttons.length;
                  if (length === 0) {
                      return null;
                  }

                  var element = this.element;
                  buttonData = buttons[0];
                  if (!buttonData) {
                      console.log("button contains invalid data");
                      return null;
                  }
                  var container = document.createElement("div");
                  var containerId = buttonData.parentId;
                  container.setAttribute("parentId", containerId);

                  WinJS.Utilities.addClass(container, "platformChannelBarButtonGroup");
                  container.id = "platformChannelBarButtonGroup_" + containerId;
                  //container.setAttribute("tabIndex", 0);
                  container.setAttribute("aria-controls", containerId);
                  this.channelButtonGroups[containerId] = container;

                  for (i = 0; i < length; i++) {
                      buttonData = buttons[i];
                      if (!buttonData) {
                          continue;
                      }
                      button = new BingApps.UI.SquareButton(BingApps.Utilities.createElement("div", element, "button" + i, buttonData.channelId), buttonData);
                      container.appendChild(button.element);
                  }

                  if (this.mode !== BingApps.UI.SnappedPresentationMode) {
                      this._layoutStandard(containerId);
                  }

                  return container;
              },

              _calculateButtonGap: function (pageWidth, buttonWidth, itemPerRow) {
                  var gap = Math.floor((pageWidth - (itemPerRow * buttonWidth)) / (itemPerRow - 1));
                  if (gap < 6) {
                      itemPerRow -= 1;
                      gap = Math.floor((pageWidth - (itemPerRow * buttonWidth)) / (itemPerRow - 1));
                  }

                  return gap;
              },
              // What this function does:
              // 1. set scroll container width = pageCount & pageWidth
              // 2. position each button to the right grid column
              // 3. add last big div to fill out the last page.
              // 4. update snap interval to the exact value.
              // values calcuated:
              // itemPerRow, pageCount, gap, acuratePageWidth

              // if full page, use pageAreaWidth, 
              // otherwise, Viewing Item is shown, itemPerRow -= 1 
              _layoutStandard: function (containerId) {
                  var that = this;
                  var i,
                      element = this.element;
                  var container = this.channelButtonGroups[containerId];
                  // only do layout when button is already rendered
                  if (!container ) {
                      return;
                  }
                  
                  // use page area width always. Sometime ChannelBar is hidden and width is unpredictable.
                  var maxWidth = window.innerWidth - 40;
                  var pageWidth = this._pageWidth = this._maxWidth = maxWidth;
                  var buttonWidth = 158;

                  var itemPerRow = this._itemPerRow = Math.max(Math.floor(pageWidth / buttonWidth), 1);

                  var gap = that._calculateButtonGap(pageWidth, buttonWidth, itemPerRow);

                  if (!this.fullWidth) {
                      itemPerRow -= 1;
                  }
                  this._itemPerRow = itemPerRow;
                  // set page width to exact value after gap estination: will be smaller
                  pageWidth = this._pageWidth = (buttonWidth + gap) * itemPerRow;

                  var columnNum = 1;
                  var buttons = container.querySelectorAll(".platformChannelButtonDiv");
                  var length = buttons.length;
                  var totalSingleButtonSpace = length;
                  var button = null;
                  for (i = 0; i < length; i++) {
                      button = buttons[i].winControl;

                      button.element.style.msGridColumn = columnNum++;
                      var rtl = (document.dir === "rtl");
                      if (!rtl) {
                          button.element.style.marginRight = (gap + "px");
                          button.element.style.marginLeft = ("0px");
                      }
                      else {
                          button.element.style.marginLeft = (gap + "px");
                          button.element.style.marginRight = ("0px");
                      }

                      var buttonType = BingApps.UI.NavigationBar.ButtonContainerType;
                      if (button.buttonContainerType === buttonType.LV) {
                          button.setImage(BingApps.UI.SquareButton.ImageType.HOIST);
                      }
                  }
                  var pageCount = Math.ceil(totalSingleButtonSpace / itemPerRow);

                  container.setAttribute("pageCount", pageCount);
                  that.pageCountArray[containerId] = pageCount;

                  this.columnNum = columnNum - 1;

                  var msGridColumns = "(auto)[" + this.columnNum + "]";
                  if (this.wideScrollMode) {
                      container.style.width = pageCount * pageWidth + "px";
                      that.buttonContainer.style.msScrollSnapPointsX = "snapInterval(0px," + pageWidth + "px)";

                      var placeHolderDiv = container.querySelector(".platformChannelSpaceHolder") || document.createElement("div");
                      WinJS.Utilities.addClass(placeHolderDiv, "platformChannelSpaceHolder");
                      msGridColumns += "1fr";
                  }
                  container.style.msGridRows = "1fr";
                  container.style.msGridColumns = msGridColumns;
                  that.buttonContainer.scrollLeft = 0;
                  that._scrollLeft = this.buttonContainer.scrollLeft;
                  
                  this.renderPageBar(containerId);
              },

              getFirstVisibleButton: function () {
                  var firstVisibleIndex = 0;
                  var button = null;
                  if (this.pageControl && this._itemPerRow) {
                      var pageNo = this.pageControl.pageNo;
                      firstVisibleIndex = (pageNo - 1) * this._itemPerRow;
                  }
                  var buttons = this.buttonContainer.querySelectorAll(".platformChannelButton");
                  var length = buttons.length;
                  if (length && length > firstVisibleIndex) {
                      button = buttons[firstVisibleIndex];
                  }
                  return button;
              },
              // when width changed, caculate page width and button space and pageBar
              updateContainerLayout: function () {
                  var groupId = this.activeGroupId;

                  this.selectGroup(groupId);
                  if (this.mode !== BingApps.UI.SnappedPresentationMode) {
                      this._layoutStandard(groupId);
                  }

              },

              //when hoisting a channel and hide that button in featured bar,
              //the page count may be changed (e.g. initially 5 buttons in 2 pages, 
              //after hoisting, only 4 buttons left in 1 page) and we need update the paging bar
              updatePageBar: function (groupId, pageCount) {
                  if (!this.pageControl || pageCount === this.pageControl._pageCount) {
                      return;
                  }

                  var pageNo = this.pageControl.pageNo;
                  var newPageNo = pageNo > pageCount ? pageCount : pageNo;

                  if (pageCount && pageCount > 1) {
                      //if there are at least 2 pages both now and before,
                      //i.e. pagination is already there, just update the pagebar
                      if (this.pageContainer.innerHTML !== "") {
                          this.pageContainer.innerHTML = "";
                          this.pageControl = new BingApps.UI.PagingBar(null, { pageCount: pageCount });
                          this.pageContainer.appendChild(this.pageControl.element);
                          
                          this.channelButtonGroups[groupId].style.width = pageCount * this._pageWidth + "px";

                          if (pageNo > pageCount) {
                              this._goto(newPageNo, false);
                          } else {
                              this.pageControl.goto(newPageNo);
                          }
                          this._updatePagingArrow(newPageNo);
                      } else {
                          //if before there is only 1 page and no pagination,
                          //render a new pageBar
                          this.renderPageBar(groupId);
                      }
                  } else {
                      //if 2 pages shrink to 1 page, hide pagination.
                      pageNo = this.pageControl.pageNo;
                      if (pageNo > pageCount) {
                          this._goto(1, false);
                      } 
                      this.pageControl.pageCount = this.pageControl.pageNo = 1;
                      this.pageContainer.innerHTML = "";
                      this.leftArrowContainer.innerHTML = "";
                      this.rightArrowContainer.innerHTML = "";
                      this.buttonContainer.style.overflowX = "hidden";
                      this.buttonContainer.style.overflowY = "hidden";
                  }
              },

              // if button group is empty or the this group has only one button and is hoisted, hide the bar
              updateVisibility: function (channelIdToHoist) {
                  // nothing to show, hide the bar
                  if (this._total === 0) {
                      this.hidden = true;
                      this.isEmpty = true;
                      return;
                  }

                  // clear old hidden button
                  this.hidden = false;
                  // Show/Hide hoisted LF channel
                  selector = ".platformChannelButtonDiv.platformHidden";
                  button = this.element.querySelector(selector);
                  buttonControl = button ? button.winControl : null;
                  if (buttonControl) {
                      buttonControl.hidden = false;
                      // put button back.
                      this.isEmpty = false;
                  }

                  // find new button to hide
                  var buttonMap = this.containerOf(channelIdToHoist);
                  var selector,
                      button,
                      buttonControl;
                  if (buttonMap) {
                      selector = '.platformChannelButtonDiv[id="' + channelIdToHoist + '"]';
                      button = this.element.querySelector(selector);
                      buttonControl = button ? button.winControl : null;
                      if (buttonControl) {
                          buttonControl.hidden = true;
                          if (buttonMap.count === 1) {
                              //Featured channel has only one button, hoist it and hide the bar.
                              this.isEmpty = true;
                              this.hidden = true;
                          }
                          else {
                              this.hidden = false;
                              this.isEmpty = false;
                              //Featured channel has more than one button, hoist one button and update the bar.
                              this.updatePageBar(this._activeGroupId, Math.ceil((buttonMap.count - 1) / this._itemPerRow));
                          }
                      }
                  } else {
                        //No button to hoist, update featured bar with all buttons
                        this.updatePageBar(this._activeGroupId, Math.ceil(this._total / this._itemPerRow));
                  }
              }
          })
    });

    WinJS.Class.mix(BingApps.UI.SquareButtonContainer,
        WinJS.UI.DOMEventMixin,
        WinJS.Utilities.createEventProperties("pageUpdated")
    );

})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function appexPlatformNavigationBarInit() {
    "use strict";

    var NS = WinJS.Namespace.define("BingApps.UI", {
        NavigationBar: WinJS.Class.define(function navigationBar_ctor(element, options) {
            /// <signature helpKeyword="BingApps.UI.NavigationBar">
            /// <summary>
            /// Creates a new Navigation Bar.
            /// This is a custom extension of the WinJS.UI.AppBar- where 
            /// each command represents a navigation within the app.
            /// </summary>
            /// <param name="element" domElement="true">
            /// The DOM element that hosts the NavigationBar control.
            /// </param>
            /// <param name="options" type="Object">
            /// An object that contains one or more property/value pairs to apply to the new control.
            /// Each property of the options object corresponds to one of the control's properties or events.
            /// </param>
            /// <returns type="BingApps.UI.NavigationBar">
            /// The new NavigationBar.
            /// </returns>
            /// </signature>

            var that = this;
            this._element = element ? element : document.createElement("div");
            this._element.winControl = this;

            WinJS.Utilities.addClass(this._element, "platformNavigationBar");
            window.addEventListener("resize", this._onLayoutUpdated.bind(this));

            var title = "";
            if (options &&
                options.title) {
                var res = WinJS.Resources.getString(options.title);
                title = res.empty ? options.title : res.value;
            }

            var channelBar = this.channelBar = new BingApps.UI.NavBarContainer(null,
                {
                    title: title,
                    id: "channels"
                });

            channelBar.addEventListener("pageUpdated", function navBarContainer_pageUpdated(event) {
                that.expandedActive = null;
            });

            var subChannelBar = this._subChannelBar = new BingApps.UI.NavBarContainer(null, { id: "subChannels" });
            WinJS.Utilities.addClass(subChannelBar.element, "subChannels");
            subChannelBar.hidden = true;

            var element = this._element;
            element.appendChild(channelBar.element);
            element.appendChild(subChannelBar.element);

            if (element &&
                element.parentElement &&
                element.parentElement.winControl) {
                this._parentAppBarControl = element.parentElement.winControl;
            }

            WinJS.UI.setOptions(this, options);
            this._setupListeners();
        },
        {
            _element: null,

            // remember the expanded channel so we can expand it the next time it's loaded
            _expandedActive: null,

            _parentAppBarControl: null,

            _subChannelBar: null,
            _subChannelButtons: null,

            /// <field type="HTMLElement" domElement="true">
            /// Gets the DOM element that hosts the Navigation Bar
            /// </field>
            element: {
                get: function () {
                    return this._element;
                }
            },

            /// <field>
            /// List of channels
            /// </field>
            channels: {
                get: function () {
                    return this.buttons;
                },

                set: function (value) {
                    if (this.animating) {
                        this.animating.cancel();
                        this.animating = null; //reset if channel updated
                    }
                    var buttons = this._buildCommands(value, buttonType.L1);
                    if (buttons && buttons.length > 0) {
                        this.channelBar.commands = buttons;
                    }
                    this.buttons = buttons;

                    this.subChannels = { L1: value };
                }
            },

            /// <field>
            /// List of subChannels
            /// </field>
            subChannels: {
                get: function () {
                    return this._subChannelButtons;
                },

                set: function (value) {
                    var channelIdToSubGroupMap = {};

                    this._subChannelButtons = this._buildSubLevelCommands(value.L1, channelIdToSubGroupMap, buttonType.L1);

                    if (this._subChannelButtons && this._subChannelButtons.length > 0) {
                        this._subChannelBar.channelIdToSubGroupMap = channelIdToSubGroupMap;
                        this._subChannelBar.commands = this._subChannelButtons;
                    }
                    else {
                        this._subChannelBar.clearChannelBar();
                    }
                }
            },

            /// <field type="BingApps.UI.SquareButton" domElement="true">
            /// Captures which button is currently expanded if any
            /// </field>
            expandedChannel: {
                get: function () {
                    return this._expandedChannel;
                },
                set: function (buttonControl) {
                    var old = this._expandedChannel;
                    if (old) {
                        old.expanded = false;
                    }
                    this._expandedChannel = buttonControl;
                    if (buttonControl) {
                        buttonControl.expanded = true;
                    }
                }
            },

            _setupListeners: function () {
                /// <summary>
                /// Sets up various listeners for accessibility focus/navigation etc.
                /// </summary>
                /// <returns>
                /// Nothing
                /// </returns>

                var that = this;
                var parentAppBarControl = null;

                if (that.element &&
                    that.element.parentElement &&
                    that.element.parentElement.winControl) {
                    // we assume that the NavBar is hosted inside an app bar.
                    // without it all the handlers here will not get registered
                    // and keyboard accessibility may be broken.
                    parentAppBarControl = that.element.parentElement.winControl;
                }

                var beforeShow = function () {
                    that.handleTabKeyPress(true);
                    that.renderChannelBar();
                };
                var beforeHide = function () {
                    that.handleTabKeyPress(false);
                };

                // Ensure any bottom app bar does not steal focus from top NavBar.
                var activeChannel;
                var afterShow = function () {
                    activeChannel = that.initialFocus();

                    if (activeChannel) {
                        activeChannel.focus();
                        activeChannel.addEventListener("blur", onBlur);
                        parentAppBarControl.addEventListener("keydown", dismissActiveChannel);
                        parentAppBarControl.addEventListener("MSPointerDown", dismissActiveChannel);
                    }
                };

                var onBlur = function (event) {
                    parentAppBarControl.removeEventListener("keydown", dismissActiveChannel);
                    parentAppBarControl.removeEventListener("MSPointerDown", dismissActiveChannel);
                    if (activeChannel) {
                        activeChannel.removeEventListener("blur", onBlur);
                        activeChannel.focus();
                    }
                };

                var dismissActiveChannel = function (event) {
                    parentAppBarControl.removeEventListener("keydown", dismissActiveChannel);
                    parentAppBarControl.removeEventListener("MSPointerDown", dismissActiveChannel);

                    if (activeChannel) {
                        activeChannel.removeEventListener("blur", onBlur);
                    }
                };

                if (parentAppBarControl) {
                    parentAppBarControl.addEventListener("beforeshow", beforeShow);
                    parentAppBarControl.addEventListener("beforehide", beforeHide);
                    parentAppBarControl.addEventListener("aftershow", afterShow);
                }
            },

            _buildCommands: function (channels, buttonContainerType) {
                if (!channels) {
                    return [];
                }

                var buttons = [],
                    i = 0,
                    channelCount = channels.length;

                for (i = 0; i < channelCount; i++) {
                    var channel = channels[i];
                    buttons.push(this._createNavBarButton(channel, channel.id, buttonContainerType));
                }

                // Disable the top edgy when there are no visible channels
                var edgy = this._parentAppBarControl;
                if (edgy) {
                    edgy.disabled = channelCount === 0;
                }

                return [buttons];
            },

            _buildSubLevelCommands: function (channels, channelIdToSubGroupMap, buttonContainerType) {
                if (!channels) {
                    return [];
                }

                var buttons = [],
                    i = 0,
                    channelCount = channels.length;

                for (i = 0; i < channelCount; i++) {
                    var channel = channels[i];
                    var buttonGroup = this._buildSubChannel(channel, buttonContainerType);
                    if (buttonGroup.length > 0) {
                        channelIdToSubGroupMap[channel.id] = buttonGroup;

                        buttons.push(buttonGroup);
                        var nextLevel = this._buildSubLevelCommands(channel.subChannels, channelIdToSubGroupMap, buttonType.L2);
                        if (nextLevel.length > 0) {
                            buttons = buttons.concat(nextLevel);
                        }
                    }
                }
                return buttons;
            },

            // add sub channel to a group
            _buildSubChannel: function (channel, buttonContainerType) {

                var buttons = [];
                var subChannels = channel.subChannels;

                if (!subChannels) {
                    return buttons;
                }

                var i = 0;
                var len = subChannels.length;
                for (i = 0; i < len; i++) {
                    var subChannel = subChannels[i];
                    buttons.push(this._createNavBarButton(subChannel, channel.id, buttonType.L2, i, buttons.length + 1));
                }

                return buttons;
            },

            initialFocus: function () {
                var that = this;
                var activeChannel = that.channelBar.getFirstVisibleButton();
                return activeChannel;
            },

            _tabKeypress: function (event) {
                if (event.keyCode === WinJS.Utilities.Key.tab) {
                    WinJS.Utilities.addClass(this._element, "tab");
                    this._element.removeEventListener("keydown", this._tabKeypressHandler, true);
                }
            },
            handleTabKeyPress: function (add) {
                var tabKeypressHandler = this._tabKeypressHandler = this._tabKeypress.bind(this);
                if (add) {
                    this._element.addEventListener("keydown", tabKeypressHandler, true);
                }
                else {
                    WinJS.Utilities.removeClass(this._element, "tab");
                    this._element.removeEventListener("keydown", tabKeypressHandler, true);
                }
            },

            renderChannelBar: function () {
                var that = this;

                if (this.animating) {
                    this.animating.cancel();
                    this.animating = null;
                }

                that._updatePaging();
                that._updateL2();
            },

            // update layout when state changed.
            _onLayoutUpdated: function () {
                this.expandedActive = null;
                this._hideL2(false);

                var currentLayoutState = Windows.UI.ViewManagement.ApplicationView.value;
                var mode = currentLayoutState !== 2 ? BingApps.UI.StandardPresentationMode : BingApps.UI.SnappedPresentationMode;

                if (mode !== BingApps.UI.SnappedPresentationMode) {
                    WinJS.Utilities.removeClass(this.element, "platformHidden");
                } else {
                    WinJS.Utilities.addClass(this.element, "platformHidden");
                }
                
                

            },

            // L2 drawer open condition
            _updateL2: function () {
                var currentChannel = WinJS.Navigation.location;
                var channelData = this._subChannelBar.containerOf(currentChannel);
                if (channelData) {
                    currentChannel = channelData.button.parentId;
                }

                if (currentChannel === this._expandedActive) {
                    var selector = '[id=\"' + currentChannel + '\"]';
                    var expandedButton = this.channelBar.element.querySelector(selector);
                    var expandedChannel = expandedButton ? expandedButton.winControl : null;
                    if (expandedChannel && expandedChannel.hasSubChannels) {
                        this._showL2(expandedChannel, false);
                    }
                    else {
                        this._expandedActive = null;
                        this._hideL2(false);
                    }
                }
                else {
                    this._hideL2(false);
                }
            },

            _updatePaging: function () {
                this.channelBar.updatePaging();
                this._subChannelBar.updatePaging();
            },

            // toggle L2 visibility and content
            _toggleL2: function (buttonControl) {
                var channelId = buttonControl.channelId;
                // close L2 if already opened
                if (!this._subChannelBar.hidden && this._subChannelBar.activeGroupId === channelId) {
                    this._hideL2(true);
                    this._expandedActive = null;
                }
                else {
                    this._showL2(buttonControl, true);
                    if (WinJS.Navigation.location === buttonControl.location ||
                        this._subChannelBar.activeGroupId === WinJS.Navigation.location) {
                        this._expandedActive = buttonControl.channelId;
                    }
                }
            },

            _hideL2: function (animate) {
                var that = this;
                if (!this._animating) {
                    this._animating = this._hideL2Animation(animate);
                    this._animating.done(function hideL2Animation_complete() {
                        if (that.expandedChannel) {
                            that.expandedChannel.expanded = false;
                        }
                        that.expandedChannel = null;
                        that._animating = null;
                    });
                }
            },

            _showL2: function (buttonControl, animate) {
                if (buttonControl) {
                    var that = this;
                    if (!this._animating) {
                        var channelId = buttonControl.channelId;
                        this._subChannelBar.selectGroup(channelId);
                        this.positionPeak(buttonControl);
                        this._animating = this._showL2Animation(animate);
                        this._animating.done(function showL2Animation_complete() {
                            that.expandedChannel = buttonControl;
                            buttonControl.expanded = true;
                            that._animating = null;
                        });
                    }
                }
            },

            _showL2Animation: function (animate) {
                var that = this;
                var l2 = this._subChannelBar.element;
                var animation;
                var l2Height = "99px";

                if (this._subChannelBar.hidden === true) {
                    l2.style.height = "0px";
                    this._subChannelBar.hidden = false;
                    this._subChannelBar.updatePaging();

                    if (animate) {
                        animation = WinJS.UI.executeTransition(
                                l2,
                                {
                                    property: "height",
                                    delay: 0,
                                    duration: 120,
                                    timing: "linear",
                                    to: l2Height
                                });
                    }
                    else {
                        l2.style.height = l2Height;
                        animation = WinJS.Promise.wrap(null);
                    }
                    return animation.then(function showL2EmptyFeatured_complete() {
                        WinJS.Utilities.addClass(that.channelBar.element, "showL2");

                        return WinJS.Promise.wrap(null);
                    }, function showL2EmptyFeaturedNoAnimate_complete() {
                        l2.style.height = l2Height;
                        WinJS.Utilities.addClass(that.channelBar.element, "showL2");
                        return WinJS.Promise.wrap(null);
                    });
                }
                return WinJS.Promise.wrap(null);
            },

            _hideL2Animation: function (animate) {
                var that = this;
                var l2 = this._subChannelBar.element;
                var animation;

                if (animate) {
                    animation = WinJS.UI.executeTransition(
                            l2,
                            {
                                property: "height",
                                delay: 0,
                                duration: 120,
                                timing: "linear",
                                to: "0px"
                            });

                } else {
                    l2.style.height = "0px";
                    animation = WinJS.Promise.wrap(null);
                }
                return animation.then(function hideL2_complete() {
                    that._subChannelBar.hidden = true;
                    WinJS.Utilities.removeClass(that.channelBar.element, "showL2");
                    return WinJS.Promise.wrap(null);
                });
            },

            _createNavBarButton: function (channel, parentId, buttonContainerType) {
                /// <summary>
                /// Creates a nav bar button
                /// </summary>
                /// <param name="channel">
                /// The channel data. Example:
                /// {
                ///     id: "Page0",
                ///     title: "Page0",
                ///     icon: "/TestApp/images/smalllogo.png",
                ///     uri: "/TestApp/html/page0.html"
                /// }
                /// </param>
                /// <returns>
                /// Nothing
                /// </returns>
                var that = this;
                var button = Object.create(channel);

                var title = channel.title ? WinJS.Resources.getString(channel.title).value : "";
                title = title || channel.title;

                button.title = title;
                button.icon = channel.icon;
                button.channelId = channel.id;
                button.location = channel.uri;
                button.isSubChannel = parentId !== button.channelId;
                button.hasSubChannels = channel.subChannels ? channel.subChannels.length > 0 : false;
                button.parentId = parentId;
                button.buttonContainerType = buttonContainerType ? buttonContainerType : buttonType.L1;
                button.onclick = function (elt) {
                    msWriteProfilerMark("BingApps:Navigation:NavBarClick:s");

                    var buttonElt = elt.currentTarget;
                    var buttonControl = buttonElt.winControl;

                    // toggle only
                    var clickTarget = elt.target;
                    if (clickTarget && WinJS.Utilities.hasClass(clickTarget, "platformChannelToggle")) {
                        that._toggleL2(buttonControl);
                    } else {

                        that.dispatchEvent("iteminvoked", {
                            item: Object.create(button),
                            instrumentationData: null
                        });

                        ///<disable>JS2031.UseStrictEqualityOperators</disable>
                        // Type coercion to ignore undefined/null differences.
                        var pageStateDiffers = WinJS.Navigation.state != channel.state;
                        ///<enable>JS2031.UseStrictEqualityOperators</enable>

                        // to navigate
                        if (WinJS.Navigation.location !== channel.uri ||
                            (WinJS.Navigation.location === channel.uri && pageStateDiffers)) {

                            switch (buttonControl.buttonContainerType) {
                                case buttonType.L2:
                                    that._expandedActive = buttonControl.parentId;
                                    break;

                                case buttonType.L1:
                                    that._expandedActive = buttonControl.channelId;
                                    break;

                                default:
                                    that._expandedActive = null;
                                    break;
                            }

                            WinJS.Navigation.navigate(channel.uri, channel.state);
                        } else {
                            BingApps.WindowEventManager.getInstance()._dispatchEvent("samePageNav", event);
                        }

                        BingApps.Utilities.dismissAllEdgies();
                    }
                    msWriteProfilerMark("BingApps:Navigation:NavBarClick:e");
                };

                return button;
            },

            /// <field>
            /// Set the position of peak for subChannels to point to the center of its parent button. 
            /// </field>
            positionPeak: function (buttonControl) {
                var middlePoint = 80 - 15; // buttonWidth - beakWidth/2
                var channelBarOffsetLeft = this.channelBar.element.getOffsetLeft();
                var channelBarWidth = this.channelBar.element.clientWidth;
                if (buttonControl.buttonContainerType === buttonType.L1) {
                    buttonControl = this.channelBar.element.querySelector('[id=\"' + buttonControl.channelId + '\"]');
                    middlePoint += buttonControl.getOffsetLeft();
                    middlePoint -= this.channelBar.buttonContainer.scrollLeft;
                    middlePoint += channelBarOffsetLeft;
                    buttonControl = buttonControl.winControl;
                }

                //if beak is moving out of the view, collapse L2
                if (middlePoint < channelBarOffsetLeft || middlePoint > channelBarOffsetLeft + channelBarWidth) {
                    this.channelBar.dispatchEvent("pageUpdated");
                } else {
                    //otherwise, move the beak together with channelBar
                    this._subChannelBar.peak.setLeft(middlePoint + "px");
                }
            },
        },
        {
            ButtonContainerType: {
                L1: 1,
                L2: 2
            },
        }),
    });
    var buttonType = BingApps.UI.NavigationBar.ButtonContainerType;
    WinJS.Class.mix(BingApps.UI.NavigationBar,
        BingApps.Utilities.DOMEventMixinWithBubbling,
        WinJS.Utilities.createEventProperties("iteminvoked")
        );
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function appexPlatformControlsNavBarContainerInit() {
    "use strict";

    WinJS.Namespace.define("BingApps.UI",
    {
        /// <summary>
        /// Navigation bar container control
        /// </summary>
        NavBarContainer: WinJS.Class.derive(BingApps.UI.SquareButtonContainer, function navBarContainer_ctor(domElement, options) {
            BingApps.UI.SquareButtonContainer.call(this, domElement, options);
            var that = this;
            window.addEventListener("resize", function navBarContainer_onResize() {
                if (!that._buttons || !that._buttons[0] || that._buttons[0].length === 0) {
                    return;
                }

                that.updateChannels();
                that.updateContainerLayout();
            });
            WinJS.Navigation.addEventListener("navigated", function navBarContainer_onNavigated() {
                that.updateChannels();
            });
        },
         {
             activeChannel: {
                 get: function () {
                     return this._activeChannel;
                 }
             },

             updateChannels: function () {
                 var button = null,
                     i = 0;

                 var location = WinJS.Navigation.location;
                 var buttons = this.element.querySelectorAll(".platformChannelButtonDiv");

                 var len = buttons.length;

                 for (i = 0; i < len; i++) {
                     button = buttons[i].winControl;

                     if (location === button.channelId) {
                         this._activeChannel = button;
                         button.disabled = true;
                     }
                     else {
                         button.disabled = false;
                     }
                 }
             },
         })
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

var DISABLE_ANIMATION = true;

(function appexPlatformControlsPageBarInit() {
    "use strict";

    /// <summary>
    /// Button container that contains v2 buttons and an more button
    /// </summary>
    var NS = WinJS.Namespace.define("BingApps.UI", {
        // page start from 1

        PagingBar: WinJS.Class.define(function pagingBar_ctor(element, options) {
            this.element = element || document.createElement("div");
            WinJS.Utilities.addClass(this.element, "platformPagination");
            BingApps.Utilities.setAutomationId(this.element);
            this.element.winControl = this;
            WinJS.UI.setOptions(this, options);

            this._init();
        },
        {
            pageCount: {
                get: function () {
                    return this._pageCount;
                },
                set: function (v) {
                    this._pageCount = v;
                }
            },
            pageNo: {
                get: function () {
                    return this._pageNo;
                },
                set: function (v) {
                    this._pageNo = v < 1 ? 1 : v > this._pageCount ? this._pageCount : v;
                }
            },
            on: {
                get: function () {
                    return this._on;
                },
                set: function (v) {
                    this._on = v;
                    if (v) {
                        WinJS.Utilities.addClass(bar, "pageOn");
                    }
                    else {
                        WinJS.Utilities.removeClass(bar, "pageOn");
                    }
                }
            },
            _init: function () {
                var i = 0;
                var bar = null;
                var count = this._pageCount;
                this.element.style.msGridColumns = "(auto)[" + count + "]";
                for (i = 0; i < count; i++) {
                    bar = document.createElement("div");
                    bar.style.msGridColumn = i + 1;
                    this.element.appendChild(bar);
                }
                this.goto(1);
            },
            reset: function () {
                this.goto(1);
            },
            goto: function (pageNo) {
                this.pageNo = pageNo;
                var currentBar = this.element.querySelector(".pageOn");
                if (currentBar) {
                    WinJS.Utilities.removeClass(currentBar, "pageOn");
                }
                var children = this.element.childNodes;

                var newPage = this.pageNo;
                var curr = children[newPage - 1];
                if (curr) {
                    WinJS.Utilities.addClass(curr, "pageOn");
                }
            }

        })
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

var DISABLE_ANIMATION = true;

(function appexPlatformControlsSquareButtonInit() {
    "use strict";

    var STRINGS = {
        L2OPENED: WinJS.Resources.getString("/BingApps/L2Opened").value,
        CLICKTOOPENL2: WinJS.Resources.getString("/BingApps/ClickToOpenL2").value
    };

    var NS = WinJS.Namespace.define("BingApps.UI",
    {
        /// <summary>
        /// A Special Button in top edgy for channel
        /// </summary>
        SquareButton: WinJS.Class.define(function squareButton_ctor (element, options) {

            // Create the button

            this.element = element || document.createElement("div");
            element = this.element;

            element.winControl = this;
            BingApps.Utilities.setAutomationId(element);
            WinJS.Utilities.addClass(element, "platformChannelButtonDiv win-focus-hide");

            var buttonElement = this.buttonElement = document.createElement("button");
            WinJS.Utilities.addClass(this.buttonElement, "platformChannelButton win-focus-hide");

            var toggleElement = this.toggleElement = document.createElement("button");
            WinJS.Utilities.addClass(this.toggleElement, "platformChannelToggle platformHidden win-focus-hide");

            element.setAttribute("tabIndex", -1);
            buttonElement.setAttribute("role", "link");
            toggleElement.setAttribute("role", "button");

            BingApps.Utilities.setAutomationId(buttonElement, element, "link");
            BingApps.Utilities.setAutomationId(toggleElement, element, "toggle");

            var blurHandler = this._blurHandler = this._onpointerblur.bind(this);
            var focusHandler = this._focusHandler = this._onpointerfocus.bind(this);
            var keyDownHandler = this._keyDownHandler = this._onKeyDown.bind(this);
            buttonElement.addEventListener("blur", blurHandler);
            buttonElement.addEventListener("focus", focusHandler);
            buttonElement.addEventListener("keydown", keyDownHandler);

            toggleElement.addEventListener("blur", blurHandler);
            toggleElement.addEventListener("focus", focusHandler);
            toggleElement.addEventListener("keydown", keyDownHandler);

            this._initButton();

            WinJS.UI.setOptions(this, options);
            this.setImage(BingApps.UI.SquareButton.ImageType.SINGLE);
            this._setAriaLabel(false);

            this.buttonElement.setAttribute("aria-label", this._title || this._channelId);

            element.appendChild(this.buttonElement);
            element.appendChild(this.toggleElement);
        },
        {
            _hasSubChannels: false,
            _blurHandler: null,
            _focusHandler: null,
            _toggleBlurHandler: null,
            _toggleFocusHandler: null,

            _onKeyDown: function (event) {
                //In order to allow key accessibility to L2 buttons,
                //enable "downArrow" key to set focus to the first button in the expanded subChannel
                //and "upArrow" key to set focus back to its parent togglebutton in L1.
                if (event.keyCode === WinJS.Utilities.Key.downArrow && this.expanded) {
                    event.stopPropagation();
                    event.preventDefault();
                    
                    var subChannelsDiv = document.querySelector(".platformChannelBar.subChannels .platformChannelBarButtonGroup.show");
                    if (subChannelsDiv && subChannelsDiv.childNodes.length > 0) {
                        //in case that no "tab" key event ever happens, .focus stylesheet takes effect only when platformNavigationBar has class .tab
                        var navigationBar = document.querySelector(".platformNavigationBar");
                        if (navigationBar) {
                            WinJS.Utilities.addClass(navigationBar, "tab");
                        }

                        var firstButton = subChannelsDiv.firstChild;
                        if (firstButton && firstButton.childNodes.length > 0) {
                            firstButton.firstChild.focus();
                        }
                    }
                } else if (event.keyCode === WinJS.Utilities.Key.upArrow && this._isSubChannels) {
                    event.stopPropagation();
                    event.preventDefault();

                    var parentButton = document.getElementById(this.parentId);
                    if (parentButton && parentButton.childNodes.length > 0) {
                        parentButton.lastChild.focus();
                    }
                }
            },
            _onpointerblur: function (event) {
                WinJS.Utilities.removeClass(this.element, "focus");
            },
            _onpointerfocus: function (event) {
                WinJS.Utilities.addClass(this.element, "focus");
            },

            /// <field>
            /// Disabled
            /// </field>
            disabled: {
                set: function (value) {
                    var element = this.element;
                    if (value) {
                        WinJS.Utilities.addClass(element, "disabled");
                    } else {
                        WinJS.Utilities.removeClass(element, "disabled");
                    }
                },
                get: function () {
                    var element = this.element;
                    return WinJS.Utilities.hasClass(element, "disabled");
                }
            },
            isSelected: {
                get: function() {
                    return this.active || this.disabled;
                }
            },
            // either channel is selected, or button is direct parent of selected channel
            active: {
                set: function (isButtonActive) {
                    var element = this.element;
                    this._active = isButtonActive;
                    if (isButtonActive) {
                        WinJS.Utilities.addClass(element, "currentActive");
                    }
                    else {
                        WinJS.Utilities.removeClass(element, "currentActive");
                    }
                },
                get: function () {
                    return this._active;
                }
            },
            parentId: {
                get: function () {
                    return this._parentId;
                },
                set: function (v) {
                    this._parentId = v;
                }
            },
            channelId: {
                get: function () {
                    return this._channelId;
                },
                set: function (v) {
                    this._channelId = v;
                }
            },

            hasSubChannels: {
                get: function () {
                    return this._hasSubChannels;
                },
                set: function (v) {
                    this._hasSubChannels = v;
                    if (v) {
                        this.element.setAttribute("aria-owns", "platformChannelBarButtonGroup_" + this.channelId);
                        WinJS.Utilities.removeClass(this.toggleElement, "platformHidden");
                    }
                }
            },

            canExpand: {
                get: function () {
                    var buttonContainerType = BingApps.UI.NavigationBar.ButtonContainerType;
                    return (this.buttonContainerType === buttonContainerType.L1
                       || this.buttonContainerType === buttonContainerType.LV);
                }
            },
            expanded: {
                get: function () {
                    return this._expanded;
                },
                set: function (expand) {
                    this._expanded = expand;
                    var element = this.element;
                    if (expand) {
                        WinJS.Utilities.addClass(element, "expanded");
                    }
                    else {
                        WinJS.Utilities.removeClass(element, "expanded");
                    }
                    this._setAriaLabel(expand);
                }
            },
            isSubChannel: {
                get: function () {
                    return this._isSubChannels;
                },
                set: function (v) {
                    this._isSubChannels = v;
                }
            },
            buttonContainerType: {
                get: function () {
                    return this._buttonContainerType;
                },
                set: function (v) {
                    this._buttonContainerType = v;
                }
            },

            hidden: {
                get: function () {
                    return WinJS.Utilities.hasClass(this.element, "platformHidden");
                },
                set: function (v) {
                    if (v) {
                        WinJS.Utilities.addClass(this.element, "platformHidden");
                    }
                    else {
                        WinJS.Utilities.removeClass(this.element, "platformHidden");
                    }
                }
            },

            // L2 specific
            showIcon: {
                get: function () {
                    return WinJS.Utilities.hasClass(this.element, "platformShowIcon");
                },
                set: function (v) {
                    if (v) {
                        WinJS.Utilities.addClass(this.element, "platformShowIcon");
                    }
                    else {
                        WinJS.Utilities.removeClass(this.element, "platformShowIcon");
                    }
                }
            },
            /// <field>
            /// The DOM element container
            /// </field>
            element: null,

            /// <field>
            /// The icon for the button. May be a CSS class or a URL
            /// </field>
            icon: {
                set: function (value) {
                    this._setIcon(value);
                    this._iconRest = value;
                },
                get: function () {
                    return this._iconRest;
                }

            },
            images: {
                set: function (value) {
                    this._images = value;
                },
                get: function () {
                    return this._images;
                }
            },

            /// <field>
            /// The title for the button
            /// </field>
            title: {
                get: function () {
                    return this._title;
                },
                set: function (value) {
                    if (value) {
                        this._title = value;
                        this._label.textContent = value;
                    }
                }
            },

            _click: function (event) {

            },

            _invokeButton: function (event, handler) {
                if (handler) {
                    handler(event);
                }
            },

            _initButton: function () {
                var buttonHolder = this._buttonDiv = document.createElement("div");
                buttonHolder.setAttribute("aria-hidden", "true");
                WinJS.Utilities.addClass(buttonHolder, "platformEdgyIconHolder");

                // Create the icon
                var iconDiv = this._iconDiv = document.createElement("div");
                WinJS.Utilities.addClass(iconDiv, "platformEdgyIconDiv");
                var icon = this._icon = document.createElement("div");
                WinJS.Utilities.addClass(icon, "platformEdgyIcon ");
                iconDiv.appendChild(icon);
                buttonHolder.appendChild(iconDiv);

                // Create the label
                var labelDiv = document.createElement("div");
                WinJS.Utilities.addClass(labelDiv, "platformEdgyLabelDiv");
                var label = this._label = document.createElement("div");
                WinJS.Utilities.addClass(label, "platformEdgyLabel");
                labelDiv.appendChild(label);
                buttonHolder.appendChild(labelDiv);

                this.buttonElement.appendChild(buttonHolder);
            },

            setImage: function (type) {
                if (this.images) {
                    var imageUrl;
                    switch (type) {
                        case BingApps.UI.SquareButton.ImageType.DOUBLE:
                            imageUrl = this.images.double;
                            break;
                        default:
                            imageUrl = this.images.single;
                            break;
                    }
                    this._setImage(imageUrl);
                }
            },

            _setImage: function (imageUrl) {
                if (imageUrl) {
                    var buttonElement = this.buttonElement;
                    var element = this.element;
                    WinJS.Utilities.addClass(element, "platformSquareButtonImage");
                    if (this.hasSubChannels) {
                        WinJS.Utilities.addClass(buttonElement, "platformSquareButtonImage image fitBoth");
                    } else {
                        WinJS.Utilities.addClass(buttonElement, "platformSquareButtonImage image fitHeight");
                    }
                    buttonElement.innerHTML = "";
                    var imageCard = new BingApps.UI.ImageCard(buttonElement, {
                        imageSource: {
                            url: imageUrl,
                            cacheId: "PlatformTopEdgyImageCache",
                        }
                    });
                }
            },

            // Arial label for button:
            // Navigation only: title
            // Has sub Channel(L2 not shown): title + " Click to show subChannel"
            // Has sub Channel(L2 shown): title + "SubChannels Shown"
            _setAriaLabel: function (subChannelsShown) {
                var element = this.toggleElement;
                if (subChannelsShown) {
                    element.setAttribute("aria-label", STRINGS.L2OPENED);
                }
                else {
                    var ariaLabel = this.title || "";
                    if (this.hasSubChannels) {
                        ariaLabel += STRINGS.CLICKTOOPENL2;
                    }
                    element.setAttribute("aria-label", ariaLabel);
                }
            },
            _setIcon: function (value) {
                var icon = this._icon;
                icon.textContent = "";

                if (value) {
                    if (
                    value.substring(0, 4) === "url(") {
                        WinJS.Utilities.addClass(icon, "platformSquareButtonImage");
                        icon.style.backgroundImage = value;
                    }
                    else {
                        WinJS.Utilities.addClass(icon, value);
                    }
                }
                else {
                    WinJS.Utilities.addClass(this._iconDiv, "platformHidden");
                }
            },

            /// <field>
            /// The onclick handler
            /// </field>
            onclick: {
                set: function (value) {
                    var that = this;
                    var element = that.element;
                    var onclick = this._onClick = function (event) {
                        that._invokeButton(event, value);
                    };
                    element.addEventListener("click", onclick, false);

                    var onkeydown = this._onkeyDown = function (event) {
                        switch (event.keyCode) {
                            case WinJS.Utilities.Key.enter:
                            case WinJS.Utilities.Key.space:
                                that._invokeButton(event, value);
                                break;
                            default:
                                break;
                        }
                    };
                    //element.addEventListener("keydown", onkeydown, false);
                }
            },
            dispose: function () {
                var element = this.element;
                var buttonElement = this.buttonElement;
                var toggleElement = this.toggleElement;
                buttonElement.removeEventListener("blur", this._blurHandler);
                buttonElement.removeEventListener("focus", this._focusHandler);
                buttonElement.removeEventListener("keydown", this._keyDownHandler);
                toggleElement.removeEventListener("blur", this._blurHandler);
                toggleElement.removeEventListener("focus", this._focusHandler);
                toggleElement.removeEventListener("keydown", this._keyDownHandler);
                element.removeEventListener("click", this._onClick);
            }
        },
        {
            ImageType: {
                SINGLE: 0,
                DOUBLE: 2,
            }
        }),
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function appexPlatformControlsImageCardInit() {
    "use strict";

    var NS = WinJS.Namespace.define("BingApps.UI",
    {
        /// <summary>
        /// ImageCard control: Renders an image from a given URL
        /// </summary>
        ImageCard: WinJS.Class.define(function imageCard_ctor(element, options) {
            /// <summary>
            /// Constructor: Creates an instance of the ImageCard Control object.
            /// </summary>
            /// <returns>
            /// An instance of the ImageCard control object.
            /// </returns>

            element = element || document.createElement("div");
            element.winControl = this;
            this._element = element;
            options = options || {};
            this._noIdentifier = options.noIdentifier || 0;

            this._init();
            WinJS.UI.setOptions(this, options);
        }, {

            // private variables
            _alternateText: null,
            _noIdentifier: 0,
            _element: null,
            _imageElement: null,
            _imageSource: null,

            // properties
            alternateText: {
                set: function (value) {
                    this._alternateText = value;
                    this._element.setAttribute("aria-label", value);
                }
            },

            imageSource: {
                set: function (value) {
                    this._imageSource = value;
                    this._loadFromImageSource();
                }
            },

            // Methods

            //Initializes the image element
            _init: function () {
                var element = this._element;
                WinJS.Utilities.addClass(element, "platformImageCard");
                element.setAttribute("role", "img");
                if (!this._noIdentifier) {
                    BingApps.Utilities.setAutomationId(element);
                }

                // Image Element
                var imageElement = this._imageElement = document.createElement("div");
                WinJS.Utilities.addClass(imageElement, "platformImageCardImage");
                element.appendChild(imageElement);

            },

            //Sets the background image of the div from a given URL
            _setImage: function (url, imageSource) {
                if (!this._alternateText && imageSource) {
                    this._element.setAttribute("aria-label", imageSource);
                }
                var that = this;
                var imageElement = this._imageElement;
                imageElement.style.backgroundImage = "url('" + url + "')";
                //HACK: IE renderer does not always draw background images on screen (Windows 8 bug: #685585). Setting the opacity seems to force it to draw. (naeims)
                //[BEGIN]
                var imgStyle = window.getComputedStyle(imageElement);
                imageElement.style.opacity = imgStyle ? imgStyle.opacity : "1";
                //[END]
            },

            //Pics the image URL based on imageSource Object and sets it as the background of the div
            _loadFromImageSource: function () {
                if (!this._imageSource) {
                    return;
                } else if (typeof this._imageSource === "string") {
                    this._setImage(this._imageSource, null);
                } else if (this._imageSource.lowResolutionUrl && this._imageSource.highResolutionUrl) {
                    this._setImage(this._imageSource.highResolutionUrl, null);
                } else if (this._imageSource.url){
                    this._setImage(this._imageSource.url, null);
                }
            },

        })
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function appexPlatformRovingTabIndexManagerInit() {
    "use strict";

    var NV = BingApps.UI.NavigableView;

    WinJS.Namespace.define("BingApps.UI.NavigableView", {

        RovingTabIndexManager: WinJS.Class.define(
            function rovingTabIndexManager_ctor(navigableView) {
                this._navigableView = navigableView;
                this._bindings.onKeyDown = this._onKeyDown.bind(this);

                var navigableItems = this._navigableView.getNavigableItems(),
                    activeItem = this._navigableView.getActiveItem() || null;

                if (activeItem) {
                    this._disableNavigableItems(navigableItems, activeItem);
                    this._navigableView.element.addEventListener("keydown", this._bindings.onKeyDown);
                }
            },
            {
                _bindings: {
                    onKeyDown: null
                },

                _navigableView: null,

                _disableNavigableItems: function (navigableItems, activeItem) {
                    for (var key in navigableItems) {
                        var navigableItem = navigableItems[key];
                        if (activeItem !== navigableItem) {
                            navigableItem.tabIndex = -2; // we'll use -2 for temp disabled tab indexes
                        }
                    };
                },

                _onKeyDown: function (event) {
                    if (!event.altKey && BingApps.Utilities.isCursorKey(event.keyCode)) {
                        event.stopImmediatePropagation();
                        event.preventDefault();

                        var currentItem = event.target,
                            nextItem = this._navigableView.getNextItem(currentItem, event.keyCode);

                        if (nextItem) {
                            currentItem.tabIndex = -2;
                            nextItem.tabIndex = 0;
                            nextItem.focus();

                            // var event = document.createEvent("CustomEvent");
                            // event.initCustomEvent("rovingtabchange", false, false, { activeItem: nextItem });
                            // navigableView.element.dispatchEvent(event);
                        }
                    }
                },

                dispose: function () {
                    this._navigableView.element.removeEventListener("keydown", this._bindings.onKeyDown);
                    this._bindings.onKeyDown = null;
                }
            }
        )
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function appexPlatformPointerNavigableViewInit() {
    "use strict";

    var NV = BingApps.UI.NavigableView;

    WinJS.Namespace.define("BingApps.UI.NavigableView", {

        /// <summary>
        /// INavigableView implementation that depends on pointer based HTML element data augmentation
        /// e.g. data-platform-pnv="{up:'elementId', right:'elemendId', down:'elementId', left:'elementId'}"
        /// </summary>
        PointerNavigableView: WinJS.Class.define(
            function pointerNavigableView_ctor(element, navigableChildren) {
                this._element = element;
                this._navigableItems = navigableChildren;
            },
            {
                // [BEGIN] INavigableView implementation

                _element: null,

                _navigableItems: null,

                _isActivated: false,

                isActivated: {
                    get: function(){
                        return this._isActivated;
                    }
                },

                element: {
                    get: function () {
                        return this._element;
                    }
                },

                activate: function(){
                    this._isActivated = true;
                    this.dispatchEvent("activated");
                },

                isNavigableItem: function (item) {
                    /// <summary>
                    /// Returns true if the given element is an item that should be navigated to with the keyboard.
                    /// </summary>
                    return item.getAttribute("data-platform-pnv");
                },

                getActiveItem: function () {
                    return this._element.querySelector("div[tabIndex='0']");
                },

                getNavigableItems: function () {
                    return this._navigableItems;
                },

                getNextItem: function (eventTarget, eventKeyCode) {
                    /// <summary>
                    /// Given an item and a keyCode, returns the next item that should get focus. 
                    /// Returning null means there is no next item to get focus. 
                    /// </summary>
                    var nextItem = null;

                    if (BingApps.Utilities.isCursorKey(event.keyCode)) {

                        if (this._isActivated === false) {
                            this.activate();
                        }

                        var pointerData = BingApps.Utilities.parseDataAttribute("data-platform-pnv", eventTarget);

                        switch (eventKeyCode) {
                            case WinJS.Utilities.Key.upArrow:
                                nextItem = this._onArrow(pointerData, NV.Direction.UP);
                                this._setPointer(nextItem, NV.Direction.DOWN, eventTarget.id);
                                break;
                            case WinJS.Utilities.Key.rightArrow:
                                nextItem = this._onArrow(pointerData, NV.Direction.RIGHT);
                                this._setPointer(nextItem, NV.Direction.LEFT, eventTarget.id);
                                break;
                            case WinJS.Utilities.Key.downArrow:
                                nextItem = this._onArrow(pointerData, NV.Direction.DOWN);
                                this._setPointer(nextItem, NV.Direction.UP, eventTarget.id);
                                break;
                            case WinJS.Utilities.Key.leftArrow:
                                nextItem = this._onArrow(pointerData, NV.Direction.LEFT);
                                this._setPointer(nextItem, NV.Direction.RIGHT, eventTarget.id);
                                break;
                            default: break;
                        }
                    }

                    return nextItem;
                },

                // [END] INavigableView implementation

                _setPointer: function (item, direction, id) {
                    if (item) {
                        var pointerData = BingApps.Utilities.parseDataAttribute("data-platform-pnv", item);
                        pointerData[direction] = id;
                        item.setAttribute("data-platform-pnv", JSON.stringify(pointerData));
                    }
                },

                _onArrow: function (pointerData, direction) {
                    var nextItem = null;

                    if (pointerData !== null) {
                        var childId = pointerData[direction];
                        nextItem = document.getElementById(childId) || null; //convert possible undefined to null
                    }

                    if (nextItem === null) {
                        NV.dispatchBoundaryEvent(this._element, direction);
                    }

                    return nextItem;
                }
            }
        )
    });

    WinJS.Class.mix(BingApps.UI.NavigableView.PointerNavigableView, WinJS.Utilities.eventMixin);
    WinJS.Class.mix(BingApps.UI.NavigableView.PointerNavigableView, WinJS.Utilities.createEventProperties("activated"));

})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function appexPlatformPointerNavigableViewOrientationManagerInit() {
    "use strict";

    var NV = BingApps.UI.NavigableView;

    WinJS.Namespace.define("BingApps.UI.NavigableView", {

        // DEPRECATED
        PointerNavigableViewOrientationManager: WinJS.Class.define(
            function pointerNavigableViewOrientationManager_ctor(navigableView, initialItemInfos, elements, isAssociativeElementArray) {
                this._navigableView = navigableView;

                //Prime cache with initial orientation infos
                this._itemInfos = {
                    orientation1: initialItemInfos,
                    orientation2: null
                },

                this._elements = elements;

                // ItemsContainer builds it's elements array with handles rather than indexes
                // so we need to support that
                this._isAssociativeElementArray = isAssociativeElementArray || false;
            },
            {
                _elements: null,

                // Cache for the two different orientations
                _itemInfos: {
                    orientation1: null,
                    orientation2: null
                },

                // Orientation 1 is the initial state
                _isOrientation1: true,

                toggleOrientation: function () {
                    if (this._isOrientation1 === true) {
                        // Calculate infos for alternative orientation
                        // This will only run the first time we change orientation, after that we use the cached values
                        if (!this._itemInfos.orientation2) {
                            var isLtr = window.getComputedStyle(document.body).direction !== "rtl";
                            this._itemInfos.orientation2 = NV.createItemInfos(this._elements, this._isAssociativeElementArray);
                            NV.addBoundsMetaDataToItemInfos(this._itemInfos.orientation2, this._elements);
                            NV.addPointersMetaDataToItemInfos(this._itemInfos.orientation2, isLtr);
                        }

                        NV.addPnvDataAttributesToElements(this._itemInfos.orientation2, this._elements);
                        this._isOrientation1 = false;
                    }
                    else {
                        NV.addPnvDataAttributesToElements(this._itemInfos.orientation1, this._elements);
                        this._isOrientation1 = true;
                    }
                }
            }
        ),

        NavigableViewOrientationManager: WinJS.Class.define(
            function navigableViewOrientationManager_ctor() {
                this._landscapeItemInfos = null;
                this._portraitItemInfos = null;
            },
            {
                // PRIVATE

                _landscapeItemInfos: null,

                _portraitItemInfos: null,

                _isLandscape: function () {
                    var orientation = Windows.UI.ViewManagement.ApplicationView.value;

                    return orientation === Windows.UI.ViewManagement.ApplicationViewState.fullScreenLandscape || orientation === Windows.UI.ViewManagement.ApplicationViewState.filled;
                },

                // PUBLIC

                itemInfos: { 
                    get: function () {
                        return (this._isLandscape() === true) ? this._landscapeItemInfos : this._portraitItemInfos;
                    },
                    set: function(itemInfos){
                        if (this._isLandscape()) {
                            this._landscapeItemInfos = itemInfos;
                        }
                        else {
                            this._portraitItemInfos = itemInfos;
                        }
                    }
                },

                reset: function () {
                    this._landscapeItemInfos = null;
                    this._portraitItemInfos = null;
                }
            }
        )
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function appexPlatformsNavigableViewInit() {
    "use strict";

    var NV = WinJS.Namespace.define("BingApps.UI.NavigableView", {

        _elementIds: 0,

        ItemBounds: {
            top: null,
            right: null,
            bottom: null,
            left: null
        },

        ItemPointers: {
            up: null,
            right: null,
            down: null,
            left: null
        },

        ItemInfo: {
            id: null,
            bounds: null,
            pointers: null
        },

        BoundaryEventDetail: {
            direction: null
        },

        Direction: {
            UP: "up",
            RIGHT: "right",
            DOWN: "down",
            LEFT: "left"
        },

        createItemId: function () {
            return "pnv_" + NV._elementIds++;
        },

        createItemInfo: function (id) {
            return Object.create(NV.ItemInfo, {
                id: {
                    value: id || NV.createItemId()
                },
                bounds: {
                    value: Object.create(NV.ItemBounds)
                },
                pointers: {
                    value: Object.create(NV.ItemPointers)
                }
            });
        },

        createItemInfos: function (elements) {
            var itemInfos = [];

            for (var elementKey in elements) {
                var element = elements[elementKey],
                    itemInfo = this.createItemInfo(element.id);

                itemInfos[elementKey] = itemInfo;
            }

            return itemInfos;
        },

        getItemBounds: function (element) {
            return Object.create(NV.ItemBounds, {
                top: { value: element.offsetTop },
                right: { value: element.offsetLeft + element.offsetWidth },
                bottom: { value: element.offsetTop + element.offsetHeight },
                left: { value: element.offsetLeft }
            });
        },

        addBoundsMetaDataToItemInfos: function (itemInfos, elements) {
            for (var key in itemInfos) {

                var element = elements[key],
                    itemInfo = itemInfos[key];

                if (itemInfo && element) {
                    var bounds = NV.getItemBounds(element);
                    itemInfo.bounds.top = bounds.top;
                    itemInfo.bounds.right = bounds.right;
                    itemInfo.bounds.bottom = bounds.bottom;
                    itemInfo.bounds.left = bounds.left;
                }
            }
        },

        addPointersMetaDataToItemInfos: function (itemInfos, isLtr, isGridBased) {
            for (var key in itemInfos) {

                var itemInfo = itemInfos[key];

                if (itemInfo && itemInfo.bounds) {
                    NV.addPointersMetaDataToItemInfo(itemInfo, itemInfos, isLtr, isGridBased);
                }
            }
        },

        addPointersMetaDataToItemInfo: function (itemInfo, itemInfos, isLtr, isGridBased) {
            var flipHorizontal = (!isLtr && isGridBased) ? true : false;

            NV._addTopPointer(itemInfo, itemInfos, isLtr);
            NV._addRightPointer(itemInfo, itemInfos, isLtr, flipHorizontal);
            NV._addDownPointer(itemInfo, itemInfos, isLtr);
            NV._addLeftPointer(itemInfo, itemInfos, isLtr, flipHorizontal);
        },

        addPnvDataAttributesToElements: function (itemInfos, elements) {
            for (var key in itemInfos) {

                var element = elements[key],
                    itemInfo = itemInfos[key];

                if (element && itemInfo && itemInfo.pointers) {
                    if (!element.id) {
                        element.id = itemInfo.id;
                    }
                    element.setAttribute("data-platform-pnv", JSON.stringify(itemInfo.pointers));
                }
            }
        },

        isItemAbove: function (srcBounds, isAboveBounds) {
            return isAboveBounds.bottom <= srcBounds.top;
        },

        isItemToRight: function (srcBounds, isToRightBounds) {
            return isToRightBounds.left >= srcBounds.right;
        },

        isItemBelow: function (srcBounds, isBelowBounds) {
            return isBelowBounds.top >= srcBounds.bottom;
        },

        isItemToLeft: function (srcBounds, isToLeftBounds) {
            return isToLeftBounds.right <= srcBounds.left;
        },

        dispatchBoundaryEvent: function (element, direction) {
            var event = document.createEvent("CustomEvent");

            // Focus manager is listening for events on platformClusterContent
            // Make sure we always trigger the events from this outer container
            while (element && !WinJS.Utilities.hasClass(element, "platformClusterContent")) {
                element = element.parentElement;
            }

            if (element) {
                event.initCustomEvent("contentbounds", false, false, Object.create(NV.BoundaryEventDetail, { direction: { value: direction } }));
                element.dispatchEvent(event);
            }
        },



        // Conveniance function for creating bounds, pointers & HTML data in correct order
        convertElementsToPnvItems: function (itemInfos, siblingElements, isLtr, isGridBased) {
            NV.addBoundsMetaDataToItemInfos(itemInfos, siblingElements);
            NV.addPointersMetaDataToItemInfos(itemInfos, isLtr, isGridBased);
            NV.addPnvDataAttributesToElements(itemInfos, siblingElements);
        },

        _addTopPointer: function (itemInfo, itemInfos, isLtr) {
            if (itemInfo.pointers.up === null) {
                var itemAbove = NV._getItemAbove(itemInfo, itemInfos, isLtr);
                if (itemAbove) {
                    itemInfo.pointers.up = itemAbove.id;
                    // Create link back
                    if (itemAbove.pointers.down === null) {
                        itemAbove.pointers.down = itemInfo.id;
                    }
                }
            }
        },

        _addRightPointer: function (itemInfo, itemInfos, isLtr, horizontalFlip) {
            if (itemInfo.pointers.right === null) {
                var itemToRight = NV._getItemToRight(itemInfo, itemInfos, isLtr);
                if (itemToRight) {
                    if (!horizontalFlip) {
                        itemInfo.pointers.right = itemToRight.id;
                        // Create link back
                        if (itemToRight.pointers.left === null) {
                            itemToRight.pointers.left = itemInfo.id;
                        }
                    } else {
                        itemInfo.pointers.left = itemToRight.id;
                        // Create link back
                        if (itemToRight.pointers.right === null) {
                            itemToRight.pointers.right = itemInfo.id;
                        }
                    }
                }
            }
        },

        _addDownPointer: function (itemInfo, itemInfos, isLtr) {
            if (itemInfo.pointers.down === null) {
                var itemBelow = NV._getItemBelow(itemInfo, itemInfos, isLtr);
                if (itemBelow) {
                    itemInfo.pointers.down = itemBelow.id;
                    // Create link back
                    if (itemBelow.pointers.up === null) {
                        itemBelow.pointers.up = itemInfo.id;
                    }
                }
            }
        },

        _addLeftPointer: function (itemInfo, itemInfos, isLtr, horizontalFlip) {
            if (itemInfo.pointers.left === null) {
                var itemToLeft = NV._getItemToLeft(itemInfo, itemInfos, isLtr);
                if (itemToLeft) {
                    if (!horizontalFlip) {
                        itemInfo.pointers.left = itemToLeft.id;
                        // Create link back
                        if (itemToLeft.pointers.right === null) {
                            itemToLeft.pointers.right = itemInfo.id;
                        }
                    } else {
                        itemInfo.pointers.right = itemToLeft.id;
                        // Create link back
                        if (itemToLeft.pointers.left === null) {
                            itemToLeft.pointers.left = itemInfo.id;
                        }
                    }
                }
            }
        },

        _getItemAbove: function (currentItemInfo, itemInfos, isLtr) {
            var allItemsAbove = [],
                currentItemBounds = currentItemInfo.bounds;

            for (var i = 0, otherItemInfo, otherItemBounds, itemInfosLength = itemInfos.length; i < itemInfosLength; i++) {
                otherItemInfo = itemInfos[i];
                if (otherItemInfo && otherItemInfo !== currentItemInfo && !otherItemInfo.isAd) {
                    otherItemBounds = otherItemInfo.bounds;
                    if (NV.isItemAbove(currentItemBounds, otherItemBounds) && !NV.isItemToLeft(currentItemBounds, otherItemBounds) && !NV.isItemToRight(currentItemBounds, otherItemBounds)) {
                        allItemsAbove.push(otherItemInfo);
                    }
                }
            }

            allItemsAbove.sort(function navigableView_allItemsAboveCompare(a, b) {
                b.bounds.top - a.bounds.top;
            });

            return allItemsAbove[0] || null;
        },

        _getItemToRight: function (currentItemInfo, itemInfos, isLtr) {
            var allItemsToRight = [],
                currentItemBounds = currentItemInfo.bounds;

            for (var i = 0, otherItemInfo, otherItemBounds, itemInfosLength = itemInfos.length; i < itemInfosLength; i++) {
                otherItemInfo = itemInfos[i];
                if (otherItemInfo && otherItemInfo !== currentItemInfo && !otherItemInfo.isAd) {
                    otherItemBounds = otherItemInfo.bounds;
                    if (NV.isItemToRight(currentItemBounds, otherItemBounds) && !NV.isItemAbove(currentItemBounds, otherItemBounds) && !NV.isItemBelow(currentItemBounds, otherItemBounds)) {
                        allItemsToRight.push(otherItemInfo);
                    }
                }
            }

            allItemsToRight.sort(function allItemsToRightCompareFunc(a, b) {
                a.bounds.left - b.bounds.left;
            });

            return allItemsToRight[0] || null;
        },

        _getItemBelow: function (currentItemInfo, itemInfos, isLtr) {
            var allItemsBelow = [],
                currentItemBounds = currentItemInfo.bounds;

            for (var i = 0, otherItemInfo, otherItemBounds, itemInfosLength = itemInfos.length; i < itemInfosLength; i++) {
                otherItemInfo = itemInfos[i];
                if (otherItemInfo && otherItemInfo !== currentItemInfo && !otherItemInfo.isAd) {
                    otherItemBounds = otherItemInfo.bounds;
                    if (NV.isItemBelow(currentItemBounds, otherItemBounds) && !NV.isItemToLeft(currentItemBounds, otherItemBounds) && !NV.isItemToRight(currentItemBounds, otherItemBounds)) {
                        allItemsBelow.push(otherItemInfo);
                    }
                }
            }

            allItemsBelow.sort(function allItemsBelowCompareFunc(a, b) {
                a.bounds.top - b.bounds.top;
            });

            return allItemsBelow[0] || null;
        },

        _getItemToLeft: function (currentItemInfo, itemInfos, isLtr) {
            var allItemsToLeft = [],
                currentItemBounds = currentItemInfo.bounds;

            for (var i = 0, otherItemInfo, otherItemBounds, itemInfosLength = itemInfos.length; i < itemInfosLength; i++) {
                otherItemInfo = itemInfos[i];
                if (otherItemInfo && otherItemInfo !== currentItemInfo && !otherItemInfo.isAd) {
                    otherItemBounds = otherItemInfo.bounds;
                    if (NV.isItemToLeft(currentItemBounds, otherItemBounds) && !NV.isItemAbove(currentItemBounds, otherItemBounds) && !NV.isItemBelow(currentItemBounds, otherItemBounds)) {
                        allItemsToLeft.push(otherItemInfo);
                    }
                }
            }

            allItemsToLeft.sort(function allItemsToLeftCompareFunc(a, b) {
                a.bounds.left - b.bounds.left;
            });

            if (isLtr) {
                allItemsToLeft.reverse();
            }
            return allItemsToLeft[0] || null;
        },

        NavigableViewOrchestrator: WinJS.Class.define(function _NavigableViewOrchestrator_ctor(element, navigableChildren) {
            this._navigableView = new BingApps.UI.NavigableView.PointerNavigableView(element, navigableChildren);
            this._focusManager = new BingApps.UI.NavigableView.RovingTabIndexManager(this._navigableView),
            this._orientationManager = new BingApps.UI.NavigableView.NavigableViewOrientationManager();

            this._bindings.onNavigableViewActivated = this._onNavigableViewActivated.bind(this);
            this._navigableView.addEventListener("activated", this._bindings.onNavigableViewActivated);
        },
        {
            // PRIVATE

            _bindings: {
                onNavigableViewActivated: null
            },

            _navigableView: null, // PointerNavigableView or MatrixNavigableView

            _focusManager: null, // RovingTabIndexManager or ActiveDescendentManager

            _orientationManager: null,

            _onNavigableViewActivated: function () {
                this._render();
            },

            _render: function (itemInfos) {
                var elements = this._navigableView.getNavigableItems();

                if (itemInfos) {
                    BingApps.UI.NavigableView.addPnvDataAttributesToElements(itemInfos, elements);
                }
                else {
                    itemInfos = BingApps.UI.NavigableView.createItemInfos(elements);
                    BingApps.UI.NavigableView.convertElementsToPnvItems(itemInfos, elements);
                    this._orientationManager.itemInfos = itemInfos;
                }
            },

            // PUBLIC

            onOrientationChange: function (event) {
                if (this._navigableView.isActivated) {
                    var itemInfos = this._orientationManager.itemInfos;
                    this._render(itemInfos);
                }
            },

            onWindowResize: function (event) {
                if (this._navigableView.isActivated) {
                    this._orientationManager.reset();
                    this._render();
                }
            },

            dispose: function () {
                this._focusManager.dispose();
                this._focusManager = null;

                this._navigableView.removeEventListener("activated", this._bindings.onNavigableViewActivated);
                this._navigableView = null;

                this._orientationManager = null;
            }
        },
        {
            // STATIC MEMBERS
        })
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // 
    WinJS.Namespace.define("BingApps.UI", {
        AdContainer: WinJS.Class.define(
            function (elt, options) {
                /// <summary>
                /// Creates a AdContainer instance.
                /// </summary>
                /// <param name="options">
                /// - controlOptions: options object sent to the control
                /// - controlType: the type of control that can render Ads. Such as "MicrosoftNSJS.Advertising.AdControl"
                /// </param>
                elt = this._elt = elt ? elt : document.createElement("div");
                elt.winControl = this;
                WinJS.Utilities.addClass(elt, "adContainer");

                // read from options
                var controlOptions = this._controlOptions = options.controlOptions;
                var controlType = this._controlType = options.controlType;

                this._isAdInstantiated = false;
            },
            {
                _elt: null,
                _adElt: null,
                _adControl: null,
                _controlOptions: null,
                _controlType: null,
                _isAdInstantiated: null,

                element: {
                    get: function () {
                        return this._elt;
                    }
                },

                instantiateAd: function () {
                    var isAdInstantiated = this._isAdInstantiated;
                    if (isAdInstantiated) {
                        if (this._adControl && this._adControl.dispose) {
                            this._adControl.dispose();
                            this._adControl = null;
                        }
                        if (this._adElt) {
                            this._elt.removeChild(this._adElt);
                        }
                    }

                    this._isAdInstantiated = true;

                    var elt = this._elt;
                    var controlOptions = this._controlOptions;
                    var controlType = this._controlType;

                    // create ad element
                    var adElt = document.createElement("div");
                    WinJS.Utilities.addClass(adElt, "ad");
                    elt.appendChild(adElt);
                    adElt.style.height = "100%";
                    adElt.style.width = "100%";
                    this._adElt = adElt;

                    // create ad control
                    var adControlElt = document.createElement("div");
                    adControlElt.style.height = "100%";
                    adControlElt.style.width = "100%";
                    var adControl = this._adControl = BingApps.Utilities.createObject(controlType, adControlElt, controlOptions);
                    if (adControl) {
                        adElt.appendChild(adControlElt);
                    }
                },

                dispose: function () {
                    var adControl = this._adControl;
                    if (adControl && adControl.dispose) {
                        adControl.dispose();
                        adControl = null;
                    }
                },

                relayout: function (relayoutOptions) {
                    var adControl = this._adControl;
                    if (adControl && adControl.onOrientationChange) {
                        adControl.onOrientationChange(Windows.UI.ViewManagement.ApplicationView.value);
                    }
                },
            }),
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Renders title style 1
    WinJS.Namespace.define("BingApps.UI", {
        TitleStyle1Renderer: {
            render: function (context) {
                var elements = {};
                var adjustments = [];

                var renderableData = context.renderableData;
                var auxiliaryData = context.auxiliaryData;
                var gridOptions = context.gridOptions;
                var columnWidth = gridOptions.columnWidth;
                var titleBlock = renderableData.titleBlock;
                var cacheId = auxiliaryData.cacheId || "";
                var bookmarksList = auxiliaryData.bookmarksList;
                var viewportManager = auxiliaryData.viewportManager;

                // title block
                var titleBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(titleBlockElt, "titleBlock exclusion");
                elements["title"] = titleBlockElt;

                // title container
                var titleElt = document.createElement("div");
                WinJS.Utilities.addClass(titleElt, "title");
                titleBlockElt.appendChild(titleElt);

                // kicker
                var kicker = titleBlock.kicker;
                var kickerElt = document.createElement("div");
                WinJS.Utilities.addClass(kickerElt, "kicker");
                kickerElt.innerText = kicker;
                titleElt.appendChild(kickerElt);

                // headline
                var headline = titleBlock.headline;
                var headlineElt = document.createElement("h1");
                WinJS.Utilities.addClass(headlineElt, "headline");
                headlineElt.innerText = headline;
                titleElt.appendChild(headlineElt);

                // source logo block
                var sourceLogoBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(sourceLogoBlockElt, "sourceLogoBlock exclusion");
                elements["sourceLogo"] = sourceLogoBlockElt;

                // source logo image
                var publisher = titleBlock.publisher;
                if (publisher) {
                    var name = publisher.name;
                    var favicon = publisher.favicon;
                    if (favicon) {
                        var url = favicon.url;
                        var width = favicon.width;
                        var height = favicon.height;
                        var sourceLogoElt = document.createElement("div");
                        WinJS.Utilities.addClass(sourceLogoElt, "sourceLogo fitWidth");
                        var effectiveHeight = Math.min(height, 30);
                        var effectiveWidth = Math.min(effectiveHeight * width / height, columnWidth);
                        sourceLogoElt.style.width = effectiveWidth + "px";
                        sourceLogoElt.style.height = effectiveHeight + "px";
                        var imageCard = new BingApps.UI.ImageCard(sourceLogoElt, {
                            alternateText: name,
                            imageSource: {
                                url: url,
                                cacheId: cacheId
                            },
                            classification: "hidden",
                        });
                        sourceLogoBlockElt.appendChild(sourceLogoElt);
                    }
                }

                // byline block
                var bylineBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(bylineBlockElt, "bylineBlock exclusion");
                elements["byline"] = bylineBlockElt;

                // byline container
                var bylineElt = document.createElement("div");
                WinJS.Utilities.addClass(bylineElt, "byline");
                bylineBlockElt.appendChild(bylineElt);

                // author
                var author = titleBlock.author;
                var authorElt = document.createElement("div");
                WinJS.Utilities.addClass(authorElt, "author");
                authorElt.innerText = author;
                bylineElt.appendChild(authorElt);

                // date
                var date = titleBlock.date;
                var dateElt = document.createElement("div");
                WinJS.Utilities.addClass(dateElt, "date");
                dateElt.innerText = date;
                bylineElt.appendChild(dateElt);

                // anchor bar block
                var anchorBarBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(anchorBarBlockElt, "anchorBarBlock");
                elements["anchorBar"] = anchorBarBlockElt;

                // anchor bar
                var anchorBarElt = document.createElement("div");
                WinJS.Utilities.addClass(anchorBarElt, "anchorBar");
                anchorBarBlockElt.appendChild(anchorBarElt);

                // toc block
                var hasBookmarks = BingApps.UI.ArticleReaderUtils.hasBookmarks(context);
                if (hasBookmarks) {
                    var tocBlockElt = document.createElement("div");
                    WinJS.Utilities.addClass(tocBlockElt, "tocBlock exclusion");
                    elements["toc"] = tocBlockElt;

                    var tocElt = document.createElement("div");
                    tocBlockElt.appendChild(tocElt);
                    new BingApps.UI.Toc(tocElt, {
                        bookmarksList: bookmarksList,
                        viewportManager: viewportManager,
                    });
                }

                // adjustments for title, byline, and source logo
                adjustments.push(function (gridOptions) {
                    var titleBlockElt = elements["title"];
                    var bylineBlockElt = elements["byline"];
                    var sourceLogoBlockElt = elements["sourceLogo"];
                    var titleElt = titleBlockElt.querySelector(".title");
                    if (titleElt) {
                        if (hasBookmarks) {
                            var bylineElt = bylineBlockElt.querySelector(".byline");

                            // reset
                            titleElt.style.marginTop = "";
                            bylineElt.style.marginTop = "";

                            // meausure
                            var sourceLogoHeight = sourceLogoBlockElt.offsetHeight;
                            var titleHeight = titleBlockElt.offsetHeight;
                            var sourceLogoAndTitleHeight = sourceLogoHeight + titleHeight;

                            // move title down
                            titleElt.style.marginTop = sourceLogoHeight + "px";

                            // move byline down
                            bylineElt.style.marginTop = sourceLogoAndTitleHeight + "px";

                            var hasToc = BingApps.UI.ArticleReaderUtils.hasToc(gridOptions);
                            if (hasToc) {
                                var tocBlockElt = elements["toc"];
                                var tocElt = tocBlockElt.querySelector(".toc");
                                // move toc down
                                tocElt.style.marginTop = sourceLogoAndTitleHeight + "px";

                                // fix up toc, but reset toc styles before measuring
                                tocElt.style.height = "";
                                tocElt.setAttribute("data-column-type", "");
                                tocElt.style.marginBottom = "";

                                var tocHeight = tocElt.offsetHeight;
                                var columnHeight = gridOptions.columnHeight;
                                var availableHeight = columnHeight - sourceLogoAndTitleHeight;

                                if (tocHeight > availableHeight) {
                                    tocElt.setAttribute("data-column-type", "full");
                                    tocElt.style.height = availableHeight + "px";
                                }
                                else if (tocHeight <= availableHeight && tocHeight > availableHeight - 175) {
                                    tocElt.setAttribute("data-column-type", "full");
                                    tocElt.style.marginBottom = (availableHeight - tocHeight) + "px";
                                }
                                else {
                                    tocElt.setAttribute("data-column-type", "partial");
                                }
                            }
                        }
                        else {
                            // reset
                            titleElt.style.marginTop = "";

                            // meausure
                            var bylineHeight = bylineBlockElt.offsetHeight;

                            // move title down
                            titleElt.style.marginTop = bylineHeight + "px";

                            // fix up source logo
                            BingApps.UI.ArticleReaderUtils.setFixedElementHeight(sourceLogoBlockElt);
                        }
                    }
                });

                var renderData = {
                    elements: elements, // title, byline, sourceLogo, toc
                    adjustments: adjustments
                };
                return renderData;
            },

            calculateLayout: function (context) {
                var gridOptions = context.gridOptions;
                var columnCount = gridOptions.columnCount;
                var columnHeight = gridOptions.columnHeight;
                var auxiliaryData = context.auxiliaryData;
                var bookmarksList = auxiliaryData.bookmarksList;

                var exclusions = {};
                var layoutDelegates = {};

                // anchorBar - no exclusion
                layoutDelegates["anchorBar"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 1;
                    style.msGridRowSpan = 1;
                    style.msGridColumn = 2;
                    style.msGridColumnSpan = Math.min(2, columnCount) * 2 - 1;
                    style.msGridRowAlign = "start";
                };

                var hasToc = BingApps.UI.ArticleReaderUtils.hasToc(gridOptions);
                var hasBookmarks = BingApps.UI.ArticleReaderUtils.hasBookmarks(context);

                if (hasBookmarks) {
                    if (hasToc) {
                        // toc
                        exclusions["toc"] = {
                            column: 0,
                            columnSpan: 1,
                            rowAlign: "start",
                            height: columnHeight, // estimate toc at whole column
                        };
                        layoutDelegates["toc"] = function (elt) {
                            var exclusion = this.exclusions["toc"];
                            var style = elt.style;
                            style.msGridRow = 2;
                            style.msGridRowSpan = 2;
                            style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                            style.msGridColumnSpan = exclusion.columnSpan * 2 - 1;
                            style.msGridRowAlign = exclusion.rowAlign;
                            elt.setAttribute("data-block-visibility", "shown");
                        };
                    }
                    else {
                        layoutDelegates["toc"] = function (elt) {
                            elt.setAttribute("data-block-visibility", "hidden");
                        };

                    }

                    // title
                    exclusions["title"] = {
                        column: 0,
                        columnSpan: Math.min(2, columnCount),
                        rowAlign: "start",
                        height: 380,
                    };
                    layoutDelegates["title"] = function (elt) {
                        var exclusion = this.exclusions["title"];
                        var style = elt.style;
                        style.msGridRow = 2;
                        style.msGridRowSpan = 2;
                        style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                        style.msGridColumnSpan = exclusion.columnSpan * 2 - 1;
                        style.msGridRowAlign = exclusion.rowAlign;
                        style.zIndex = 2;
                    };

                    // byline
                    layoutDelegates["byline"] = function (elt) {
                        var style = elt.style;
                        style.msGridRow = 2;
                        style.msGridRowSpan = 2;
                        style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(Math.min(columnCount - 1, 1), columnCount);
                        style.msGridColumnSpan = 1;
                        style.msGridRowAlign = "start";
                        style.zIndex = 1;
                    };

                    // source logo
                    layoutDelegates["sourceLogo"] = function (elt) {
                        var gridRowAlign = "start";
                        var style = elt.style;
                        style.msGridRow = 2;
                        style.msGridRowSpan = 2;
                        style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(0, columnCount);
                        style.msGridColumnSpan = 1;
                        style.msGridRowAlign = gridRowAlign;
                        elt.setAttribute("data-location", gridRowAlign);
                    };

                }
                else {
                    // title
                    exclusions["title"] = {
                        column: 0,
                        columnSpan: Math.min(2, columnCount),
                        rowAlign: "start",
                        height: 350,
                    };
                    layoutDelegates["title"] = function (elt) {
                        var exclusion = this.exclusions["title"];
                        var style = elt.style;
                        style.msGridRow = 2;
                        style.msGridRowSpan = 2;
                        style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                        style.msGridColumnSpan = exclusion.columnSpan * 2 - 1;
                        style.msGridRowAlign = exclusion.rowAlign;
                        style.zIndex = 1;
                    };

                    // byline
                    layoutDelegates["byline"] = function (elt) {
                        var style = elt.style;
                        style.msGridRow = 2;
                        style.msGridRowSpan = 2;
                        style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(0, columnCount);
                        style.msGridColumnSpan = Math.min(2, columnCount) * 2 - 1;
                        style.msGridRowAlign = "start";
                        style.zIndex = 2;
                    };

                    // source logo
                    var renderableData = context.renderableData;
                    var titleBlock = renderableData.titleBlock;
                    var hasSourceLogo = BingApps.UI.ArticleReaderUtils.hasSourceLogo(titleBlock);
                    exclusions["sourceLogo"] = {
                        column: 0,
                        columnSpan: 1,
                        rowAlign: "end",
                        height: hasSourceLogo ? 60 : 0,
                    };
                    layoutDelegates["sourceLogo"] = function (elt) {
                        var exclusion = this.exclusions["sourceLogo"];
                        var gridRowAlign = exclusion.rowAlign;
                        var style = elt.style;
                        style.msGridRow = 2;
                        style.msGridRowSpan = 2;
                        style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                        style.msGridColumnSpan = exclusion.columnSpan * 2 - 1;
                        style.msGridRowAlign = gridRowAlign;
                        elt.setAttribute("data-location", gridRowAlign);
                    };
                }

                var layoutData = {
                    exclusions: exclusions,
                    layoutDelegates: layoutDelegates,
                };

                return layoutData;
            },
        }
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Renders title style 2 - landscape image
    WinJS.Namespace.define("BingApps.UI", {
        TitleStyle2Renderer: {
            render: function (context) {
                var that = this;

                var elements = {};
                var adjustments = [];

                var gridOptions = context.gridOptions;
                var columnWidth = gridOptions.columnWidth;
                var auxiliaryData = context.auxiliaryData;
                var cacheId = auxiliaryData.cacheId || "";

                var renderableData = context.renderableData;
                var titleBlock = renderableData.titleBlock;

                // title block
                var titleBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(titleBlockElt, "titleBlock exclusion");
                elements["title"] = titleBlockElt;

                // title container
                var titleElt = document.createElement("div");
                WinJS.Utilities.addClass(titleElt, "title");
                titleBlockElt.appendChild(titleElt);

                // kicker
                var kicker = titleBlock.kicker;
                var kickerElt = document.createElement("div");
                WinJS.Utilities.addClass(kickerElt, "kicker");
                kickerElt.innerText = kicker;
                titleElt.appendChild(kickerElt);

                // headline
                var headline = titleBlock.headline;
                var headlineElt = document.createElement("h1");
                WinJS.Utilities.addClass(headlineElt, "headline");
                headlineElt.innerText = headline;
                titleElt.appendChild(headlineElt);

                // source logo block
                var sourceLogoBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(sourceLogoBlockElt, "sourceLogoBlock exclusion");
                elements["sourceLogo"] = sourceLogoBlockElt;

                // source logo image
                var publisher = titleBlock.publisher;
                if (publisher) {
                    var name = publisher.name;
                    var favicon = publisher.favicon;
                    if (favicon) {
                        var faviconUrl = favicon.url;
                        var width = favicon.width;
                        var height = favicon.height;
                        var sourceLogoElt = document.createElement("div");
                        WinJS.Utilities.addClass(sourceLogoElt, "sourceLogo fitWidth");
                        var effectiveHeight = Math.min(height, 30);
                        var effectiveWidth = Math.min(effectiveHeight * width / height, columnWidth);
                        sourceLogoElt.style.width = effectiveWidth + "px";
                        sourceLogoElt.style.height = effectiveHeight + "px";
                        var sourceImageCard = new BingApps.UI.ImageCard(sourceLogoElt, {
                            alternateText: name,
                            imageSource: {
                                url: faviconUrl,
                                cacheId: cacheId,
                            },
                            classification: "hidden",
                        });
                        sourceLogoBlockElt.appendChild(sourceLogoElt);
                    }
                }

                // byline block
                var bylineBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(bylineBlockElt, "bylineBlock exclusion");
                elements["byline"] = bylineBlockElt;

                // byline container
                var bylineElt = document.createElement("div");
                WinJS.Utilities.addClass(bylineElt, "byline");
                bylineBlockElt.appendChild(bylineElt);

                // author
                var author = titleBlock.author;
                var authorElt = document.createElement("div");
                WinJS.Utilities.addClass(authorElt, "author");
                authorElt.innerText = author;
                bylineElt.appendChild(authorElt);

                // date
                var date = titleBlock.date;
                var dateElt = document.createElement("div");
                WinJS.Utilities.addClass(dateElt, "date");
                dateElt.innerText = date;
                bylineElt.appendChild(dateElt);

                // anchor bar block
                var anchorBarBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(anchorBarBlockElt, "anchorBarBlock");
                elements["anchorBar"] = anchorBarBlockElt;

                // anchor bar
                var anchorBarElt = document.createElement("div");
                WinJS.Utilities.addClass(anchorBarElt, "anchorBar");
                anchorBarBlockElt.appendChild(anchorBarElt);

                // column blocker block
                var columnBlockerBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(columnBlockerBlockElt, "columnBlockerBlock exclusion");
                elements["columnBlocker"] = columnBlockerBlockElt;

                // image block
                var imageBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(imageBlockElt, "imageBlock exclusion");
                elements["image"] = imageBlockElt;

                // image container
                var imageContainerElt = document.createElement("div");
                WinJS.Utilities.addClass(imageContainerElt, "imageContainer");
                imageBlockElt.appendChild(imageContainerElt);

                // image
                var image = titleBlock.titleImage.image;
                var attribution = image.attribution || "";
                var caption = image.caption || "";
                var altText = image.altText || "";
                var captionAndAttribution = BingApps.UI.ArticleReaderUtils.combineCaptionAndAttribution(caption, attribution);

                var imageSource = BingApps.UI.ArticleReaderUtils.getImageCardSource(image, cacheId);
                var imageElt = document.createElement("div");
                WinJS.Utilities.addClass(imageElt, "image");
                var imageCard = new BingApps.UI.ImageCard(imageElt, {
                    alternateText: altText,
                    classification: "medium",
                    imageSource: imageSource,
                });
                imageContainerElt.appendChild(imageElt);

                // adjustments
                adjustments.push(function (gridOptions) {
                    var topMargin = gridOptions.topMargin;
                    var isPortraitLayout = that._isPortraitLayout(gridOptions);
                    var isBigLandscapeLayout = that._isBigLandscapeLayout(gridOptions);

                    // fix up source logo because it's bottom aligned
                    var sourceLogoBlockElt = elements["sourceLogo"];
                    BingApps.UI.ArticleReaderUtils.setFixedElementHeight(sourceLogoBlockElt);

                    // fix up anchor bar because it's bottom aligned
                    var anchorBarBlockElt = elements["anchorBar"];
                    BingApps.UI.ArticleReaderUtils.setFixedElementHeight(anchorBarBlockElt);

                    var imageBlockElt = elements["image"];
                    var titleBlockElt = elements["title"];
                    var bylineBlockElt = elements["byline"];
                    var titleElt = titleBlockElt.querySelector(".title");
                    var bylineElt = bylineBlockElt.querySelector(".byline");
                    if (titleElt && bylineElt) {
                        // reset
                        titleElt.style.marginTop = "";
                        bylineElt.style.marginTop = "";

                        // measure
                        var imageHeight = imageBlockElt.offsetHeight - topMargin;
                        var titleHeight;

                        if (isPortraitLayout) {
                            // move title down
                            titleElt.style.marginTop = imageHeight + "px";

                            // measure
                            titleHeight = titleBlockElt.offsetHeight;

                            // move byline down
                            bylineElt.style.marginTop = titleHeight + "px";
                        }
                        else {
                            // move title down
                            titleElt.style.marginTop = imageHeight + "px";

                            if (isBigLandscapeLayout) {
                                // measure
                                titleHeight = titleBlockElt.offsetHeight;

                                // move byline down
                                bylineElt.style.marginTop = titleHeight + "px";
                            }
                        }
                    }
                });

                var renderData = {
                    elements: elements,
                    adjustments: adjustments
                };
                return renderData;
            },

            calculateLayout: function (context) {
                var gridOptions = context.gridOptions;
                var columnCount = gridOptions.columnCount;
                var columnMargin = gridOptions.columnMargin;
                var columnWidth = gridOptions.columnWidth;

                var exclusions = {};
                var layoutDelegates = {};

                var isPortraitLayout = this._isPortraitLayout(gridOptions);
                var isBigLandscapeLayout = this._isBigLandscapeLayout(gridOptions);

                if (isPortraitLayout) {
                    this._calculateLayoutPortrait(context, exclusions, layoutDelegates);
                }
                else if (isBigLandscapeLayout) {
                    this._calculateLayoutBigLandscape(context, exclusions, layoutDelegates);
                }
                else {
                    this._calculateLayoutLandscape(context, exclusions, layoutDelegates);
                }

                var layoutData = {
                    exclusions: exclusions,
                    layoutDelegates: layoutDelegates,
                };

                return layoutData;
            },

            _isPortraitLayout: function (gridOptions) {
                var isPortraitLayout = gridOptions.pageWidth < gridOptions.pageHeight;
                return isPortraitLayout;
            },

            _isBigLandscapeLayout: function (gridOptions) {
                var isBigLandscapeLayout = !this._isPortraitLayout(gridOptions) && gridOptions.pageHeight > 900;
                return isBigLandscapeLayout;
            },

            _calculateLayoutPortrait: function (context, exclusions, layoutDelegates) {
                var gridOptions = context.gridOptions;
                var leftMargin = gridOptions.leftMargin;
                var rightMargin = gridOptions.rightMargin;
                var columnWidth = gridOptions.columnWidth;
                var columnHeight = gridOptions.columnHeight;
                var columnMargin = gridOptions.columnMargin;
                var columnCount = gridOptions.columnCount;

                // anchor bar
                layoutDelegates["anchorBar"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 4;
                    style.msGridRowSpan = 1;
                    style.msGridColumn = 2;
                    style.msGridColumnSpan = columnCount * 2 - 1;
                    style.msGridRowAlign = "end";
                };

                // source logo
                var renderableData = context.renderableData;
                var titleBlock = renderableData.titleBlock;
                var hasSourceLogo = BingApps.UI.ArticleReaderUtils.hasSourceLogo(titleBlock);
                exclusions["sourceLogo"] = {
                    column: 0,
                    columnSpan: 1,
                    rowAlign: "end",
                    height: hasSourceLogo ? 80 : 0,
                };
                layoutDelegates["sourceLogo"] = function (elt) {
                    var gridRowAlign = "end";
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(0, columnCount);
                    style.msGridColumnSpan = 1;
                    style.msGridRowAlign = gridRowAlign;
                    elt.setAttribute("data-location", gridRowAlign);
                };

                // column blocker
                layoutDelegates["columnBlocker"] = function (elt) {
                    var style = elt.style;
                    style.zIndex = 1;
                    elt.setAttribute("data-block-visibility", "hidden");
                };

                // image
                var imageWidth = leftMargin + (columnCount * columnWidth) + ((columnCount - 1) * columnMargin) + rightMargin;
                var imageHeightAndFit = this._getImageHeightAndFit(context, imageWidth);
                var imageHeight = imageHeightAndFit.height;
                var imageFit = imageHeightAndFit.fit;

                exclusions["image"] = {
                    column: 0,
                    columnSpan: columnCount,
                    height: columnHeight / 2, // estimate that everything is going to take half a column
                    rowAlign: "start",
                };
                layoutDelegates["image"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 1;
                    style.msGridRowSpan = 4;
                    style.msGridRowAlign = "start";
                    style.msGridColumn = 1;
                    style.msGridColumnSpan = columnCount * 2 + 1;
                    style.zIndex = 3;
                    var image = elt.querySelector(".image");
                    if (image) {
                        var imageStyle = image.style;
                        image.setAttribute("data-fit", imageFit);
                        imageStyle.width = imageWidth + "px";
                        imageStyle.height = imageHeight + "px";
                    }
                };

                // title
                layoutDelegates["title"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridRowAlign = "start";
                    style.msGridColumn = 2;
                    style.msGridColumnSpan = columnCount * 2 - 1;
                    style.zIndex = 2;

                    var headlineElt = elt.querySelector(".headline");
                    if (headlineElt) {
                        headlineElt.style.width = "";
                    }
                };

                // byline 
                layoutDelegates["byline"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridRowAlign = "start";
                    style.msGridColumn = 2;
                    style.msGridColumnSpan = columnCount * 2 - 1;
                    style.zIndex = 1;
                };
            },

            _calculateLayoutLandscape: function (context, exclusions, layoutDelegates) {
                var gridOptions = context.gridOptions;
                var columnWidth = gridOptions.columnWidth;
                var columnHeight = gridOptions.columnHeight;
                var columnMargin = gridOptions.columnMargin;
                var columnCount = gridOptions.columnCount;

                // anchorbar
                layoutDelegates["anchorBar"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 4;
                    style.msGridRowSpan = 1;
                    style.msGridColumn = 2;
                    style.msGridColumnSpan = 3;
                    style.msGridRowAlign = "end";
                    style.width = (columnMargin + (columnWidth * 1.5)) + "px";
                    style.msGridColumnAlign = "start";
                };

                // source logo
                layoutDelegates["sourceLogo"] = function (elt) {
                    var gridRowAlign = "end";
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(0, columnCount);
                    style.msGridColumnSpan = 1;
                    style.msGridRowAlign = gridRowAlign;
                    elt.setAttribute("data-location", gridRowAlign);
                };

                // column blocker
                exclusions["columnBlocker"] = {
                    column: 0,
                    columnSpan: 2,
                    height: columnHeight,
                    rowAlign: "start",
                };
                layoutDelegates["columnBlocker"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridColumn = 2;
                    style.msGridColumnSpan = 3;
                    style.zIndex = 1;
                    elt.setAttribute("data-block-visibility", "shown");
                };

                // image
                var imageWidth = columnMargin + (2 * columnWidth);
                var imageHeightAndFit = this._getImageHeightAndFit(context, imageWidth);
                var imageHeight = imageHeightAndFit.height;
                var imageFit = imageHeightAndFit.fit;

                layoutDelegates["image"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 1;
                    style.msGridRowSpan = 4;
                    style.msGridRowAlign = "start";
                    style.msGridColumn = 2;
                    style.msGridColumnSpan = 3;
                    style.zIndex = 3;
                    var image = elt.querySelector(".image");
                    if (image) {
                        image.setAttribute("data-fit", imageFit);
                        var imageStyle = image.style;
                        imageStyle.width = imageWidth + "px";
                        imageStyle.height = imageHeight + "px";
                    }
                };

                // title
                layoutDelegates["title"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridRowAlign = "start";
                    style.msGridColumn = 2;
                    style.msGridColumnSpan = 3;
                    style.zIndex = 2;

                    var headlineElt = elt.querySelector(".headline");
                    if (headlineElt) {
                        headlineElt.style.width = (columnMargin + (columnWidth * 1.66)) + "px";
                    }
                };

                // byline 
                exclusions["byline"] = {
                    column: 2,
                    columnSpan: 1,
                    rowAlign: "start",
                    height: 60,
                };
                layoutDelegates["byline"] = function (elt) {
                    var exclusion = this.exclusions["byline"];
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowAlign = exclusion.rowAlign;
                    style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                    style.msGridColumnSpan = exclusion.columnSpan * 2 - 1;
                    style.zIndex = 1;
                };
            },

            _calculateLayoutBigLandscape: function (context, exclusions, layoutDelegates) {
                var gridOptions = context.gridOptions;
                var columnWidth = gridOptions.columnWidth;
                var columnHeight = gridOptions.columnHeight;
                var columnMargin = gridOptions.columnMargin;
                var columnCount = gridOptions.columnCount;

                // anchorbar
                layoutDelegates["anchorBar"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 4;
                    style.msGridRowSpan = 1;
                    style.msGridColumn = 2;
                    style.msGridColumnSpan = 3;
                    style.msGridRowAlign = "end";
                    style.width = (columnMargin + (columnWidth * 1.5)) + "px";
                    style.msGridColumnAlign = "start";
                };

                // source logo
                layoutDelegates["sourceLogo"] = function (elt) {
                    var gridRowAlign = "end";
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(0, columnCount);
                    style.msGridColumnSpan = 1;
                    style.msGridRowAlign = gridRowAlign;
                    elt.setAttribute("data-location", gridRowAlign);
                };

                // column blocker
                layoutDelegates["columnBlocker"] = function (elt) {
                    var style = elt.style;
                    style.zIndex = 1;
                    elt.setAttribute("data-block-visibility", "hidden");
                };

                // image
                var imageWidth = columnMargin + (2 * columnWidth);
                var imageHeightAndFit = this._getImageHeightAndFit(context, imageWidth);
                var imageHeight = imageHeightAndFit.height;
                var imageFit = imageHeightAndFit.fit;

                exclusions["image"] = {
                    column: 0,
                    columnSpan: 2,
                    rowAlign: "start",
                    height: imageHeight + 250,
                };
                layoutDelegates["image"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 1;
                    style.msGridRowSpan = 4;
                    style.msGridRowAlign = "start";
                    style.msGridColumn = 2;
                    style.msGridColumnSpan = 3;
                    style.zIndex = 3;
                    var image = elt.querySelector(".image");
                    if (image) {
                        image.setAttribute("data-fit", imageFit);
                        var imageStyle = image.style;
                        imageStyle.width = imageWidth + "px";
                        imageStyle.height = imageHeight + "px";
                    }
                };

                // title
                layoutDelegates["title"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridRowAlign = "start";
                    style.msGridColumn = 2;
                    style.msGridColumnSpan = 3;
                    style.zIndex = 2;

                    var headlineElt = elt.querySelector(".headline");
                    if (headlineElt) {
                        headlineElt.style.width = (columnMargin + (columnWidth * 1.66)) + "px";
                    }
                };

                // byline 
                layoutDelegates["byline"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowAlign = "start";
                    style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(0, columnCount);
                    style.msGridColumnSpan = 1;
                    style.zIndex = 1;
                };
            },

            _getImageHeightAndFit: function (context, imageWidth) {
                var renderableData = context.renderableData;
                var titleBlock = renderableData.titleBlock;
                var image = titleBlock.titleImage.image;
                var imageResource = BingApps.UI.ArticleReaderUtils.getImageResource(image);
                var originalWidth = parseInt(imageResource.width);
                var originalHeight = parseInt(imageResource.height);
                var imageHeight = imageWidth * originalHeight / originalWidth;
                var aspectRatio = imageWidth / imageHeight;
                var imageFit = "both";

                if (aspectRatio < 1.62) {
                    imageFit = "width";
                    imageHeight = imageWidth / 1.62;
                }
                else if (aspectRatio > 1.62) {
                    imageFit = "height";
                    imageHeight = imageWidth / 1.62;
                }

                return {
                    height: imageHeight,
                    fit: imageFit,
                };
            },
        }
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Renders title style 9 - portrait image
    WinJS.Namespace.define("BingApps.UI", {
        TitleStyle9Renderer: {
            render: function (context) {
                var that = this;

                var elements = {};
                var adjustments = [];

                var gridOptions = context.gridOptions;
                var columnWidth = gridOptions.columnWidth;
                var auxiliaryData = context.auxiliaryData;
                var cacheId = auxiliaryData.cacheId || "";

                var renderableData = context.renderableData;
                var titleBlock = renderableData.titleBlock;

                // title block
                var titleBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(titleBlockElt, "titleBlock exclusion");
                elements["title"] = titleBlockElt;

                // title container
                var titleElt = document.createElement("div");
                WinJS.Utilities.addClass(titleElt, "title");
                titleBlockElt.appendChild(titleElt);

                // author
                var author = titleBlock.author;
                var authorElt = document.createElement("div");
                WinJS.Utilities.addClass(authorElt, "author");
                authorElt.innerText = author;
                titleElt.appendChild(authorElt);

                // date
                var date = titleBlock.date;
                var dateElt = document.createElement("div");
                WinJS.Utilities.addClass(dateElt, "date");
                dateElt.innerText = date;
                titleElt.appendChild(dateElt);

                // kicker
                var kicker = titleBlock.kicker;
                var kickerElt = document.createElement("div");
                WinJS.Utilities.addClass(kickerElt, "kicker");
                kickerElt.innerText = kicker;
                titleElt.appendChild(kickerElt);

                // headline
                var headline = titleBlock.headline;
                var headlineElt = document.createElement("h1");
                WinJS.Utilities.addClass(headlineElt, "headline");
                headlineElt.innerText = headline;
                titleElt.appendChild(headlineElt);

                // source logo block
                var sourceLogoBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(sourceLogoBlockElt, "sourceLogoBlock exclusion");
                elements["sourceLogo"] = sourceLogoBlockElt;

                // source logo image
                var publisher = titleBlock.publisher;
                if (publisher) {
                    var name = publisher.name;
                    var favicon = publisher.favicon;
                    if (favicon) {
                        var faviconUrl = favicon.url;
                        var width = favicon.width;
                        var height = favicon.height;
                        var sourceLogoElt = document.createElement("div");
                        WinJS.Utilities.addClass(sourceLogoElt, "sourceLogo fitWidth");
                        var effectiveHeight = Math.min(height, 30);
                        var effectiveWidth = Math.min(effectiveHeight * width / height, columnWidth);
                        sourceLogoElt.style.width = effectiveWidth + "px";
                        sourceLogoElt.style.height = effectiveHeight + "px";
                        var sourceImageCard = new BingApps.UI.ImageCard(sourceLogoElt, {
                            alternateText: name,
                            imageSource: {
                                url: faviconUrl,
                                cacheId: cacheId,
                            },
                            classification: "hidden",
                        });
                        sourceLogoBlockElt.appendChild(sourceLogoElt);
                    }
                }

                // anchor bar block
                var anchorBarBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(anchorBarBlockElt, "anchorBarBlock");
                elements["anchorBar"] = anchorBarBlockElt;

                // anchor bar
                var anchorBarElt = document.createElement("div");
                WinJS.Utilities.addClass(anchorBarElt, "anchorBar");
                anchorBarBlockElt.appendChild(anchorBarElt);

                // column blocker block
                var columnBlockerBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(columnBlockerBlockElt, "columnBlockerBlock exclusion");
                elements["columnBlocker"] = columnBlockerBlockElt;

                // image block
                var imageBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(imageBlockElt, "imageBlock exclusion");
                elements["image"] = imageBlockElt;

                // image container
                var imageContainerElt = document.createElement("div");
                WinJS.Utilities.addClass(imageContainerElt, "imageContainer");
                imageBlockElt.appendChild(imageContainerElt);

                // image
                var image = titleBlock.titleImage.image;
                var attribution = image.attribution || "";
                var caption = image.caption || "";
                var altText = image.altText || "";
                var captionAndAttribution = BingApps.UI.ArticleReaderUtils.combineCaptionAndAttribution(caption, attribution);

                var imageElt = document.createElement("div");
                WinJS.Utilities.addClass(imageElt, "image");
                var imageSource = BingApps.UI.ArticleReaderUtils.getImageCardSource(image, cacheId);
                var imageCard = new BingApps.UI.ImageCard(imageElt, {
                    alternateText: altText,
                    classification: "medium",
                    imageSource: imageSource,
                });
                imageContainerElt.appendChild(imageElt);

                // adjustments
                adjustments.push(function (gridOptions) {
                    var isPortraitLayout = that._isPortraitLayout(gridOptions);

                    // fix up source logo because it's bottom aligned
                    var sourceLogoBlockElt = elements["sourceLogo"];
                    BingApps.UI.ArticleReaderUtils.setFixedElementHeight(sourceLogoBlockElt);

                    var imageBlockElt = elements["image"];
                    var imageElt = imageBlockElt.querySelector(".image");
                    if (imageElt) {
                        // reset
                        imageElt.style.marginTop = "";

                        if (isPortraitLayout) {
                            var titleBlockElt = elements["title"];

                            // measure
                            var titleHeight = titleBlockElt.offsetHeight;

                            // move image down
                            imageElt.style.marginTop = titleHeight + "px";
                        }
                    }
                });

                var renderData = {
                    elements: elements,
                    adjustments: adjustments
                };
                return renderData;

            },

            calculateLayout: function (context) {
                var gridOptions = context.gridOptions;

                var exclusions = {};
                var layoutDelegates = {};

                var isPortraitLayout = this._isPortraitLayout(gridOptions);

                if (isPortraitLayout) {
                    this._calculateLayoutPortrait(context, exclusions, layoutDelegates);
                }
                else {
                    this._calculateLayoutLandscape(context, exclusions, layoutDelegates);
                }

                var layoutData = {
                    exclusions: exclusions,
                    layoutDelegates: layoutDelegates,
                };

                return layoutData;
            },

            _isPortraitLayout: function (gridOptions) {
                var isPortraitLayout = gridOptions.pageWidth < gridOptions.pageHeight;
                return isPortraitLayout;
            },

            _calculateLayoutPortrait: function (context, exclusions, layoutDelegates) {
                var gridOptions = context.gridOptions;
                var columnHeight = gridOptions.columnHeight;
                var columnCount = gridOptions.columnCount;
                var leftMargin = gridOptions.leftMargin;
                var columnWidth = gridOptions.columnWidth;
                var titleColumnSpan = Math.min(3, columnCount); // cap at 3

                // column blocker
                layoutDelegates["columnBlocker"] = function (elt) {
                    elt.setAttribute("data-block-visibility", "hidden");
                };

                // title
                exclusions["title"] = {
                    column: 0,
                    columnSpan: titleColumnSpan,
                    height: columnHeight / 2,
                    rowAlign: "start",
                };
                layoutDelegates["title"] = function (elt) {
                    var exclusion = this.exclusions["title"];
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridRowAlign = "start";
                    style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                    style.msGridColumnSpan = exclusion.columnSpan * 2 - 1;
                    style.zIndex = 1;
                };

                // anchor bar - no exclusion
                layoutDelegates["anchorBar"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 1;
                    style.msGridRowSpan = 1;
                    style.msGridColumn = 2;
                    style.msGridColumnSpan = titleColumnSpan * 2 - 1;
                    style.msGridRowAlign = "start";
                };

                // source logo
                var renderableData = context.renderableData;
                var titleBlock = renderableData.titleBlock;
                var hasSourceLogo = BingApps.UI.ArticleReaderUtils.hasSourceLogo(titleBlock);
                exclusions["sourceLogo"] = {
                    column: 0,
                    columnSpan: 1,
                    rowAlign: "end",
                    height: hasSourceLogo ? 80 : 0,
                };
                layoutDelegates["sourceLogo"] = function (elt) {
                    var gridRowAlign = "end";
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(0, columnCount);
                    style.msGridColumnSpan = 1;
                    style.msGridRowAlign = gridRowAlign;
                    style.zIndex = 1;
                    elt.setAttribute("data-location", gridRowAlign);
                };

                // image
                var imageWidth = leftMargin + (columnWidth < 550 ? columnWidth : columnWidth * 0.5);
                var imageHeightAndFit = this._getImageHeightAndFit(context, imageWidth, (2 / 3));
                var imageHeight = imageHeightAndFit.height;
                var imageFit = imageHeightAndFit.fit;

                layoutDelegates["image"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 4;
                    style.msGridRowAlign = "start";
                    style.msGridColumn = 1;
                    style.msGridColumnSpan = 2;
                    style.msGridColumnAlign = "start";
                    elt.setAttribute("data-layout", "portrait");

                    var image = elt.querySelector(".image");
                    if (image) {
                        image.setAttribute("data-fit", imageFit);
                        var imageStyle = image.style;
                        imageStyle.width = imageWidth + "px";
                        imageStyle.height = imageHeight + "px";
                    }
                };

            },

            _calculateLayoutLandscape: function (context, exclusions, layoutDelegates) {
                var gridOptions = context.gridOptions;
                var columnHeight = gridOptions.columnHeight;
                var columnCount = gridOptions.columnCount;
                var leftMargin = gridOptions.leftMargin;
                var columnWidth = gridOptions.columnWidth;
                var topMargin = gridOptions.topMargin;
                var bottomMargin = gridOptions.bottomMargin;
                var titleColumnSpan = Math.min(3, columnCount - 1); // cap at 3

                // column blocker
                exclusions["columnBlocker"] = {
                    column: 0,
                    columnSpan: 1,
                    height: columnHeight,
                    rowAlign: "start",
                };
                layoutDelegates["columnBlocker"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 1;
                    style.msGridRowSpan = 4;
                    style.msGridColumn = 1;
                    style.msGridColumnSpan = 2;
                    elt.setAttribute("data-block-visibility", "shown");
                };

                // title
                exclusions["title"] = {
                    column: 1,
                    columnSpan: titleColumnSpan,
                    height: columnHeight / 2,
                    rowAlign: "start",
                };
                layoutDelegates["title"] = function (elt) {
                    var exclusion = this.exclusions["title"];
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridRowAlign = "start";
                    style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                    style.msGridColumnSpan = exclusion.columnSpan * 2 - 1;
                    style.zIndex = 1;
                };

                // anchor bar - no exclusion
                layoutDelegates["anchorBar"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 1;
                    style.msGridRowSpan = 1;
                    style.msGridColumn = 4;
                    style.msGridColumnSpan = titleColumnSpan * 2 - 1;
                    style.msGridRowAlign = "start";
                };

                // source logo
                var renderableData = context.renderableData;
                var titleBlock = renderableData.titleBlock;
                var hasSourceLogo = BingApps.UI.ArticleReaderUtils.hasSourceLogo(titleBlock);
                exclusions["sourceLogo"] = {
                    column: 1,
                    columnSpan: 1,
                    rowAlign: "end",
                    height: hasSourceLogo ? 80 : 0,
                };
                layoutDelegates["sourceLogo"] = function (elt) {
                    var gridRowAlign = "end";
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(1, columnCount);
                    style.msGridColumnSpan = 1;
                    style.msGridRowAlign = gridRowAlign;
                    style.zIndex = 1;
                    elt.setAttribute("data-location", gridRowAlign);
                };


                // image
                var imageWidth = leftMargin + columnWidth;
                var targetAspectRatio = Math.max((2 / 3) / 1.1, (imageWidth / (columnHeight + topMargin + bottomMargin))); // allow for 10% crop
                var imageHeightAndFit = this._getImageHeightAndFit(context, imageWidth, targetAspectRatio);
                var imageHeight = imageHeightAndFit.height;
                var imageFit = imageHeightAndFit.fit;

                layoutDelegates["image"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 1;
                    style.msGridRowSpan = 4;
                    style.msGridRowAlign = "start";
                    style.msGridColumn = 1;
                    style.msGridColumnSpan = 2;
                    elt.setAttribute("data-layout", "landscape");

                    var image = elt.querySelector(".image");
                    if (image) {
                        image.setAttribute("data-fit", imageFit);
                        var imageStyle = image.style;
                        imageStyle.width = imageWidth + "px";
                        imageStyle.height = imageHeight + "px";
                    }
                };

            },

            _getImageHeightAndFit: function (context, imageWidth, targetAspectRatio) {
                var renderableData = context.renderableData;
                var titleBlock = renderableData.titleBlock;
                var image = titleBlock.titleImage.image;
                var imageResource = BingApps.UI.ArticleReaderUtils.getImageResource(image);
                var originalWidth = parseInt(imageResource.width);
                var originalHeight = parseInt(imageResource.height);
                var imageHeight = imageWidth * originalHeight / originalWidth;
                var aspectRatio = imageWidth / imageHeight;
                var imageFit = "both";

                if (aspectRatio < targetAspectRatio) {
                    imageFit = "width";
                    imageHeight = imageWidth / targetAspectRatio;
                }
                else if (aspectRatio > targetAspectRatio) {
                    imageFit = "height";
                    imageHeight = imageWidth / targetAspectRatio;
                }

                return {
                    height: imageHeight,
                    fit: imageFit,
                };
            },

        }
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Renders title style 100
    WinJS.Namespace.define("BingApps.UI", {
        TitleStyle100Renderer: {
            render: function (context) {
                var elements = {};
                var adjustments = [];

                var renderableData = context.renderableData;
                var auxiliaryData = context.auxiliaryData;
                var gridOptions = context.gridOptions;
                var columnWidth = gridOptions.columnWidth;
                var titleBlock = renderableData.titleBlock;
                var cacheId = auxiliaryData.cacheId || "";
                var bookmarksList = auxiliaryData.bookmarksList;
                var viewportManager = auxiliaryData.viewportManager;

                // title block
                var titleBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(titleBlockElt, "titleBlock exclusion");
                elements["title"] = titleBlockElt;

                // title container
                var titleElt = document.createElement("div");
                WinJS.Utilities.addClass(titleElt, "title");
                titleBlockElt.appendChild(titleElt);

                // kicker
                var kicker = titleBlock.kicker;
                var kickerElt = document.createElement("div");
                WinJS.Utilities.addClass(kickerElt, "kicker");
                kickerElt.innerText = kicker;
                titleElt.appendChild(kickerElt);

                // headline
                var headline = titleBlock.headline;
                var headlineElt = document.createElement("h1");
                WinJS.Utilities.addClass(headlineElt, "headline");
                headlineElt.innerText = headline;
                titleElt.appendChild(headlineElt);

                // byline container
                var bylineElt = document.createElement("div");
                WinJS.Utilities.addClass(bylineElt, "byline");
                titleBlockElt.appendChild(bylineElt);

                // author
                var author = titleBlock.author;
                var authorElt = document.createElement("div");
                WinJS.Utilities.addClass(authorElt, "author");
                authorElt.innerText = author;
                bylineElt.appendChild(authorElt);

                // date
                var date = titleBlock.date;
                var dateElt = document.createElement("div");
                WinJS.Utilities.addClass(dateElt, "date");
                dateElt.innerText = date;
                bylineElt.appendChild(dateElt);

                // source logo block
                var sourceLogoBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(sourceLogoBlockElt, "sourceLogoBlock exclusion");
                elements["sourceLogo"] = sourceLogoBlockElt;

                // source logo image
                var publisher = titleBlock.publisher;
                if (publisher) {
                    var name = publisher.name;
                    var favicon = publisher.favicon;
                    if (favicon) {
                        var url = favicon.url;
                        var width = favicon.width;
                        var height = favicon.height;
                        var sourceLogoElt = document.createElement("div");
                        WinJS.Utilities.addClass(sourceLogoElt, "sourceLogo fitWidth");
                        var effectiveHeight = Math.min(height, 30);
                        var effectiveWidth = Math.min(effectiveHeight * width / height, columnWidth);
                        sourceLogoElt.style.width = effectiveWidth + "px";
                        sourceLogoElt.style.height = effectiveHeight + "px";
                        var imageCard = new BingApps.UI.ImageCard(sourceLogoElt, {
                            alternateText: name,
                            imageSource: {
                                url: url,
                                cacheId: cacheId
                            },
                            classification: "hidden",
                        });
                        sourceLogoBlockElt.appendChild(sourceLogoElt);
                    }
                }

                // anchor bar block
                var anchorBarBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(anchorBarBlockElt, "anchorBarBlock");
                elements["anchorBar"] = anchorBarBlockElt;

                // anchor bar
                var anchorBarElt = document.createElement("div");
                WinJS.Utilities.addClass(anchorBarElt, "anchorBar");
                anchorBarBlockElt.appendChild(anchorBarElt);

                // adjustments for title, byline, and source logo
                adjustments.push(function (gridOptions) {
                    // fix up source logo
                    BingApps.UI.ArticleReaderUtils.setFixedElementHeight(sourceLogoBlockElt);
                    
                });

                var renderData = {
                    elements: elements, // title, byline, sourceLogo
                    adjustments: adjustments
                };
                return renderData;
            },

            calculateLayout: function (context) {
                var gridOptions = context.gridOptions;
                var columnCount = gridOptions.columnCount;
                var columnHeight = gridOptions.columnHeight;
                var auxiliaryData = context.auxiliaryData;
                var bookmarksList = auxiliaryData.bookmarksList;

                var exclusions = {};
                var layoutDelegates = {};

                // anchorBar - no exclusion
                layoutDelegates["anchorBar"] = function (elt) {
                    var style = elt.style;
                    style.msGridRow = 1;
                    style.msGridRowSpan = 1;
                    style.msGridColumn = 2;
                    style.msGridColumnSpan = Math.min(2, columnCount) * 2 - 1;
                    style.msGridRowAlign = "start";
                };
                                
                // title
                exclusions["title"] = {
                    column: 0,
                    columnSpan: Math.min(2, columnCount),
                    rowAlign: "start",
                    height: 350,
                };
                layoutDelegates["title"] = function (elt) {
                    var exclusion = this.exclusions["title"];
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                    style.msGridColumnSpan = exclusion.columnSpan * 2 - 1;
                    style.msGridRowAlign = exclusion.rowAlign;
                    style.zIndex = 1;
                };

                // source logo
                var renderableData = context.renderableData;
                var titleBlock = renderableData.titleBlock;
                var hasSourceLogo = BingApps.UI.ArticleReaderUtils.hasSourceLogo(titleBlock);
                exclusions["sourceLogo"] = {
                    column: 0,
                    columnSpan: 1,
                    rowAlign: "end",
                    height: hasSourceLogo ? 60 : 0,
                };
                layoutDelegates["sourceLogo"] = function (elt) {
                    var exclusion = this.exclusions["sourceLogo"];
                    var gridRowAlign = exclusion.rowAlign;
                    var style = elt.style;
                    style.msGridRow = 2;
                    style.msGridRowSpan = 2;
                    style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                    style.msGridColumnSpan = exclusion.columnSpan * 2 - 1;
                    style.msGridRowAlign = gridRowAlign;
                    elt.setAttribute("data-location", gridRowAlign);
                };
                

                var layoutData = {
                    exclusions: exclusions,
                    layoutDelegates: layoutDelegates,
                };

                return layoutData;
            },
        }
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    var maxCaptionFraction = 0.33; // wrt the column height

    WinJS.Namespace.define("BingApps.UI", {
        InlineRendererHelper: {
            render: function (imageAttributes, context, icon, uri) {
                var gridOptions = context.gridOptions;
                var columnHeight = gridOptions.columnHeight;
                var auxiliaryData = context.auxiliaryData;
                var cacheId = auxiliaryData.cacheId || "";

                var attribution = imageAttributes.attribution || "";
                var caption = imageAttributes.caption || "";
                var altText = imageAttributes.altText || "";

                var imageBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(imageBlockElt, "inlineImageBlock exclusion");

                // image + description container
                var inlineContainerElt = document.createElement("div");
                WinJS.Utilities.addClass(inlineContainerElt, "inlineContainer");
                imageBlockElt.appendChild(inlineContainerElt);

                // image container (image + icon)
                var imageContainerElt = document.createElement("div");
                WinJS.Utilities.addClass(imageContainerElt, "imageContainer");

                // anchor
                if (uri) {
                    var anchorElt = document.createElement("a");
                    WinJS.Utilities.addClass(anchorElt, "anchor");
                    anchorElt.href = uri;
                    anchorElt.appendChild(imageContainerElt);
                    inlineContainerElt.appendChild(anchorElt);
                }
                else {
                    inlineContainerElt.appendChild(imageContainerElt);
                }

                // image
                var imageElt = document.createElement("div");
                WinJS.Utilities.addClass(imageElt, "image fitHeight anchorMiddle");
                imageContainerElt.appendChild(imageElt);

                // icon
                if (icon) {
                    var iconElt = document.createElement("div");
                    iconElt.className = "icon win-command";
                    WinJS.Utilities.addClass(iconElt, icon);
                    var iconRing = document.createElement("div");
                    iconRing.className = "iconRing win-commandring win-commandicon";
                    var iconImage = document.createElement("div");
                    iconImage.className = "iconImage win-commandimage";
                    iconRing.appendChild(iconImage);
                    iconElt.appendChild(iconRing);

                    imageContainerElt.appendChild(iconElt);
                }

                // description
                var descriptionElt = document.createElement("div");
                WinJS.Utilities.addClass(descriptionElt, "description");
                descriptionElt.style.maxHeight = (maxCaptionFraction * columnHeight) + "px";
                inlineContainerElt.appendChild(descriptionElt);

                // attribution
                if (attribution) {
                    var attributionElt = document.createElement("span");
                    WinJS.Utilities.addClass(attributionElt, "attribution");
                    attributionElt.innerText = attribution;
                    descriptionElt.appendChild(attributionElt);
                }

                // caption
                if (caption) {
                    var captionElt = document.createElement("span");
                    WinJS.Utilities.addClass(captionElt, "caption");
                    captionElt.innerText = caption;
                    descriptionElt.appendChild(captionElt);
                }

                var imageSource = BingApps.UI.ArticleReaderUtils.getImageCardSource(imageAttributes, cacheId);
                var imageCard = new BingApps.UI.ImageCard(imageElt, {
                    alternateText: " ",
                    classification: "medium",
                    imageSource: imageSource,
                });

                var renderData = {
                    element: imageBlockElt,
                    adjustments: [
                        function (gridOptions) {
                            BingApps.UI.ArticleReaderUtils.setFixedElementHeight(imageBlockElt);
                        }
                    ],
                };

                return renderData;
            },

            calculateLayout: function (imageAttributes, startColumn, gridOptions, exclusions, type) {
                var columnHeight = gridOptions.columnHeight;

                // get original image size from data
                var imageResource = BingApps.UI.ArticleReaderUtils.getImageResource(imageAttributes);
                var resourceWidth = parseInt(imageResource.width);
                var resourceHeight = parseInt(imageResource.height);
                if (resourceWidth <= 0 || resourceHeight <= 0) {
                    return null;
                }

                // max height based on column height
                var maxHeight = Math.min((1 - maxCaptionFraction) * columnHeight, resourceHeight);

                var maxWidth = maxHeight * resourceWidth / resourceHeight;
                var minWidth = 1;

                var estimatedMaxHeight = maxHeight + (maxCaptionFraction * columnHeight) + 20; // buffer 20, and add max caption height
                var exclusion = BingApps.UI.ArticleReaderUtils.getBestExclusion(startColumn, gridOptions, exclusions, maxWidth, estimatedMaxHeight, minWidth);

                var layoutData;
                if (exclusion) {
                    layoutData = {
                        type: type,
                        exclusion: exclusion,

                        layoutDelegate: function (elt) {
                            this._layout(elt, gridOptions, true);
                        },

                        prepareForAggregationDelegate: function (elt) {
                            this._layout(elt, gridOptions, false);
                        },

                        applyAggregationDelegate: function (elt, reset, top) {
                            var inlineContainerElt = elt.querySelector(".inlineContainer");
                            if (reset) {
                                inlineContainerElt.style.marginTop = "";
                            }
                            else {
                                inlineContainerElt.style.marginTop = top + "px";
                            }
                        },

                        _layout: function (elt, gridOptions, useHalfColumn) {
                            var exclusion = this.exclusion;
                            if (exclusion) {
                                var columnCount = gridOptions.columnCount;
                                var columnWidth = gridOptions.columnWidth;
                                var columnSpan = exclusion.columnSpan;
                                var gridRowAlign = exclusion.rowAlign;
                                var gridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                                var gridColumnSpan = columnSpan * 2 - 1;

                                var style = elt.style;
                                style.height = "";
                                style.msGridRow = 2;
                                style.msGridRowSpan = 2;
                                style.msGridColumn = gridColumn;
                                style.msGridColumnSpan = gridColumnSpan;
                                style.msGridRowAlign = gridRowAlign;

                                var containerWidth = BingApps.UI.ArticleReaderUtils.convertColumnCountToWidth(columnSpan, gridOptions);
                                if (columnSpan === 1 && columnWidth > 550 && useHalfColumn) {
                                    containerWidth = columnWidth * 0.50;
                                    style.msGridColumnAlign = "start";
                                }
                                else {
                                    style.msGridColumnAlign = "";
                                }

                                var imageWidth = Math.min(containerWidth, maxWidth);
                                var imageHeight = imageWidth * maxHeight / maxWidth;

                                var imageContainerElt = elt.querySelector(".imageContainer");
                                var imageContainerStyle = imageContainerElt.style;
                                imageContainerStyle.width = imageWidth + "px";
                                imageContainerStyle.height = imageHeight + "px";

                                var imageElt = elt.querySelector(".image");
                                var imageStyle = imageElt.style;
                                imageStyle.width = imageWidth + "px";
                                imageStyle.height = imageHeight + "px";

                                var inlineContainerElt = elt.querySelector(".inlineContainer");
                                inlineContainerElt.style.width = containerWidth + "px";
                            }
                        },
                    };
                }

                return layoutData;
            },
        },
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Renders an inline image block
    WinJS.Namespace.define("BingApps.UI", {
        InlineImageRenderer: {
            render: function (attributes, context) {
                var imageAttributes = attributes.image;

                var renderData = BingApps.UI.InlineRendererHelper.render(imageAttributes, context, null, null);
                return renderData;
            },

            calculateLayout: function (attributes, startColumn, gridOptions, exclusions) {
                var imageAttributes = attributes.image;

                var layoutData = BingApps.UI.InlineRendererHelper.calculateLayout(imageAttributes, startColumn, gridOptions, exclusions, this);
                return layoutData;
            },

        }
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Renders an inline slideshow
    WinJS.Namespace.define("BingApps.UI", {
        InlineSlideshowRenderer: {
            render: function (attributes, context) {
                var imageAttributes = attributes.image;
                var uri = attributes.uri;
                var icon = "slideshow";

                var renderData = BingApps.UI.InlineRendererHelper.render(imageAttributes, context, icon, uri);
                return renderData;
            },

            calculateLayout: function (attributes, startColumn, gridOptions, exclusions) {
                var imageAttributes = attributes.image;

                var layoutData = BingApps.UI.InlineRendererHelper.calculateLayout(imageAttributes, startColumn, gridOptions, exclusions, this);
                return layoutData;
            },
        }
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Renders an inline video
    WinJS.Namespace.define("BingApps.UI", {
        InlineVideoRenderer: {
            render: function (attributes, context) {
                var gridOptions = context.gridOptions;
                var video = attributes.video;
                var attribution = video.attribution;
                var videoSource = video.videoSource;

                var videoBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(videoBlockElt, "inlineVideoBlock exclusion");

                // video + attribution container
                var videoContainerElt = document.createElement("div");
                WinJS.Utilities.addClass(videoContainerElt, "mediaPlaybackContainer");
                videoBlockElt.appendChild(videoContainerElt);

                
                // video
                var videoElt = document.createElement("div");
                WinJS.Utilities.addClass(videoElt, "video");
                videoContainerElt.appendChild(videoElt);
                
                var imageCardDiv = document.createElement("div");
                WinJS.Utilities.addClass(imageCardDiv, "rrMediaPlaybackImageCard");

                if (video.posterUrl) {
                    var image = document.createElement("img");
                    image.src = video.posterUrl;
                    image.style.width = "100%";
                    image.style.height = "100%";
                    imageCardDiv.appendChild(image);
                }

                var playIcon = document.createElement("div");
                
                WinJS.Utilities.addClass(playIcon, "win-commandicon win-commandring mediaPlaybackPlayIcon");
                imageCardDiv.appendChild(playIcon);

                var adUnitId = null;
                var enableVideoAds = null; //true and false are both VALID value
                if (context.auxiliaryData && context.auxiliaryData.videoOptions) {
                    adUnitId = context.auxiliaryData.videoOptions.adUnitId;
                    enableVideoAds = context.auxiliaryData.videoOptions.enableVideoAds;
                }
                var wrapper = new BingApps.UI.VideoWrapper(videoElt, {
                    subElement: imageCardDiv, videoOptions: {
                        //NOTE: match the fields' name in EntityCluster item
                        title: video.attribution,
                        videoSource: video.videoSource,
                        fullscreen: "true",
                        adUnitId: adUnitId,
                        enableVideoAds: enableVideoAds
                    }
                });
                
                
                // attribution
                var attributionElt = document.createElement("div");
                WinJS.Utilities.addClass(attributionElt, "rrMediaPlaybackAttribution");
                attributionElt.innerText = attribution;
                videoContainerElt.appendChild(attributionElt);
                
                // register for disposal
                var auxiliaryData = context.auxiliaryData;
                var disposalManager = auxiliaryData.disposalManager;
                disposalManager.addDisposedDelegate(function () {
                    // This occurs when the article reader page is navigated away from back to another panorama. In this case you might want to remove your event listeners, stop your timeouts, etc.
                });
                disposalManager.addArticleFocusLostDelegate(function () {
                    // This occurs when the article is still in the dom but no longer in view because of next/prev, or when we go to snap. In this case you might want to pause the video.
                });

                var renderData = {
                    element: videoBlockElt,
                    adjustments: [
                        function (gridOptions) {
                            BingApps.UI.ArticleReaderUtils.setFixedElementHeight(videoBlockElt);
                        }
                    ],
                };

                return renderData;
            },

            calculateLayout: function (attributes, startColumn, gridOptions, exclusions) {
                var that = this;
                var video = attributes.video;
                var maxWidth = parseInt(video.width);
                var maxHeight = parseInt(video.height);
                var minWidth = 1;

                var estimatedMaxHeight = maxHeight + 250; // estimate 250 pixels for caption
                var exclusion = BingApps.UI.ArticleReaderUtils.getBestExclusion(startColumn, gridOptions, exclusions, maxWidth, estimatedMaxHeight, minWidth);

                var layoutData;
                if (exclusion) {
                    layoutData = {
                        type: that,
                        exclusion: exclusion,
                        layoutDelegate: function (elt) {
                            this._layout(elt, gridOptions);
                        },

                        prepareForAggregationDelegate: function (elt) {
                            this._layout(elt, gridOptions);
                        },

                        applyAggregationDelegate: function (elt, reset, top) {
                            var mediaPlaybackContainerElt = elt.querySelector(".mediaPlaybackContainer");
                            if (reset) {
                                mediaPlaybackContainerElt.style.marginTop = "";
                            }
                            else {
                                mediaPlaybackContainerElt.style.marginTop = top + "px";
                            }
                        },

                        _layout: function (elt, gridOptions) {
                            var exclusion = this.exclusion;
                            if (exclusion) {
                                var columnCount = gridOptions.columnCount;
                                var gridRowAlign = exclusion.rowAlign;
                                var gridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                                var gridColumnSpan = exclusion.columnSpan * 2 - 1;

                                var style = elt.style;
                                style.height = "";
                                style.msGridRow = 2;
                                style.msGridRowSpan = 2;
                                style.msGridColumn = gridColumn;
                                style.msGridColumnSpan = gridColumnSpan;
                                style.msGridRowAlign = gridRowAlign;

                                var columnSpan = exclusion.columnSpan;
                                var videoWidth = Math.min(BingApps.UI.ArticleReaderUtils.convertColumnCountToWidth(columnSpan, gridOptions), maxWidth);
                                var videoHeight = videoWidth * maxHeight / maxWidth;
                                var videoElt = elt.querySelector(".video");
                                var videoStyle = videoElt.style;
                                videoStyle.width = videoWidth + "px";
                                videoStyle.height = videoHeight + "px";
                            }
                        }
                    };
                }

                return layoutData;
            },
        }
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Renders the trailing Referral block
    WinJS.Namespace.define("BingApps.UI", {
        ReferralRenderer: {
            render: function (attributes, context) {
                var gridOptions = context.gridOptions;
                var columnMargin = gridOptions.columnMargin;
                var auxiliaryData = context.auxiliaryData;
                var cacheId = auxiliaryData.cacheId || "";

                var referral = attributes.referral;
                var url = referral.url;
                var title = referral.title;
                var description = referral.description;
                var thumbnail = referral.thumbnail;
                var logo = referral.logo;
                var urlAction = referral.urlAction;

                var referralBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(referralBlockElt, "referralBlock");

                var referralContainerElt = document.createElement("div");
                WinJS.Utilities.addClass(referralContainerElt, "referralContainer");
                referralContainerElt.style.paddingLeft = columnMargin + "px";
                referralContainerElt.style.paddingRight = columnMargin + "px";
                referralBlockElt.appendChild(referralContainerElt);

                var image = BingApps.UI.ArticleReaderUtils.getImageResource(thumbnail);
                var imageHeight = image.height;
                var imageElt = document.createElement("div");
                var imageSource = BingApps.UI.ArticleReaderUtils.getImageCardSource(thumbnail, cacheId);
                WinJS.Utilities.addClass(imageElt, "referralImage fitHeight anchorMiddle");
                imageElt.style.height = imageHeight + "px";
                var imageCard = new BingApps.UI.ImageCard(imageElt, {
                    imageSource: imageSource,
                });
                referralContainerElt.appendChild(imageElt);

                // title
                var titleElt = document.createElement("div");
                WinJS.Utilities.addClass(titleElt, "referralTitle");
                titleElt.innerText = title;
                referralContainerElt.appendChild(titleElt);

                // description
                var descriptionElt = document.createElement("div");
                WinJS.Utilities.addClass(descriptionElt, "referralDescription");
                descriptionElt.innerText = description;
                referralContainerElt.appendChild(descriptionElt);

                var visitElt = document.createElement("button");
                WinJS.Utilities.addClass(visitElt, "referralButton");
                visitElt.innerText = urlAction;

                (function createUriClickHandler(theReferral) {
                    visitElt.addEventListener("click", function (event) {
                        var uri = new Windows.Foundation.Uri(theReferral.url);

                        // Launch the URI.
                        Windows.System.Launcher.launchUriAsync(uri);
                    });
                })(referral);
                referralContainerElt.appendChild(visitElt);

                var imageLogo = BingApps.UI.ArticleReaderUtils.getImageResource(logo);

                var logoElt = document.createElement("div");
                WinJS.Utilities.addClass(logoElt, "referralLogo");

                var captionLogoElt = document.createElement("div");
                WinJS.Utilities.addClass(captionLogoElt, "referralLogoCaption");
                captionLogoElt.innerText = referral.logo.caption;
                logoElt.appendChild(captionLogoElt);

                var imageLogoElt = document.createElement("div");
                imageLogoElt.style.height = imageLogo.height + "px";
                imageLogoElt.style.width = imageLogo.width + "px";

                var imageLogoSource = BingApps.UI.ArticleReaderUtils.getImageCardSource(logo, cacheId);
                var imageLogoCard = new BingApps.UI.ImageCard(imageLogoElt, {
                    imageSource: imageLogoSource,
                });
                logoElt.appendChild(imageLogoElt);
                referralContainerElt.appendChild(logoElt);


                var renderData = {
                    element: referralBlockElt,
                    adjustments: null,
                };

                return renderData;
            },

            calculateLayout: function (attributes, startColumn, gridOptions, exclusions) {
                var that = this;
                var columnHeight = gridOptions.columnHeight;

                var layoutData;
                layoutData = {
                    type: that,
                    exclusion: null,
                    layoutDelegate: null,
                    postAdjustmentLayoutDelegate: function (elt, surfaceManager, context) {
                        // lay out this block in the last empty column. create a new page if necessary.

                        var gridOptions = context.gridOptions;
                        var columnCount = gridOptions.columnCount;
                        var columnHeight = gridOptions.columnHeight;
                        var page = surfaceManager.getLastPageWithEmptyLastColumn(context, true);
                        var pageIndex = page.pageIndex;
                        var column = (pageIndex + 1) * columnCount - 1;

                        var style = elt.style;
                        style.msGridRow = 1;
                        style.msGridRowSpan = 4;
                        style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(column, columnCount);
                        style.msGridColumnSpan = 2;

                        // add exclusion
                        var layoutData = context.layoutData;
                        var exclusion = {
                            column: column,
                            columnSpan: 1,
                            rowAlign: "start",
                            height: columnHeight,
                        };
                        this.exclusion = exclusion;
                    },
                };

                return layoutData;
            },
        }
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Renders an external block
    WinJS.Namespace.define("BingApps.UI", {
        ExternalRenderer: {
            render: function (attributes, context) {

                var auxiliaryData = context.auxiliaryData;
                var cacheId = auxiliaryData.cacheId || "";
                var renderOptions = {
                    cacheId: cacheId,
                };

                var controlType = attributes.controlType;
                var controlOptionsSerialized = attributes.controlOptionsSerialized;
                var controlOptions = JSON.parse(controlOptionsSerialized);
                var options = {
                    controlOptions: controlOptions,
                    renderOptions: renderOptions,
                };
                var control = BingApps.Utilities.createObject(controlType, null, options);

                var blockElt = document.createElement("div");
                WinJS.Utilities.addClass(blockElt, "externalBlock exclusion");

                var containerElt = document.createElement("div");
                WinJS.Utilities.addClass(containerElt, "externalContainer");
                blockElt.appendChild(containerElt);

                var adjustments;
                if (control) {
                    // get element from control
                    var controlElt = control.element;
                    containerElt.appendChild(controlElt);

                    // get adjustments from control
                    adjustments = control.adjustments;
                }
                adjustments = adjustments || [];

                adjustments.push(function (gridOptions) {
                    BingApps.UI.ArticleReaderUtils.setFixedElementHeight(blockElt);
                });

                var renderData = {
                    element: blockElt,
                    adjustments: adjustments,
                };

                return renderData;
            },

            calculateLayout: function (attributes, startColumn, gridOptions, exclusions) {
                var that = this;
                // get max block size from data
                var maxWidth = attributes.maxWidth;
                var maxHeight = attributes.maxHeight;
                var minWidth = attributes.minWidth || 1;

                // calculate exclusion
                var placement = attributes.placement;
                var estimatedMaxHeight = maxHeight * 1.2; // allow for 20% height increase
                var exclusion = BingApps.UI.ArticleReaderUtils.getBestExclusion(startColumn, gridOptions, exclusions, maxWidth, estimatedMaxHeight, minWidth);

                var layoutData;
                if (exclusion) {
                    layoutData = {
                        type: that,
                        exclusion: exclusion,

                        layoutDelegate: function (elt) {
                            this._layout(elt, gridOptions);
                        },

                        prepareForAggregationDelegate: function (elt) {
                            this._layout(elt, gridOptions);
                        },

                        applyAggregationDelegate: function (elt, reset, top) {
                            var externalContainerElt = elt.querySelector(".externalContainer");
                            if (reset) {
                                externalContainerElt.style.marginTop = "";
                            }
                            else {
                                externalContainerElt.style.marginTop = top + "px";
                            }
                        },

                        _layout: function (elt, gridOptions) {
                            var exclusion = this.exclusion;
                            if (exclusion) {
                                var columnCount = gridOptions.columnCount;
                                var gridRowAlign = exclusion.rowAlign;
                                var gridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                                var gridColumnSpan = exclusion.columnSpan * 2 - 1;

                                var style = elt.style;
                                style.height = "";
                                style.msGridRow = 2;
                                style.msGridRowSpan = 2;
                                style.msGridColumn = gridColumn;
                                style.msGridColumnSpan = gridColumnSpan;
                                style.msGridRowAlign = gridRowAlign;

                                var containerElt = elt.querySelector(".sized") || elt.querySelector(".externalContainer");
                                var columnSpan = exclusion.columnSpan;
                                var blockWidth = Math.min(BingApps.UI.ArticleReaderUtils.convertColumnCountToWidth(columnSpan, gridOptions), maxWidth);
                                var blockHeight = blockWidth * maxHeight / maxWidth;
                                containerElt.style.width = blockWidth + "px";
                                containerElt.style.height = blockHeight + "px";
                            }
                        },
                    };
                }

                return layoutData;
            },
        }
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Renders the end of article Actions block
    WinJS.Namespace.define("BingApps.UI", {
        ActionsRenderer: {
            render: function (attributes, context) {
                var articleActions = attributes.articleActions;
                var actionsHandler = attributes.actionsHandler;
                var auxiliaryData = context.auxiliaryData;
                var cacheId = auxiliaryData.cacheId || "";
                var articleMetadata = auxiliaryData.articleMetadata;
                var articleHeader = auxiliaryData.articleHeader;

                var actionsBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(actionsBlockElt, "actionsBlock exclusion");

                var actionsContainerElt = document.createElement("div");
                WinJS.Utilities.addClass(actionsContainerElt, "actionsContainer");
                actionsBlockElt.appendChild(actionsContainerElt);

                var actionsElt = document.createElement("ol");
                WinJS.Utilities.addClass(actionsElt, "actions");
                actionsContainerElt.appendChild(actionsElt);

                for (var actionKey in articleActions) {
                    var articleAction = articleActions[actionKey];
                    var text = articleAction.text;
                    var textSize = articleAction.textSize;
                    var icon = articleAction.icon;
                    var actionOptions = articleAction.actionOptions;

                    var actionElt = document.createElement("li");
                    WinJS.Utilities.addClass(actionElt, "action");
                    actionsElt.appendChild(actionElt);

                    var buttonElt = document.createElement("button");
                    WinJS.Utilities.addClass(buttonElt, "button");
                    actionElt.appendChild(buttonElt);
                    BingApps.Utilities.enablePointerUpDownAnimations(buttonElt);
                    if (actionsHandler) {
                        (function (actionKey, actionOptions) {
                            buttonElt.addEventListener("click", function (event) {
                                var newEvent = {
                                    originalEvent: event,
                                    data: {
                                        actionKey: actionKey,
                                        actionOptions: actionOptions,
                                        articleMetadata: articleMetadata,
                                        articleHeader: articleHeader,
                                    }
                                };
                                actionsHandler.onActionInvoked(newEvent);
                            });
                        })(actionKey, actionOptions);
                    }

                    // icon
                    if (icon) {
                        var iconContainerElt = document.createElement("div");
                        WinJS.Utilities.addClass(iconContainerElt, "iconContainer");
                        buttonElt.appendChild(iconContainerElt);

                        var iconElt = document.createElement("div");
                        WinJS.Utilities.addClass(iconElt, "icon");
                        iconContainerElt.appendChild(iconElt);

                        var iconType = icon.type;
                        switch (iconType) {
                            case "glyph":
                                var className = icon.className;
                                WinJS.Utilities.addClass(iconContainerElt, "glyph");
                                WinJS.Utilities.addClass(iconElt, className);
                                break;

                            case "image":
                                var url = icon.url;
                                WinJS.Utilities.addClass(iconContainerElt, "image fitBoth");
                                var imageCard = new BingApps.UI.ImageCard(iconElt, {
                                    imageSource: {
                                        url: url,
                                        cacheId: cacheId,
                                    }
                                });
                                break;
                        }
                    }

                    // text
                    var textElt = document.createElement("div");
                    textElt.innerText = text;
                    WinJS.Utilities.addClass(textElt, "text");
                    switch (textSize) {
                        case "large":
                            WinJS.Utilities.addClass(textElt, "large");
                            break;
                        case "small":
                        default:
                            WinJS.Utilities.addClass(textElt, "small");
                            break;
                    }

                    buttonElt.appendChild(textElt);
                }

                var renderData = {
                    element: actionsBlockElt,
                    adjustments: null,
                };

                return renderData;
            },

            calculateLayout: function (attributes, startColumn, gridOptions, exclusions) {
                var that = this;
                var layoutData;
                layoutData = {
                    type: that,
                    aggregated: false,
                    exclusion: null,
                    layoutDelegate: null,
                    postAdjustmentLayoutDelegate: function (elt, surfaceManager, context) {
                        var aggregated = this.aggregated;
                        if (!aggregated) {
                            var layoutData = context.layoutData;
                            var exclusions = BingApps.UI.ArticleReaderUtils.getAllExclusions(layoutData);
                            var gridOptions = context.gridOptions;
                            var columnCount = gridOptions.columnCount;
                            var columnWidth = gridOptions.columnWidth;
                            var style = elt.style;

                            // reset aggregation
                            var actionsContainerElt = elt.querySelector(".actionsContainer");
                            actionsContainerElt.style.marginTop = "";

                            // first try: place block starting at the bottom of last column with content
                            var lastColumnWithContent = surfaceManager.getLastColumnWithContent(context);
                            var startColumn = (lastColumnWithContent + 0.5);
                            var exclusion;
                            var firstTry = false;
                            var secondTry = false;
                            var measuredHeight;
                            while (!(firstTry && secondTry)) {
                                if (firstTry) {
                                    secondTry = true;
                                }
                                firstTry = true;

                                while (!exclusion) {
                                    var estimatedHeight = measuredHeight || 1;
                                    exclusion = BingApps.UI.ArticleReaderUtils.getBestExclusion(startColumn, gridOptions, exclusions, columnWidth, estimatedHeight, columnWidth);
                                    if (!exclusion) {
                                        startColumn = surfaceManager.getNextColumnIndexAndMaybeCreatePage(Math.floor(startColumn), context);
                                    }
                                }

                                var gridRowAlign = exclusion.rowAlign;
                                var gridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                                var gridColumnSpan = exclusion.columnSpan * 2 - 1; // should always be 1

                                style.msGridRow = 2;
                                style.msGridRowSpan = 2;
                                style.msGridColumn = gridColumn;
                                style.msGridColumnSpan = gridColumnSpan;
                                style.msGridRowAlign = gridRowAlign;
                                elt.setAttribute("data-location", gridRowAlign);

                                if (!measuredHeight) {
                                    measuredHeight = BingApps.UI.ArticleReaderUtils.setFixedElementHeight(elt);
                                    exclusion.height = measuredHeight;
                                }

                                // if this causes the last column to overflow, second try: place block starting at the top of the next column
                                var isColumnOverflowing = surfaceManager.isColumnOverflowing(lastColumnWithContent, context);
                                if (isColumnOverflowing) {
                                    startColumn = surfaceManager.getNextColumnIndexAndMaybeCreatePage(Math.floor(startColumn), context);
                                    exclusion = null;
                                    WinJS.Utilities.removeClass(elt, gridRowAlign);
                                }
                                else {
                                    break;
                                }
                            }

                            // add exclusion
                            this.exclusion = exclusion;
                        }
                    },

                    prepareForAggregationDelegate: function (elt) {
                        var style = elt.style;
                        style.height = "";
                        this.exclusion = {};
                        this.aggregated = true;
                    },

                    applyAggregationDelegate: function (elt, reset, top) {
                        var actionsContainerElt = elt.querySelector(".actionsContainer");
                        if (reset) {
                            actionsContainerElt.style.marginTop = "";
                        }
                        else {
                            actionsContainerElt.style.marginTop = top + "px";
                        }
                    },
                };

                return layoutData;
            },
        }
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Renders the trailing End Ad block
    WinJS.Namespace.define("BingApps.UI", {
        EndAdRenderer: {
            render: function (attributes, context) {

                var controlOptions = attributes.controlOptions;
                var controlType = attributes.controlType;

                var endAdBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(endAdBlockElt, "endAdBlock");

                var adContainer = new BingApps.UI.AdContainer(null, {
                    controlOptions: controlOptions,
                    controlType: controlType,
                });
                var adContainerElt = adContainer.element;
                endAdBlockElt.appendChild(adContainerElt);

                // register for disposal
                var auxiliaryData = context.auxiliaryData;
                var disposalManager = auxiliaryData.disposalManager;
                disposalManager.addDisposedDelegate(function () {
                    adContainer.dispose();
                });

                var renderData = {
                    element: endAdBlockElt,
                    adjustments: null,
                };

                return renderData;
            },

            calculateLayout: function (attributes, startColumn, gridOptions, exclusions) {
                var that = this;
                var columnHeight = gridOptions.columnHeight;
                that.adWidth = attributes.width;
                that.adHeight = attributes.height;
                var layoutData;
                layoutData = {
                    type: that,
                    exclusion: null,
                    layoutDelegate: null,
                    postAdjustmentLayoutDelegate: function (elt, surfaceManager, context) {
                        var blockVisibility = elt.getAttribute("data-block-visibility");
                        var renderedOnFirstLayout = elt.getAttribute("data-rendered-on-first-layout");
                        var firstLayout = !blockVisibility;
                        if (firstLayout || renderedOnFirstLayout) {
                            // if we're in the first layout iteration, or the ad is already shown, relayout
                            var gridOptions = context.gridOptions;
                            var columnCount = gridOptions.columnCount;
                            var columnHeight = gridOptions.columnHeight;
                            var page = surfaceManager.getLastPageWithEmptyLastColumn(context, false);
                            var style = elt.style;
                            if (page) {
                                // lay out this block in the last empty column. don't create new page.
                                var pageIndex = page.pageIndex;
                                var column = (pageIndex + 1) * columnCount - 1;
                                style.msGridRow = 1;
                                style.msGridRowSpan = 4;
                                style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(column, columnCount);
                                style.msGridColumnSpan = 2;

                                // add exclusion
                                var layoutData = context.layoutData;
                                var exclusion = {
                                    column: column,
                                    columnSpan: 1,
                                    rowAlign: "start",
                                    height: columnHeight,
                                };
                                this.exclusion = exclusion;

                                BingApps.UI.ArticleReaderUtils.instantiateChildAds(elt);

                                elt.setAttribute("data-block-visibility", "shown");
                                elt.setAttribute("data-rendered-on-first-layout", true);
                                var adElt = elt.querySelector(".ad");
                                if (adElt) {
                                    var adStyle = adElt.style;
                                    adStyle.width = this.type.adWidth + "px";
                                    adStyle.height = this.type.adHeight + "px";
                                }
                            }
                            else {
                                // if the ad cannot be laid out, hide it, and if this was the first iteration, hide it forever
                                elt.setAttribute("data-block-visibility", "hidden");
                            }
                        }
                    },
                };

                return layoutData;
            },
        }
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Renders an inline ad block
    WinJS.Namespace.define("BingApps.UI", {
        InlineAdRenderer: {
            render: function (attributes, context) {
                var controlOptions = attributes.controlOptions;
                var controlType = attributes.controlType;

                var inlineAdBlockElt = document.createElement("div");
                WinJS.Utilities.addClass(inlineAdBlockElt, "inlineAdBlock exclusion");

                var adContainer = new BingApps.UI.AdContainer(null, {
                    controlOptions: controlOptions,
                    controlType: controlType,
                });
                var adContainerElt = adContainer.element;
                inlineAdBlockElt.appendChild(adContainerElt);

                // register for disposal
                var auxiliaryData = context.auxiliaryData;
                var disposalManager = auxiliaryData.disposalManager;
                disposalManager.addDisposedDelegate(function () {
                    adContainer.dispose();
                });

                var renderData = {
                    element: inlineAdBlockElt,
                    adjustments: [
                        function (gridOptions) {
                            BingApps.UI.ArticleReaderUtils.setFixedElementHeight(inlineAdBlockElt);
                        }
                    ],
                };

                return renderData;
            },

            calculateLayout: function (attributes, startColumn, gridOptions, exclusions) {
                var that = this;
                // get ad size
                var adWidth = attributes.width;
                var adHeight = attributes.height;

                var exclusion = BingApps.UI.ArticleReaderUtils.getBestExclusion(startColumn, gridOptions, exclusions, adWidth, adHeight, adWidth);

                var layoutData;
                if (exclusion) {
                    layoutData = {
                        type: that,
                        exclusion: exclusion,

                        layoutDelegate: function (elt) {
                            this._layout(elt, gridOptions, true);
                        },

                        prepareForAggregationDelegate: function (elt) {
                            this._layout(elt, gridOptions, false);
                        },

                        applyAggregationDelegate: function (elt, reset, top) {
                            var adContainerElt = elt.querySelector(".adContainer");
                            if (reset) {
                                adContainerElt.style.marginTop = "";
                            }
                            else {
                                adContainerElt.style.marginTop = top + "px";
                            }
                        },

                        _layout: function (elt, gridOptions, useHalfColumn) {
                            var exclusion = this.exclusion;
                            if (exclusion) {
                                var columnCount = gridOptions.columnCount;
                                var columnWidth = gridOptions.columnWidth;
                                var columnSpan = exclusion.columnSpan;
                                var gridRowAlign = exclusion.rowAlign;
                                var gridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(exclusion.column, columnCount);
                                var gridColumnSpan = columnSpan * 2 - 1;

                                var style = elt.style;
                                style.height = "";
                                style.msGridRow = 2;
                                style.msGridRowSpan = 2;
                                style.msGridColumn = gridColumn;
                                style.msGridColumnSpan = gridColumnSpan;
                                style.msGridRowAlign = gridRowAlign;

                                var adContainer = elt.querySelector(".adContainer");
                                if (columnSpan === 1 && columnWidth > 550 && adWidth <= 300 && useHalfColumn) {
                                    adContainer.style.width = adWidth + "px";
                                    style.msGridColumnAlign = "start";
                                }
                                else {
                                    adContainer.style.width = "";
                                    style.msGridColumnAlign = "";
                                }

                                BingApps.UI.ArticleReaderUtils.instantiateChildAds(elt);

                                var adElt = elt.querySelector(".ad");
                                if (adElt) {
                                    var adStyle = adElt.style;
                                    adStyle.width = adWidth + "px";
                                    adStyle.height = adHeight + "px";
                                }
                            }
                        },

                    };
                }

                return layoutData;
            },
        }
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function appexPrivateArticleReaderUtilitiesInit() {
    "use strict";

    WinJS.Namespace.define("BingApps.UI", {
        ArticleReaderUtils: {

            convertColumnIndexToGridColumn: function (columnIndex, columnCount) {
                /// <summary>
                /// Converts a column index to a -ms-grid column.
                /// </summary>
                /// <param name="columnIndex">0-based column index</param>
                /// <param name="columnCount">Number of columns in a page. e.g. 3</param>
                return (((columnCount * 2) + 1) * (Math.floor(columnIndex / columnCount)) + ((columnIndex % columnCount) * 2 + 2));
            },

            convertColumnCountToWidth: function (count, gridOptions) {
                /// <summary>
                /// Given a column count, return the width in pixels, including the gutters in between.
                /// </summary>
                /// <param name="count">Number of columns</param>
                /// <param name="gridOptions">Grid options</param>

                var columnMargin = gridOptions.columnMargin;
                var columnWidth = gridOptions.columnWidth;

                return (count * (columnMargin + columnWidth)) - columnMargin;
            },

            getImageResource: function (image, imageName) {
                /// <summary>
                /// Gets the image identified by imageName from the image dictionary.
                /// By default gets "original".
                /// </summary>
                /// <param name="image">Image dictionary.</param>
                /// <param name="imageName" optional="true">Optional, key into the dictionary to read.</param>
                var imageResource = null;
                var imageResources = image.images;
                imageName = imageName || "original";

                for (var i = 0, len = imageResources.length; i < len; i++) {
                    var current = imageResources[i];
                    if (current.name === imageName) {
                        imageResource = current;
                        break;
                    }
                }

                return imageResource;
            },

            getImageCardSource: function (image, cacheId) {
                /// <summary>
                /// Returns a value that can be set as the imageSource attribute of an ImageCard based on the given image dictionary and cacheId.
                /// </summary>
                /// <param name="image">Image dictionary.</param>
                /// <param name="cacheId">Cache ID. Can be null.</param>
                var original = this.getImageResource(image, "original");
                var lowRes = this.getImageResource(image, "lowRes");

                var imageSource;
                if (lowRes) {
                    imageSource = {
                        highResolutionUrl: original.url,
                        lowResolutionUrl: lowRes.url,
                        cacheId: cacheId,
                    };
                }
                else {
                    imageSource = {
                        url: original.url,
                        cacheId: cacheId,
                    };
                }
                return imageSource;
            },

            getBestExclusion: function (startColumn, gridOptions, exclusions, maxWidth, maxHeight, minWidth) {
                /// <summary>
                /// Gets the best exclusion for an inline element. The final size does not exceed maxWidth x maxHeight, and is not smaller than minWidth.
                /// </summary>
                /// <param name="startColumn">0-based index of the column at which to start looking for best exclusion. Add 0.5 to start at end of column. e.g. 4.5 means end of column 4.</param>
                /// <param name="gridOptions">Grid options.</param>
                /// <param name="exclusions">All other exclusions on the surface.</param>
                /// <param name="maxWidth">Max width of block.</param>
                /// <param name="maxHeight">Max height of block.</param>
                /// <param name="minWidth">Min width of block. Min height is inferred from the max aspect ratio.</param>

                if (maxWidth <= 0) {
                    return null;
                }

                var columnCount = gridOptions.columnCount;
                var aspectRatio = maxWidth / maxHeight;

                // get start column, ideal alignmnet, and end column
                var realStartColumn = Math.floor(startColumn);
                var initialRowAlign = (realStartColumn === startColumn ? "start" : "end");
                var endColumn = ((Math.floor(realStartColumn / columnCount) + 1) * columnCount) - 1;

                var columnHeight = gridOptions.columnHeight;
                var columnWidth = gridOptions.columnWidth;
                var columnMargin = gridOptions.columnMargin;

                // get the biggest size we can render based on original size and size of columns
                var maxColumns = Math.floor((maxWidth + columnMargin) / (columnWidth + columnMargin)) + 1;
                do {
                    maxColumns--;
                    var heightForMaxColumns = ((maxColumns * (columnWidth + columnMargin)) - columnMargin) / aspectRatio;
                } while (heightForMaxColumns > columnHeight);

                // get the smallest number of columns that must be allocated to this block
                var minColumns = Math.ceil((minWidth + columnMargin) / (columnWidth + columnMargin));

                // if min columns is higher than max, then adjust max
                maxColumns = Math.max(maxColumns, minColumns);

                var done = false;
                var exclusion;
                var currentStartColumn = realStartColumn;
                while (!done) {
                    var columns = maxColumns + 1;
                    while (!exclusion) {
                        columns--;
                        columns = Math.min(columns, endColumn - currentStartColumn + 1);
                        if (columns < minColumns) {
                            break;
                        }

                        var heightForColumns = ((columns * (columnWidth + columnMargin)) - columnMargin) / aspectRatio;
                        exclusion = this._getExclusion(currentStartColumn, columns, heightForColumns, initialRowAlign, exclusions, gridOptions);
                    }

                    if (exclusion) {
                        done = true;
                    }
                    else {
                        if (initialRowAlign === "start") {
                            initialRowAlign = "end";
                        }
                        else if (initialRowAlign === "end") {
                            currentStartColumn++;
                            initialRowAlign = "start";
                            if (endColumn - currentStartColumn < maxColumns - 1) { // stop trying if less than max columns are left on this page, so we'll try again with max columns on the next page
                                done = true;
                            }
                        }
                    }
                }

                return exclusion;
            },

            isContentElementEmpty: function (contentElement) {
                /// <summary>
                /// Given a content element, returns whether it is empty.
                /// </summary>

                var ranges = contentElement.msGetRegionContent();
                var isEmpty = !(ranges && ranges.length && ranges[0].toString());
                return isEmpty;
            },

            isContentElementOverflowing: function (contentElement) {
                /// <summary>
                /// Given a content element, returns whether it is overflowing.
                /// </summary>

                var isOverflowing = (contentElement.msRegionOverflow === "overflow");
                return isOverflowing;
            },

            isExclusionOnColumn: function (exclusion, columnIndex) {
                /// <summary>
                /// Given an exclusion and a 0-based column index, determines if any part of the exclusion falls on that column.
                /// </summary>

                var column = exclusion.column;
                var columnSpan = exclusion.columnSpan;

                var is = this._isColumnInRange(column, columnSpan, columnIndex);
                return is;
            },

            isElementOnColumn: function (element, columnIndex, columnCount) {
                /// <summary>
                /// Given a block element and a 0-based column index, determines if any part of the block elemnent falls on that column.
                /// </summary>
                var is = false;
                if (element && element.currentStyle) {
                    var gridColumn = parseInt(element.currentStyle.msGridColumn);
                    var gridColumnSpan = parseInt(element.currentStyle.msGridColumnSpan);

                    var column = this._convertGridColumnToColumnIndex(gridColumn, columnCount);
                    var columnSpan = (gridColumnSpan + 1) / 2;

                    is = this._isColumnInRange(column, columnSpan, columnIndex);
                }
                return is;
            },

            getAllExclusions: function (layoutData) {
                /// <summary>
                /// Returns an array of all exclusions currently in layout data. This includes all block exclusions, and all title exclusions.
                /// </summary>

                var exclusions = [];
                var blockLayoutDatas = layoutData.blockLayoutDatas;
                for (var i = 0, len = blockLayoutDatas.length; i < len; i++) {
                    var blockLayoutData = blockLayoutDatas[i];
                    var blockExclusion = blockLayoutData.exclusion;
                    if (blockExclusion) {
                        exclusions.push(blockExclusion);
                    }
                }

                var titleLayoutData = layoutData.titleLayoutData;
                if (titleLayoutData) {
                    var titleExclusions = titleLayoutData.exclusions;
                    for (var key in titleExclusions) {
                        var titleExclusion = titleExclusions[key];
                        if (titleExclusion) {
                            exclusions.push(titleExclusion);
                        }
                    }
                }

                return exclusions;
            },

            setFixedElementHeight: function (elt) {
                /// <summary>
                /// Measures the height of the given element and sets it back on the element in fixed number of pixels.
                /// This is to get around a CSS exclusions + -ms-grid bug, where end-aligned elements in a grid that are
                /// also exclusions are not aligned properly.
                /// </summary>

                elt.style.height = "";
                var offsetHeight = elt.offsetHeight;
                elt.style.height = offsetHeight + "px";
                return offsetHeight;
            },

            createContentElement: function (flowId) {
                /// <summary>
                /// Creates a content element and returns it. Does not add the element to the DOM.
                /// </summary>
                /// <param name="flowId">Name of the flow to set -ms-flow-from to.</param>

                var element = document.createElement("div");
                WinJS.Utilities.addClass(element, "contentBlock");
                element.style.msFlowFrom = flowId;
                return element;
            },

            showModalProgress: function () {
                /// <summary>
                /// Shows a modal progress screen, not an overlay like platform's.
                /// </summary>

                var loadingScreen = document.getElementById("articleLoadingScreen");
                if (loadingScreen) {
                    WinJS.Utilities.removeClass(loadingScreen, "platformHide");
                }
                BingApps.Utilities.Progress.showProgress(BingApps.Utilities.Progress.centerProgressType);
            },

            hideModalProgress: function () {
                /// <summary>
                /// Hides the modal progress screen.
                /// </summary>

                var loadingScreen = document.getElementById("articleLoadingScreen");
                if (loadingScreen) {
                    WinJS.Utilities.addClass(loadingScreen, "platformHide");
                }
                BingApps.Utilities.Progress.hideProgress(BingApps.Utilities.Progress.centerProgressType);
            },

            hasToc: function (gridOptions) {
                /// <summary>
                /// Returns true if there should be a toc on the first page depending on grid dimensions.
                /// </summary>

                var columnWidth = gridOptions.columnWidth;
                var columnCount = gridOptions.columnCount;
                return columnCount > 1 && columnWidth < 450;
            },

            hasBookmarks: function (context) {
                /// <summary>
                /// Returns true if there are bookmarks in the data and a toc/footer toc should be rendered.
                /// </summary>

                var auxiliaryData = context.auxiliaryData;
                var bookmarksList = auxiliaryData.bookmarksList;
                var bookmarks = bookmarksList.bookmarks;
                var showBookmarks = auxiliaryData.showBookmarks;

                return showBookmarks && !!bookmarks["b1"];
            },

            hasSourceLogo: function (titleBlock) {
                /// <summary>
                /// Returns true if the given title block has a source logo.
                /// </summary>

                return titleBlock && titleBlock.publisher && titleBlock.publisher.favicon;
            },

            combineCaptionAndAttribution: function (caption, attribution) {
                /// <summary>
                /// Combines caption and attribution into a space delimited string.
                /// </summary>

                var result = caption ? (attribution ? (caption + " " + attribution) : caption) : (attribution ? attribution : "");
                return result;
            },

            instantiateChildAds: function (element) {
                /// <summary>
                /// For the given element, finds all the child AdContainer controls and instantiates them.
                /// </summary>

                var adContainerElts = element.querySelectorAll(".adContainer");
                for (var i = 0, len = adContainerElts.length; i < len; i++) {
                    var adContainerElt = adContainerElts[i];
                    var adContainer = adContainerElt.winControl;
                    if (adContainer) {
                        adContainer.instantiateAd();
                    }
                }
            },

            adTypeMatchesClass: function (theOriginalType, theClass) {
                var theType = theOriginalType.toLowerCase();
                if (theClass === "adTypeThin" && theType === "thin") {
                    return true;
                } else if (theClass === "adTypeTile" && theType === "tile") {
                    return true;
                } else if (theClass === "adTypeFullPageLandscape" && theType === "fullPage") {
                    return true;
                } else if (theClass === "adTypeFullPagePortrait" && theType === "fullPage") {
                    return true;
                } else {
                    return (theClass && theType && theClass === theType);
                }
            },

            isNumber: function (n) {
                /// <summary>
                /// Returns true if n is a number
                /// </summary>

                return !isNaN(parseFloat(n)) && isFinite(n);
            },

            convertPageIndexToPageNumber: function (pageIndex) {
                /// <summary>
                /// Converts the given page index to a presentable string. If index is -1, returns empty string.
                /// </summary>
                return (pageIndex === -1 ? "" : (pageIndex + 1) + "");
            },

            convertPageNumberDataToString: function (pageIndex, pageCount) {
                /// <summary>
                /// Converts the given page number data (index and count) to a presentable string.
                /// </summary>
                return WinJS.Resources.getString("BingApps/PageOf").value.format(pageIndex + 1, pageCount);
            },

            _getExclusion: function (startColumn, columns, heightForColumns, rowAlign, exclusions, gridOptions) {
                var exclusion = {
                    column: startColumn,
                    columnSpan: columns,
                    rowAlign: rowAlign,
                    height: heightForColumns,
                };
                var overlap = false;
                for (var i = 0, len = exclusions.length; i < len; i++) {
                    var testExclusion = exclusions[i];
                    overlap = overlap || this._doExclusionsOverlap(testExclusion, exclusion, gridOptions);
                    if (overlap) {
                        break;
                    }
                }

                return overlap ? null : exclusion;
            },

            _doExclusionsOverlap: function (ex1, ex2, gridOptions) {
                var columnHeight = gridOptions.columnHeight;
                var overlap = 
                    (ex1.height && ex2.height && (ex1.rowAlign === ex2.rowAlign) && (ex1.column < ex2.column + ex2.columnSpan) && (ex2.column < ex1.column + ex1.columnSpan)) ||
                    (ex1.height && ex2.height && (ex1.rowAlign !== ex2.rowAlign) && (ex1.column < ex2.column + ex2.columnSpan) && (ex2.column < ex1.column + ex1.columnSpan) && (ex1.height + ex2.height > columnHeight));
                return overlap;
            },

            _convertGridColumnToColumnIndex: function (gridColumn, columnCount) {
                return (gridColumn - 2 - (Math.floor(gridColumn / (columnCount * 2 + 1)))) / 2;
            },

            _isColumnInRange: function (rangeStart, rangeSpan, columnIndex) {
                return (columnIndex >= rangeStart && columnIndex < rangeStart + rangeSpan);
            },

        },
    });

})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // ArticleReaderLayout is the main control and is responsible for rendering article content in a magazine-style UI.
    WinJS.Namespace.define("BingApps.UI", {
        ArticleReaderLayout: WinJS.Class.define(
            function (elt, options) {
                /// <summary>
                /// Creates an instance of the ArticleReaderLayout control.
                /// </summary>
                /// <param name="options">
                /// - paginatedViewManager: handler for mouse/keyboard scroll behavior
                /// </param>

                // create the dom elements
                elt = this._elt = elt || document.createElement("div");
                elt.winControl = this;
                WinJS.Utilities.addClass(elt, "reader");

                var surface = this._surface = document.createElement("div");
                WinJS.Utilities.addClass(surface, "surface");
                elt.appendChild(surface);

                var contentFrame = document.createElement("iframe");
                WinJS.Utilities.addClass(contentFrame, "contentFrame");
                elt.appendChild(contentFrame);

                // create surface manager
                var surfaceManager = this._surfaceManager = new BingApps.UI.SurfaceManager({
                    surface: surface,
                });

                // create content frame manager
                var paginatedViewManager = options.paginatedViewManager;
                var contentFrameManager = this._contentFrameManager = new BingApps.UI.ContentFrameManager({
                    contentFrame: contentFrame,
                    paginatedViewManager: paginatedViewManager,
                });

                // create the disposal manager
                var disposalManager = this._disposalManager = new BingApps.UI.DisposalManager();

                this._header = null;
                this._context = null;
                this._isRendered = false;
            },
            {
                _elt: null,
                _surfaceManager: null,
                _contentFrameManager: null,
                _disposalManager: null,
                _header: null,
                _instrumentationData: null,
                _context: null,
                _surface: null,
                _isRendered: null,

                element: {
                    get: function () {
                        return this._elt;
                    }
                },

                isRendered: {
                    get: function () {
                        return this._isRendered;
                    }
                },

                dispose: function () {
                    var surfaceManager = this._surfaceManager;
                    if (surfaceManager) {
                        surfaceManager.dispose();
                    }

                    var contentFrameManager = this._contentFrameManager;
                    if (contentFrameManager) {
                        contentFrameManager.dispose();
                    }

                    var disposalManager = this._disposalManager;
                    if (disposalManager) {
                        disposalManager.runAllDisposedDelegates();
                        disposalManager.dispose();
                    }

                    var elt = this._elt;
                    elt.innerHTML = "";

                    this._header = null;
                },

                getHeader: function () {
                    /// <summary>
                    /// Returns the article header object used for sharing.
                    /// </summary>
                    return this._header;
                },
                getInstrumentationData: function () {
                    /// <summary>
                    /// Returns the data object used for instrumentation.
                    /// </summary>
                    return this._instrumentationData;
                },

                /*
                Logic Implemented in this function, where:
                - adPartnerName == 1 when adPartnerName is present and non-empty
                - PartnerAd == 1 when an override with a matching PartnerId & size is present
                - NonPartnerAd == 1 when an override with a matching size & empty PartnerId is present

                adPartnerName PartnerAd NonPartnerAd Ad displayed
                1             1         *            Partner Ad
                1	          0         *	         NO AD
                0	          *     	1       	 NonPartnerAd
                0       	  1     	0	         NO AD
                0	          0     	0	         Use what's in adGroup
                */
                _findAdOverride: function (adClass, adOverrides, adPartnerName) {
                    var foundAPartnerAdSameSize = false;
                    var foundAdUnitIdOverride = "";
                    var action;
                    var i, j;

                    adOverrides = adOverrides || [];

                    for (i = 0; i < adOverrides.length && !foundAdUnitIdOverride; i++) {
                        var adOverride = adOverrides[i];
                        if ((adPartnerName && adOverride.partnerId === adPartnerName) ||
                                (!adPartnerName && !adOverride.partnerId)) {
                            for (j = 0; j < adOverride.ads.length && !foundAdUnitIdOverride; j++) {
                                if (BingApps.UI.ArticleReaderUtils.adTypeMatchesClass(adOverride.ads[j].type, adClass)) {
                                    foundAdUnitIdOverride = adOverride.ads[j].id;
                                }
                            }
                        } else if (!adPartnerName && adOverride.partnerId) {
                            /* this case is needed to implement this part of the logic:
                            adPartnerName PartnerAd NonPartnerAd Ad displayed
                            0       	  1     	0	         NO AD
                            0	          0     	0	         Use what's in adGroup
                            */
                            for (j = 0; j < adOverride.ads.length && !foundAdUnitIdOverride; j++) {
                                if (BingApps.UI.ArticleReaderUtils.adTypeMatchesClass(adOverride.ads[j].type, adClass)) {
                                    foundAPartnerAdSameSize = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (foundAdUnitIdOverride) {
                        action = "override";
                    } else if ((adPartnerName) ||
                               (!adPartnerName && foundAPartnerAdSameSize)) {
                        action = "noAd";
                    } else {
                        action = "useDefault";
                    }

                    return { action: action, adUnitIdOverride: foundAdUnitIdOverride};
                },

                _extractVideoOverride: function (adOverrides, adPartnerName) {
                    var matchResults = this._findAdOverride("video", adOverrides, adPartnerName);
                    var videoOptions = {};

                    if (matchResults.action === "override") {
                        videoOptions.adUnitId = matchResults.adUnitIdOverride;
                        videoOptions.enableVideoAds = true;
                    } else if (matchResults.action === "noAd") {
                        videoOptions.enableVideoAds = false;
                    } //else useDefault
                    return videoOptions;
                },

                _overrideAd: function (adMetadata, adOverrides, adPartnerName) {
                    var adMetadataObj = null;

                    // See bug 372332 for scenario when adMetadata is empty
                    if (adMetadata && typeof adMetadata === "string") {
                        try {
                            adMetadataObj = JSON.parse(adMetadata);
                        } catch (ex) {
                        }
                    } else {
                        adMetadataObj = adMetadata;
                    }

                    if (adMetadataObj &&
                            adMetadataObj.controlOptions &&
                            adMetadataObj.controlOptions.className &&
                            typeof adMetadataObj.controlOptions.className === "string") {

                        var matchResults = this._findAdOverride(adMetadataObj.controlOptions.className, adOverrides, adPartnerName);

                        if (matchResults.action === "override") {
                            adMetadataObj.controlOptions.adUnitId = matchResults.adUnitIdOverride;
                            adMetadata = adMetadataObj;
                        } else if (matchResults.action === "noAd") {
                            adMetadata = "";
                        }
                    }
                    return adMetadata;
                },

                _overrideAds: function (adGroups, adOverrides, adPartnerName) {
                    if (!adOverrides || !adOverrides.length) {
                        if (adPartnerName) {
                            // no ads
                            adGroups = [];
                        }
                        return adGroups;
                    }

                    for (var i = 0; i < adGroups.length; i++) {
                        var adGroup = adGroups[i];
                        for (var j = 0; j < adGroup.adMetadatas.length; j++) {
                            adGroup.adMetadatas[j] = this._overrideAd(adGroup.adMetadatas[j], adOverrides, adPartnerName);
                            if (!adGroup.adMetadatas[j]) {
                                adGroups[i] = {};
                            }
                        }
                    }

                    return adGroups;
                },

                render: function (articleData, renderOptions) {
                    /// <summary>
                    /// Renders the given articleData in the control.
                    /// </summary>
                    /// <param name="articleData">The article data. Must conform to the article JSON format.</param>
                    /// <param name="renderOptions">
                    /// Options to use for rendering. The following are respected:
                    /// - gridOptions: Grid measurements, as calculated by GridCalculator
                    /// - cacheId: Cache ID to use for images.
                    /// - initialTextAttributes: Initial text attributes
                    /// - validActions: Dictionary of actions and their definitions. These are rendered at the end of the article.
                    /// - actionsHandler: Object that handles EOA actions. onActionsInvoked() must be defined on it.
                    /// - articleMetadata: Metadata about the article. Comes from the provider.
                    /// - contentCssPaths: Array of CSS files to apply to the content document. articleMetadata.contentCssPaths takes precedence if it exists.
                    /// - actionKeys: Array of actions applicable to this article. articleMetadata.actionKeys takes precedence if it exists.
                    /// - tocAnchorText: Text to use for toc anchor. articleMetadata.tocAnchorText takes precedence if it exists.
                    /// - renderAll: Whether to render all blocks or not. articleMetadata.renderAll takes precedence if it exists.
                    /// - adGroups: Definitions for ads within the article.
                    /// - viewportManager: Object that can be used for scrolling the viewport or querying it.
                    /// </param>

                    var that = this;
                    var gridOptions = renderOptions.gridOptions;
                    var cacheId = renderOptions.cacheId;
                    var initialTextAttributes = renderOptions.initialTextAttributes;
                    var validActions = renderOptions.validActions;
                    var actionsHandler = renderOptions.actionsHandler;
                    var articleMetadata = renderOptions.articleMetadata;
                    var adPartnerName = (articleMetadata ? articleMetadata.instrumentationId : null) || renderOptions.adPartnerName || null;
                    var contentCssPaths = (articleMetadata ? this._maybeConvertToJsonArray(articleMetadata.contentCssPaths) : null) || renderOptions.contentCssPaths || [];
                    var actionKeys = (articleMetadata ? this._maybeConvertToJsonArray(articleMetadata.actionKeys) : null) || renderOptions.actionKeys || [];
                    var tocAnchorText = (articleMetadata ? articleMetadata.tocAnchorText : null) || renderOptions.tocAnchorText || null;
                    var renderAll = articleMetadata ? (typeof (articleMetadata.renderAll) === "boolean" ? articleMetadata.renderAll : (renderOptions.renderAll || false)) : (renderOptions.renderAll || false);
                    var adGroups = (articleMetadata ? this._maybeConvertToJsonArray(articleMetadata.adGroups) : null) || renderOptions.adGroups || [];
                    var viewportManager = renderOptions.viewportManager;
                    var disposalManager = this._disposalManager;
                    var adOverrides = articleMetadata ? articleMetadata.adOverrides : null;
                    adGroups = this._overrideAds(adGroups, adOverrides, adPartnerName);
                    var videoOptions = this._extractVideoOverride(adOverrides, adPartnerName);

                    var header = this._header = {
                        snippet: null,
                        headline: null,
                        publisherName: null,
                        author: null,
                        date: null,
                    };
                    var instrumentationData = this._instrumentationData = {
                        trailingMediaBlockCount: null,
                    };
                    // initialize the context object. the context object is passed through all the render steps.
                    var context = this._context = {
                        gridOptions: gridOptions,
                        renderableData: {
                            content: null,
                            titleBlock: null,
                            renderableBlocks: null,
                        },
                        calibrationData: {
                            contentDensity: null,
                            contentColumnCount: null,
                        },
                        auxiliaryData: {
                            articleHeader: header,
                            instrumentationData: instrumentationData,
                            tocFlyout: null,
                            tocAnchorText: tocAnchorText,
                            renderAll: renderAll,
                            bookmarksList: null,
                            immediateBookmarks: null,
                            cacheId: cacheId,
                            initialTextAttributes: initialTextAttributes,
                            articleMetadata: articleMetadata,
                            flowId: null,
                            contentCssPaths: contentCssPaths,
                            actionKeys: actionKeys,
                            viewportManager: viewportManager,
                            disposalManager: disposalManager,
                            showBookmarks: null,
                        },
                        layoutData: {
                            pageCount: null,
                            titleLayoutData: null,
                            blockLayoutDatas: null,
                        },
                        adData: {
                            hasEndAd: null,
                            hasInlineAds: null,
                        },
                    };

                    // get renderable data, article header, bookmarks list, etc.
                    this._preprocessArticleData(articleData, validActions, actionsHandler, adGroups, context, videoOptions);

                    // yielding the UI thread to make sure populate content after IFrame load to the page. 
                    var promise = WinJS.Promise.timeout(0).then(function () {
                        // populate iframe with content 
                        that._populateContent(context);

                        // create aux ui (e.g. toc flyout)
                        that._createAuxiliaryUi(context);

                        // initializeSurface
                        that._initializeSurface(context);
                    })
                   .then(function () {
                       // calibrate
                       return that._calibrateLayout(context);
                   })
                   .then(function () {
                       // calculate layout
                       that._calculateLayout(context);

                       // populate surface and blocks
                       return that._populateSurface(context);
                   })
                   .then(function () {
                       // associate layout with surface
                       that._associateLayoutWithElements(context);

                       // fix page estimates and trailing blocks
                       return that._adjustSurface(context);
                   })
                   .then(function () {
                       that._isRendered = true;
                   });

                    return promise;
                },

                relayout: function (relayoutOptions) {
                    /// <summary>
                    /// Relays out the article using the existing context that was produced in the render() call. It updates parts of the
                    /// context based on the given relayoutOptions.
                    /// </summary>
                    /// <param name="relayoutOptions">
                    /// - gridOptions: the new grid measurements.
                    /// </param>

                    var currentContext = this._context;
                    currentContext.gridOptions = relayoutOptions.gridOptions;
                    var contentCssPaths = relayoutOptions.contentCssPaths;
                    var promise = WinJS.Promise.wrap(null);

                    if (currentContext) {
                        // setup css paths
                        if (contentCssPaths) {
                            this._contentFrameManager.updateCssFiles(contentCssPaths);
                        }

                        // initialize surface
                        this._initializeSurface(currentContext);

                        // calibrate
                        this._calibrateLayout(currentContext);

                        // calculate layout
                        this._calculateLayout(currentContext);

                        // associate layout with surface
                        this._associateLayoutWithElements(currentContext);

                        // fix page estimates and trailing blocks
                        promise = this._adjustSurface(currentContext);
                    }

                    return promise;
                },

                setTextAttributes: function (textAttributes) {
                    /// <summary>
                    /// Sets the text size and style of the article reader.
                    /// </summary>
                    /// <param name="textAttributes">
                    /// - style: primary or secondary
                    /// - size: small, medium, or large
                    /// </param>

                    var contentFrameManager = this._contentFrameManager;
                    contentFrameManager.setTextAttributes(textAttributes);
                    var promise = WinJS.Promise.wrap(null);

                    var surfaceManager = this._surfaceManager;
                    var currentContext = this._context;
                    if (currentContext) {
                        promise = surfaceManager.adjust(currentContext);
                    }
                    return promise;
                },

                getPageCount: function () {
                    var surfaceManager = this._surfaceManager;
                    var pageCount = surfaceManager.getPageCount();
                    return pageCount;
                },

                scrollToSection: function (sectionIndex) {
                    var context = this._context;
                    if (context) {
                        var surfaceManager = this._surfaceManager;
                        surfaceManager.scrollToSection(sectionIndex, context);
                    }
                },

                articleFocusLost: function () {
                    var disposalManager = this._disposalManager;
                    if (disposalManager) {
                        disposalManager.runAllArticleFocusLostDelegates();
                    }
                },

                onActionInvoked: function (event) {
                    var data = event.data;
                    var actionOptions = data.actionOptions;
                    var actionType = actionOptions.actionType;

                    switch (actionType) {
                        case "LaunchUri":
                            var actionAttributes = actionOptions.actionAttributes;
                            var uri = actionAttributes.uri;
                            this._launchUri(uri);
                            break;
                    }
                },

                _launchUri: function (uri) {
                    try {
                        var options = new Windows.System.LauncherOptions();
                        Windows.System.Launcher.launchUriAsync(new Windows.Foundation.Uri(uri), options);
                    }
                    catch (ex) {
                        // do nothing if launch fails
                    }
                },

                _preprocessArticleData: function (articleData, validActions, actionsHandler, adGroups, context, videoOptions) {
                    // concat all content
                    // determine block character positions
                    // article header for sharing
                    // bookmarks list

                    var blocks = articleData.blocks;
                    var metadata = articleData.metadata;
                    var maxSnippetLength = BingApps.UI.ArticleReaderLayout._maxSnippetLength;
                    var snippet = "";
                    var contentArray = [];
                    var sectionCount = 0;
                    var contentLength = 0;
                    var renderableBlocks = [];
                    var referralBlock;

                    var bookmarks = {};
                    var bookmarkIndex = 0;
                    for (var i = 0, len = blocks.length; i < len; i++) {
                        var block = blocks[i];
                        var type = block.type;

                        if (type === "SectionBreak") {
                            var sectionName = block.attributes.name;

                            // add to content array
                            var sectionIndex = sectionCount;
                            var html = this._getSectionHeaderHtml(sectionIndex, sectionName);
                            contentArray.push(html);
                            contentLength += html.length;
                            sectionCount++;

                            // create bookmark object, pageIndex is populated later
                            var pageIndex = -1;
                            var bookmark = {
                                name: sectionName,
                                pageIndex: pageIndex,
                                pageNumber: BingApps.UI.ArticleReaderUtils.convertPageIndexToPageNumber(pageIndex),
                            };
                            bookmarks["b" + bookmarkIndex] = bookmark;
                            bookmarkIndex++;

                        } else if (type === "Content") {
                            var content = block.attributes.content;

                            // add to all content
                            contentArray.push(content);
                            contentLength += content.length;

                            // add to snippet
                            if (snippet.length < maxSnippetLength) {
                                var div = document.createElement("div");
                                WinJS.Utilities.setInnerHTML(div, toStaticHTML(content));
                                var text = div.innerText.trim();
                                snippet = [[snippet, text].join(" ").substr(0, maxSnippetLength), "..."].join("").trim();
                            }
                        } else if (type === "Referral") {
                            referralBlock = block;
                        } else {
                            renderableBlocks.push({
                                block: block,
                                position: contentLength,
                            });
                        }

                        //add per Partner pano adUnitId for videos here
                        if (type === "InlineVideo" && context.auxiliaryData) {
                            context.auxiliaryData.videoOptions = videoOptions;
                        } 
                    }
                    var renderableData = context.renderableData;
                    renderableData.content = contentArray.join("");
                    renderableData.renderableBlocks = renderableBlocks;

                    // bookmarks list
                    var auxiliaryData = context.auxiliaryData;
                    var bookmarksListData = {
                        bookmarks: bookmarks,
                    };
                    var bookmarksList = WinJS.Binding.as(bookmarksListData);
                    auxiliaryData.bookmarksList = bookmarksList;

                    // article header
                    var articleHeader = auxiliaryData.articleHeader;
                    articleHeader.snippet = snippet;

                    // renderable data
                    var title = articleData.title;
                    var titleBlock = this._getRenderableTitleBlock(title, context);
                    renderableData.titleBlock = titleBlock;

                    // default toc anchor text
                    auxiliaryData.tocAnchorText = auxiliaryData.tocAnchorText || WinJS.Resources.getString("BingApps/Contents").value;

                    // actions block (end of article)
                    this._processActions(context, validActions, actionsHandler, renderableBlocks, contentLength, articleData);

                    // push referral block at the end
                    if (referralBlock) {
                        renderableBlocks.push({
                            block: referralBlock,
                            position: contentLength,
                        });
                    }

                    // preprocess ad data
                    if (adGroups) {
                        var adData = context.adData;
                        for (var k = 0, lenk = adGroups.length; k < lenk; k++) {
                            var adGroup = adGroups[k];
                            var adGroupType = adGroup.type;
                            var adMetadatas = adGroup.adMetadatas;
                            var adConfig = adGroup.config;
                            switch (adGroupType) {
                                case "end":
                                    if (!referralBlock) {
                                        // referral block takes precedence over end ad
                                        var alreadyHasEndAd = adData.hasEndAd;
                                        if (!alreadyHasEndAd) {
                                            adData.hasEndAd = true;
                                            var endAdMetadata = adMetadatas[0];
                                            var endAdControlType = endAdMetadata.controlType;
                                            var endAdControlOptions = endAdMetadata.controlOptions;
                                            var width = parseInt(endAdMetadata.width);
                                            var height = parseInt(endAdMetadata.height);
                                            var endAdBlock = {
                                                type: "EndAd",
                                                attributes: {
                                                    controlOptions: endAdControlOptions,
                                                    controlType: endAdControlType,
                                                    width: width,
                                                    height: height,
                                                },
                                            };
                                            renderableBlocks.push({
                                                block: endAdBlock,
                                                position: contentLength,
                                            });
                                        }
                                    }
                                    break;
                                case "inline":
                                    adData.hasInlineAds = true;
                                    for (var l = 0, lenl = adMetadatas.length; l < lenl; l++) {
                                        var inlineAdMetadata = adMetadatas[l];
                                        var inlineAdControlType = inlineAdMetadata.controlType;
                                        var inlineAdControlOptions = inlineAdMetadata.controlOptions;
                                        var width = parseInt(inlineAdMetadata.width);
                                        var height = parseInt(inlineAdMetadata.height);

                                        var inlineAdBlock = {
                                            type: "InlineAd",
                                            attributes: {
                                                controlOptions: inlineAdControlOptions,
                                                controlType: inlineAdControlType,
                                                width: width,
                                                height: height,
                                            },
                                        };
                                        var position = Math.floor(contentLength * (l + 1) / (lenl + 1)); // sprinkle evenly 
                                        renderableBlocks.push({
                                            block: inlineAdBlock,
                                            position: position,
                                        });
                                    }
                                    break;
                            }
                        }
                    }

                    // sort renderable blocks based on their position in the data
                    renderableBlocks.sort(function (a, b) {
                        return a.position - b.position;
                    });

                    // there can't be multiple articles side by side so constant id is ok.
                    var flowId = "content";
                    auxiliaryData.flowId = flowId;
                },

                _processActions: function (context, validActions, actionsHandler, renderableBlocks, position, articleData) {
                    var auxiliaryData = context.auxiliaryData;
                    var actionKeys = auxiliaryData.actionKeys;
                    if (actionKeys && actionKeys.length) {
                        this._processActionsFromMetadata(context, validActions, actionsHandler, renderableBlocks, position);
                    }
                    else {
                        this._processActionsFromData(articleData, renderableBlocks, position);
                    }
                },

                _processActionsFromData: function (articleData, renderableBlocks, position) {
                    var articleActions = {};
                    var actions = articleData.actions;
                    if (actions && actions.length) {
                        for (var i = 0, len = actions.length; i < len; i++) {
                            var action = actions[i];
                            var labelSize = action.labelSize;
                            var articleAction = {
                                text: action.label,
                                textSize: labelSize ? labelSize.toLowerCase() : "small",
                                actionOptions: {
                                    actionType: action.type,
                                    actionAttributes: action.attributes,
                                },
                            };

                            var icon = action.icon;
                            if (icon) {
                                articleAction.icon = {
                                    type: "image",
                                    url: icon.url,
                                };
                            }

                            var actionKey = "action_" + i;
                            articleActions[actionKey] = articleAction;
                        }

                        var actionsHandler = this;
                        this._maybeAddActionsBlock(articleActions, actionsHandler, renderableBlocks, position);
                    }
                },

                _processActionsFromMetadata: function (context, validActions, actionsHandler, renderableBlocks, position) {
                    var articleActions = {};
                    var auxiliaryData = context.auxiliaryData;
                    var actionKeys = auxiliaryData.actionKeys;
                    if (actionKeys && actionKeys.length) {
                        for (var j = 0, lenj = Math.min(3, actionKeys.length) ; j < lenj; j++) {
                            var actionKey = actionKeys[j];
                            var validAction = validActions[actionKey];
                            if (validAction) {
                                articleActions[actionKey] = validAction;
                            }
                        }
                    }

                    this._maybeAddActionsBlock(articleActions, actionsHandler, renderableBlocks, position);
                },

                _maybeAddActionsBlock: function (articleActions, actionsHandler, renderableBlocks, position) {
                    var hasActions = false;
                    if (articleActions) {
                        for (var key in articleActions) {
                            hasActions = true;
                            break;
                        }
                    }
                    if (hasActions) {
                        var actionsBlock = {
                            type: "Actions",
                            attributes: {
                                articleActions: articleActions,
                                actionsHandler: actionsHandler,
                            },
                        };
                        renderableBlocks.push({
                            block: actionsBlock,
                            position: position,
                        });
                    }
                },

                _populateContent: function (context) {
                    // set all content into iframe
                    var contentFrameManager = this._contentFrameManager;
                    var auxiliaryData = context.auxiliaryData;
                    var flowId = auxiliaryData.flowId;

                    var renderableData = context.renderableData;
                    var content = renderableData.content;
                    var initialTextAttributes = auxiliaryData.initialTextAttributes;
                    var contentCssPaths = auxiliaryData.contentCssPaths;
                    contentFrameManager.setup(initialTextAttributes, flowId, contentCssPaths);
                    contentFrameManager.addContent(content);
                },

                _createAuxiliaryUi: function (context) {
                    // create toc flyout
                    this._createTocFlyout(context);
                },

                _initializeSurface: function (context) {
                    // initialize the surface
                    var surfaceManager = this._surfaceManager;
                    surfaceManager.initializeSurface(context);
                },

                _calibrateLayout: function (context) {
                    // add a single content block to surface
                    // attach surface
                    // put data in content block
                    // get number of characters in content block
                    // attach the surface and get content density from it, then detach the surface
                    this._attachSurface();
                    var surfaceManager = this._surfaceManager;
                    var contentDensity = surfaceManager.getContentDensity(context);

                    // calculate number of columns that we will need to fit all the content
                    var renderableData = context.renderableData;
                    var content = renderableData.content;
                    var contentLength = content.length;
                    var gridOptions = context.gridOptions;
                    var columnWidth = gridOptions.columnWidth;
                    var columnHeight = gridOptions.columnHeight;
                    var columnCount = gridOptions.columnCount;

                    var contentColumnCount = contentDensity === 0 ? 0 : Math.ceil((contentLength / contentDensity) / (columnWidth * columnHeight));

                    // update calibration data with all the findings
                    var calibrationData = context.calibrationData;
                    calibrationData.contentDensity = contentDensity;
                    calibrationData.contentColumnCount = contentColumnCount;
                },

                _calculateLayout: function (context) {
                    // for each block, determine where on the surface it goes (row, column, rowspan, colspan) [need height and row-align instead of rowspan if not granular grid]
                    // return layout data

                    var surfaceManager = this._surfaceManager;
                    surfaceManager.calculateLayout(context);
                },

                _populateSurface: function (context) {
                    // create content blocks
                    // create blocks and associated controls

                    var surfaceManager = this._surfaceManager;
                    var promise = surfaceManager.createElements(context);
                    return promise;
                },

                _associateLayoutWithElements: function (context) {
                    // for each layout info, update dom element

                    var surfaceManager = this._surfaceManager;
                    var promise = surfaceManager.associateLayoutWithElements(context);
                    return promise;
                },

                _adjustSurface: function (context) {
                    // add more pages or remove pages to match exact content length
                    // layout (or render?) trailing blocks such as end ad, referral block, etc.

                    // adjust surface
                    var surfaceManager = this._surfaceManager;
                    var promise = surfaceManager.adjust(context);

                    return promise;
                },

                _attachSurface: function () {
                    var surface = this._surface;
                    var elt = this._elt;
                    // prepend the surface to prevent DOM order changing, affecting accessibility
                    elt.insertBefore(surface, elt.firstChild);
                },

                _getSectionHeaderHtml: function (sectionIndex, sectionName) {
                    var sectionIdentifierPrefix = BingApps.UI.ArticleReaderLayout.sectionIdentifierPrefix;
                    var elt = document.createElement("h2");
                    elt.id = sectionIdentifierPrefix + sectionIndex;
                    elt.className = sectionIdentifierPrefix;
                    elt.innerText = sectionName;
                    var html = elt.outerHTML;

                    return html;
                },

                _getRenderableTitleBlock: function (title, context) {
                    // Given the title block that came from the data, do required data transformation on it to get it in 
                    // a form that can be rendered. This includes the backward compat code for getting author/publisher
                    // right, and converting styles 2 and 3 to style 1 with an inline image.

                    var renderableData = context.renderableData;
                    var renderableBlocks = renderableData.renderableBlocks;
                    var auxiliaryData = context.auxiliaryData;
                    var articleHeader = auxiliaryData.articleHeader;

                    var renderableTitle = {
                        headline: null,
                        style: null,
                        author: null,
                        date: null,
                        titleImage: null,
                        publisher: null,
                        kicker: null,
                    };

                    // kicker
                    var kicker = title.kicker;
                    renderableTitle.kicker = kicker || "";

                    // headline
                    var headline = title.headline;
                    renderableTitle.headline = headline || "";

                    // author
                    var publisherName = "";
                    if (title.publisher && title.publisher.name) {
                        publisherName = title.publisher.name;
                    }
                    var authorOrByline = title.author ? title.author : title.byline;
                    var author = authorOrByline !== publisherName ? authorOrByline : "";
                    renderableTitle.author = author || "";

                    // publisher
                    renderableTitle.publisher = title.publisher || "";

                    // date
                    var date = title.date || "";
                    var lastUpdatedDate = title.lastUpdatedDate || "";
                    var effectiveDate = lastUpdatedDate || date || "";
                    var separator = (publisherName.length > 0 && effectiveDate.toString().length > 0) ? " - " : "";
                    renderableTitle.date = (publisherName + separator + effectiveDate) || "";

                    // title style
                    this._determineTitleStyle(title, renderableTitle, context);

                    // show bookmarks for style 1 only
                    var style = renderableTitle.style;
                    auxiliaryData.showBookmarks = (style === 1);

                    // populate article header
                    articleHeader.headline = headline || "";
                    articleHeader.publisherName = publisherName || "";
                    articleHeader.author = author || "";
                    articleHeader.date = date || "";

                    return renderableTitle;
                },

                _determineTitleStyle: function (title, renderableTitle, context) {
                    var renderableData = context.renderableData;
                    var renderableBlocks = renderableData.renderableBlocks;

                    var titleStyle = title.style;
                    var titleImage = title.titleImage;
                    var titleRenderers = BingApps.UI.SurfaceManager.titleRenderers;

                    // Bug #384490
                    var isServerPaddedImage = this._fixServerPaddedImage(titleImage, renderableBlocks, renderableTitle);

                    if (!isServerPaddedImage) {
                        var renderableStyle;
                        var renderableTitleImage;
                        if (titleStyle) {
                            // title style is not null

                            renderableStyle = titleStyle;
                            // map equivalent styles
                            switch (renderableStyle) {
                                case 3:
                                    // 3 maps to 2
                                    renderableStyle = 2;
                                    break;
                                case 4:
                                    // 4 maps to 1
                                    renderableStyle = 1;
                                    break;
                            }

                            var titleRenderer = titleRenderers[renderableStyle];
                            if (titleRenderer) {
                                // title style is recognized

                                var gridOptions = context.gridOptions;
                                var pageHeight = gridOptions.pageHeight;
                                var pageWidth = gridOptions.pageWidth;
                                var screenSize = pageHeight * pageWidth;
                                var minSize = 1366 * 768;

                                if (screenSize < minSize) {
                                    // if screen is small, demote title image
                                    renderableStyle = 1;
                                    this._demoteTitleImageToInlineImage(titleImage, renderableBlocks);
                                }
                                else {
                                    switch (renderableStyle) {
                                        case 1:
                                            // demote the title image (if any)
                                            this._demoteTitleImageToInlineImage(titleImage, renderableBlocks);
                                            break;

                                        case 2:
                                            var validateResult2 = this._validateTitleImage(titleImage, renderableBlocks, 1.3, 1.89, 950, renderableStyle, renderableTitleImage);
                                            renderableStyle = validateResult2.renderableStyle;
                                            renderableTitleImage = validateResult2.renderableTitleImage;
                                            break;

                                        case 9:
                                            var validateResult9 = this._validateTitleImage(titleImage, renderableBlocks, 0.5, 0.89, 580, renderableStyle, renderableTitleImage);
                                            renderableStyle = validateResult9.renderableStyle;
                                            renderableTitleImage = validateResult9.renderableTitleImage;
                                            break;

                                        case 100:
                                            // demote the title image (if any)
                                            this._demoteTitleImageToInlineImage(titleImage, renderableBlocks);
                                            break;
                                    }
                                }
                            }
                            else {
                                // title style is not recognized
                                renderableStyle = 1;
                                this._demoteTitleImageToInlineImage(titleImage, renderableBlocks);
                            }
                        }
                        else {
                            // title style is null
                            renderableStyle = 1;
                            this._demoteTitleImageToInlineImage(titleImage, renderableBlocks);
                        }

                        renderableTitle.style = renderableStyle;
                        renderableTitle.titleImage = renderableTitleImage;
                    }
                },

                _fixServerPaddedImage: function (titleImage, renderableBlocks, renderableTitle) {
                    // Bug #384490

                    var isServerPaddedImage = false;

                    if (titleImage) {
                        var image = titleImage.image;
                        if (image) {
                            var inlineResource = BingApps.UI.ArticleReaderUtils.getImageResource(image, "inline");
                            if (inlineResource) {
                                // approximate the position of the inline image to the halfway between the start of the article and the first block, 
                                // because we are assuming that the server took the first inline image and padded it
                                var minPosition = Number.MAX_VALUE;
                                for (var i = 0, len = renderableBlocks.length; i < len; i++) {
                                    var renderableBlock = renderableBlocks[i];
                                    var position = renderableBlock.position;
                                    minPosition = Math.min(minPosition, position);
                                }
                                var inlinePosition = (minPosition === Number.MAX_VALUE) ? 0 : Math.max(0, minPosition / 2);

                                // replace padded image with non-padded image
                                var originalResource = BingApps.UI.ArticleReaderUtils.getImageResource(image, "original");
                                var lowResResource = BingApps.UI.ArticleReaderUtils.getImageResource(image, "lowRes");
                                var inlineLowResResource = BingApps.UI.ArticleReaderUtils.getImageResource(image, "inlineLowRes");

                                if (originalResource) {
                                    originalResource.name = "unused";
                                }
                                if (lowResResource) {
                                    lowResResource.name = "unused";
                                }
                                if (inlineLowResResource) {
                                    inlineLowResResource.name = "lowRes";
                                }
                                inlineResource.name = "original";

                                // create inline image and add it to the list of blocks
                                var inlineBlock = {
                                    position: inlinePosition,
                                    block: {
                                        type: "InlineImage",
                                        attributes: titleImage,
                                    }
                                };
                                renderableBlocks.unshift(inlineBlock);

                                // remove title image
                                isServerPaddedImage = true;
                                renderableTitle.style = 1;
                                renderableTitle.titleImage = null;
                            }
                        }
                    }

                    return isServerPaddedImage;
                },

                _validateTitleImage: function (titleImage, renderableBlocks, minAspectRatio, maxAspectRatio, minWidth, renderableStyle, renderableTitleImage) {
                    if (titleImage) {
                        var imageResource = BingApps.UI.ArticleReaderUtils.getImageResource(titleImage.image);

                        // title image exists
                        var width = imageResource.width;
                        var height = imageResource.height;
                        var aspectRatio = width / height;

                        if (aspectRatio < minAspectRatio || aspectRatio > maxAspectRatio || width < minWidth) {
                            // title image is not valid, demote it and go to 1
                            this._demoteTitleImageToInlineImage(titleImage, renderableBlocks);
                            renderableStyle = 1;
                        }
                        else {
                            // title image is valid, use it
                            renderableTitleImage = titleImage;
                        }
                    }
                    else {
                        // if no title image, go to 1
                        renderableStyle = 1;
                    }

                    return {
                        renderableStyle: renderableStyle,
                        renderableTitleImage: renderableTitleImage,
                    };
                },

                _demoteTitleImageToInlineImage: function (titleImage, renderableBlocks) {
                    if (titleImage) {
                        var renderableBlock = {
                            position: 0,
                            block: {
                                type: "InlineImage",
                                attributes: titleImage,
                            }
                        };
                        renderableBlocks.unshift(renderableBlock);
                    }
                },

                _createTocFlyout: function (context) {
                    var tocFlyout;
                    var auxiliaryData = context.auxiliaryData;
                    var bookmarksList = auxiliaryData.bookmarksList;
                    var gridOptions = context.gridOptions;
                    var surfaceManager = this._surfaceManager;
                    var columnHeight = gridOptions.columnHeight;
                    var columnWidth = gridOptions.columnWidth;
                    var columnCount = gridOptions.columnCount;
                    var hasBookmarks = BingApps.UI.ArticleReaderUtils.hasBookmarks(context);

                    if (hasBookmarks) {
                        var elt = this._elt;
                        var tocFlyoutElt = document.createElement("div");
                        WinJS.Utilities.addClass(tocFlyoutElt, "tocFlyout");
                        tocFlyoutElt.style.width = (columnCount === 1 ? 350 : columnWidth) + "px";
                        elt.appendChild(tocFlyoutElt);

                        var tocElt = document.createElement("div");
                        tocFlyoutElt.appendChild(tocElt);
                        var viewportManager = auxiliaryData.viewportManager;
                        var toc = new BingApps.UI.Toc(tocElt, {
                            bookmarksList: bookmarksList,
                            viewportManager: viewportManager,
                            tocFlyout: null,
                        });

                        var alignment = (window.getComputedStyle(elt).direction === "rtl") ? "right" : "left";

                        tocFlyout = new WinJS.UI.Flyout(tocFlyoutElt, {
                            placement: "top",
                            alignment: alignment
                        });

                        toc.tocFlyout = tocFlyout;
                    }

                    auxiliaryData.tocFlyout = tocFlyout;
                },

                _maybeConvertToJsonArray: function (array) {
                    var jsonArray;
                    if (array && array.length) {
                        jsonArray = [];
                        for (var i = 0, len = array.length; i < len; i++) {
                            var item = array[i];
                            jsonArray.push(item);
                        }
                    }
                    return jsonArray || null;
                },
            },
            {
                /// <summary>Maxiumum length of snippet used for sharing.</summary>
                _maxSnippetLength: 100,

                /// <summary>Prefix used for identifying sections.</summary>
                sectionIdentifierPrefix: "__articleSection",
            })
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Manages a scrollable panorama of article readers
    WinJS.Namespace.define("BingApps.UI", {
        ArticleReaderOrchestrator: WinJS.Class.mix(WinJS.Class.define(
            function (elt, options) {
                /// <summary>
                /// Creates an instance of ArticleReaderOrchestrator.
                /// </summary>
                /// <param name="options">
                /// </param>

                // create the dom elements
                elt = elt || document.createElement("div");
                elt.winControl = this;

                // zoomable
                var zoomable = this._zoomable = elt;
                zoomable.className = "zoomable";

                // viewport
                var viewport = this._viewport = document.createElement("div");
                WinJS.Utilities.addClass(viewport, "orchestrator");
                zoomable.appendChild(viewport);

                // panel
                var panel = this._panel = document.createElement("div");
                WinJS.Utilities.addClass(panel, "panel viewport");
                viewport.appendChild(panel);

                // viewport events
                var scrollListener = this._scrollListener = this._onScroll.bind(this);
                viewport.addEventListener("scroll", scrollListener);

                // zoomable events
                var contentZoomListener = this._contentZoomListener = this._onContentZoom.bind(this);
                zoomable.addEventListener("MSContentZoom", contentZoomListener);

                // paginated view manager for keyboard/mouse scroll
                var paginatedViewManager = this._paginatedViewManager = new BingApps.UI.PaginatedViewManager({
                    orchestrator: this,
                });
                paginatedViewManager.attachEventListeners(elt);

                this._article = null;
                this._redrawPromise = WinJS.Promise.wrap(null);
                this._pageWidth = 0;
                this._pageHeight = 0;
                this._isZoomedIn = false;
                this._scrollTimer = null;
                this._monitorScroll = true;

                Object.defineProperties(this, WinJS.Utilities.createEventProperties("pagetransition"));
                Object.defineProperties(this, WinJS.Utilities.createEventProperties("scrollonepage"));
            },
            {
                _viewport: null,
                _panel: null,
                _article: null,
                _redrawPromise: null,
                _pageWidth: null,
                _pageHeight: null,
                _contentZoomListener: null,
                _scrollListener: null,
                _scrollTimer: null,
                _monitorScroll: null,
                _paginatedViewManager: null,
                _staticPositionTimer: null,
                _isZoomedIn: null,
                _scrollAnimationTimeout: null,
                _zoomable: null,
                _pageCount: null,
                _currentPageNumber: null,
                _hasNextArticle: false,
                _hasPreviousArticle: false,

                viewport: {
                    get: function () {
                        return this._viewport;
                    },
                },

                zoomable: {
                    get: function () {
                        return this._zoomable;
                    },
                },

                currentPageIndex: {
                    get: function () {
                        return this._getCurrentPageIndex();
                    },
                },

                focusViewport: function () {
                    this._viewport.focus();
                },

                dispose: function () {
                    var panel = this._panel;
                    var viewport = this._viewport;
                    var zoomable = this._zoomable;

                    var scrollListener = this._scrollListener;
                    viewport.removeEventListener("scroll", scrollListener);
                    var contentZoomListener = this._contentZoomListener;
                    zoomable.removeEventListener("MSContentZoom", contentZoomListener);

                    var paginatedViewManager = this._paginatedViewManager;
                    paginatedViewManager.dispose();

                    var article = this._article;

                    if (article) {
                        var articleReaderLayout = article.articleReaderLayout;
                        var placeholder = article.placeholder;

                        if (articleReaderLayout) {
                            articleReaderLayout.dispose();
                        }
                        if (placeholder) {
                            placeholder.dispose();
                        }
                    }

                    var scrollTimer = this._scrollTimer;
                    clearTimeout(scrollTimer);
                },

                setTextAttributes: function (textAttributes) {
                    var that = this;
                    var article = this._article;
                    if (article) {
                        var articleReaderLayout = article.articleReaderLayout;

                        if (articleReaderLayout) {
                            var pageIndex = this._getCurrentPageIndex();
                            articleReaderLayout.setTextAttributes(textAttributes)
                                .then(function () {
                                    that._adjustViewport(false);
                                    that._scrollToPageIndex(pageIndex);
                                });
                        }
                    }
                },

                getHeader: function () {
                    var article = this._article;

                    var header;
                    if (article) {
                        var articleReaderLayout = article.articleReaderLayout;
                        if (articleReaderLayout) {
                            header = articleReaderLayout.getHeader();
                        }
                    }
                    return header;
                },

                isArticleRendered: function () {
                    /// <summary>
                    /// Returns true the article is currently rendered in the panorama.
                    /// </summary>

                    var isArticleRendered = false;
                    var article = this._article;
                    if (article) {
                        var articleReaderLayout = article.articleReaderLayout;
                        isArticleRendered = articleReaderLayout ? true : false;
                    }

                    return isArticleRendered;
                },

                getPageWidth: function () {
                    /// <summary>
                    /// Returns the current page width used to render the article.
                    /// </summary>

                    return this._pageWidth;
                },
                getPageHeight: function () {
                    /// <summary>
                    /// Returns the current page height used to render the article.
                    /// </summary>

                    return this._pageHeight;
                },
                isZoomedIn: function () {
                    /// <summary>
                    /// Returns whether or not the current page is zoomed in.
                    /// </summary>

                    return this._isZoomedIn;
                },

                render: function (articleData, renderOptions, navigateOptions, preRender) {
                    var that = this;

                    var redrawPromise = that._redrawPromise = that._redrawPromise.then(function () {
                        return that._renderImpl(articleData, renderOptions, navigateOptions, preRender);
                    });

                    return redrawPromise;
                },

                relayout: function (relayoutOptions) {
                    var that = this;

                    var redrawPromise = that._redrawPromise = that._redrawPromise.then(function () {
                        return that._relayoutImpl(relayoutOptions);
                    });

                    return redrawPromise;
                },

                scrollToArticle: function () {
                    var exists = !!this._article;

                    if (exists) {
                        this._adjustWindow();
                    }
                },

                showArticleError: function (errorCode, errorCallback) {
                    var article = this._article;
                    this._monitorScroll = true;

                    if (article) {
                        BingApps.Utilities.Error.showError(errorCode, errorCallback, null, null, article.placeholder.element);
                    }
                    else {
                        BingApps.Utilities.Error.showError(errorCode, errorCallback, null, null, null);
                    }
                },

                articleFocusLost: function () {
                    var oldArticle = this._article;
                    if (oldArticle) {
                        var oldArticleReaderLayout = oldArticle.articleReaderLayout;
                        if (oldArticleReaderLayout) {
                            oldArticleReaderLayout.articleFocusLost();
                        }
                    }
                },

                hasNextPage: function () {
                    /// <summary>
                    /// Returns true if there is a next page.
                    /// </summary>
                    var article = this._article;

                    if (!article) {
                        return false;
                    }

                    var hasNext = false;
                    if (!this._pageCount) {
                        this._pageCount = getPageCount(article);
                    }
                    this._currentPageNumber = this._getCurrentPageIndex() + 1;

                    if (this._hasNextArticle) {
                        hasNext = true;
                    }
                    else {
                        var articleReaderLayout = article.articleReaderLayout;
                        hasNext = (this._currentPageNumber < this._pageCount);
                    }

                    return hasNext;
                },

                hasPreviousPage: function () {
                    /// <summary>
                    /// Returns true if there is a previous page.
                    /// </summary>
                    var article = this._article;

                    if (!article) {
                        return false;
                    }

                    var hasPrevious = false;
                    if (!this._pageCount) {
                        this._pageCount = getPageCount(article);
                    }
                    this._currentPageNumber = this._getCurrentPageIndex() + 1;

                    if (this._hasPreviousArticle) {
                        hasPrevious = true;
                    }
                    else {
                        hasPrevious = (this._currentPageNumber > 1);
                    }

                    return hasPrevious;
                },

                scrollOnePage: function (direction) {
                    /// <summary>
                    /// Scrolls the viewport by one page. direction = 1 means scroll next, direction = 2 means scroll previous.
                    /// </summary>
                    var that = this;
                    var pageWidth = this._pageWidth;
                    var panel = this._panel;
                    var viewport = this._viewport;
                    var scrollLeft = viewport.scrollLeft;

                    var modifier = 0;
                    if (direction === 1) {
                        modifier = 1;
                    }
                    else if (direction === 2) {
                        modifier = -1;
                    }

                    var marketDirection = window.getComputedStyle(viewport).direction;
                    var directionModifier = marketDirection === "ltr" ? -1 : 1;

                    if ((direction === 1 && this.hasNextPage()) || (direction === 2 && this.hasPreviousPage())) {
                        var newScrollLeft = (Math.round(scrollLeft / pageWidth) + modifier) * pageWidth;

                        panel.style.msTransitionProperty = "transform";
                        panel.style.msTransitionDuration = "0.25s";
                        panel.style.msTransform = "translate(" + ((modifier * pageWidth) * directionModifier) + "px, 0px)";

                        clearTimeout(this._scrollAnimationTimeout);

                        this._scrollAnimationTimeout = setTimeout(function () {
                            panel.style.msTransitionProperty = "";
                            panel.style.msTransitionDuration = "";
                            panel.style.msTransform = "";
                            viewport.scrollLeft = newScrollLeft;
                            that._firePageTransitionEvent();
                        }, 260);
                    }
                    this.dispatchEvent("scrollonepage", { direction: direction, pageCount: this._pageCount, currentPageNumber: this._currentPageNumber });

                },

                scrollToStartOfCurrentArticle: function () {
                    /// <summary>
                    /// Scrolls to the first page of the current article.
                    /// </summary>
                    this._scrollToPageIndex(0);
                },

                scrollToEndOfCurrentArticle: function () {
                    /// <summary>
                    /// Scrolls to the last page of the current article.
                    /// </summary>
                    this._scrollToPageIndex(Number.MAX_VALUE);
                },

                _renderImpl: function (articleData, renderOptions, navigateOptions, preRender) {
                    var that = this;
                    var article = this._article;
                    var promise = WinJS.Promise.wrap(null);

                    // update page width
                    var gridOptions = renderOptions.gridOptions;
                    var pageWidth = gridOptions.pageWidth;
                    var pageHeight = gridOptions.pageHeight;
                    this._setPageDimensions(pageWidth, pageHeight);
                    var panel = this._panel;

                    var articleReaderLayout;
                    var renderPromise;
                    var renderResult;
                    var containerElement;
                    if (article) {
                        // article exists
                        articleReaderLayout = article.articleReaderLayout;
                        // if(article), article has already been rendered
                        // scroll to it later
                        if (!articleReaderLayout) {
                            // article hasn't been rendered
                            // render article and append it to the dom
                            containerElement = article.containerElement;
                            renderResult = this._renderArticleOrAd(articleData, renderOptions, preRender, containerElement);
                            if (renderResult) {

                                // Get direction
                                var direction = 1;
                                if (article.next !== null &&
                                    article.previous === null) {
                                    direction = 2;
                                }

                                renderPromise = renderResult.renderPromise
                                    .then(function () {
                                        that._removePlaceholder(article);
                                        article.pendingLoad = false;
                                    }, function error() {
                                        // Clear pending load flag
                                        article.pendingLoad = false;
                                    })
                                    .then(function () {
                                        var adjustScrollPosition = article.pageCount;
                                        article.pageCount = null;
                                        article.containerElement.style.width = "";

                                        // when navigateOptions is -1, it means the bottom edgy next/prev buttons were used to navigate, 
                                        // in which case we want to scroll to the first page of the target article
                                        return (navigateOptions === -1) ? 0 : adjustScrollPosition;
                                    });

                                articleReaderLayout = renderResult.articleReaderLayout;
                                article.articleReaderLayout = articleReaderLayout;
                                promise = renderPromise;
                            }
                        }
                    }
                    else {
                        // render article
                        containerElement = this._createContainerElement();
                        panel.appendChild(containerElement);
                        renderResult = this._renderArticleOrAd(articleData, renderOptions, preRender, containerElement);
                        if (renderResult) {
                            renderPromise = renderResult.renderPromise;
                            articleReaderLayout = renderResult.articleReaderLayout;
                            promise = renderPromise;

                            // create article
                            var placeholder = this._createPlaceholder();
                            var newArticle = {
                                articleData: articleData,
                                articleReaderLayout: articleReaderLayout,
                                placeholder: placeholder,
                                containerElement: containerElement,
                                next: null,
                                previous: null,
                                order: 0,
                                instrumentationData: {
                                    trailingMediaBlockCount: null,
                                    instrumentationId: articleData.instrumentationId,
                                    userAction: null,
                                },
                            };
                            this._article = newArticle;
                        }
                    }

                    // set current article
                    if (!preRender) {
                        this.articleFocusLost();
                        this._monitorScroll = false;
                    }

                    promise = promise.then(
                        function (adjustScrollPosition) {
                            var adjustWindow = !(preRender || adjustScrollPosition);
                            that._adjustViewport(adjustWindow);
                            that._monitorScroll = true;
                            that._adjustArticleContainer(true);

                            if (!preRender) {
                                that._processNavigateOptions(navigateOptions);
                            }
                        });

                    return promise;
                },

                _relayoutImpl: function (relayoutOptions) {
                    var that = this;
                    var currentArticle = this._article;
                    var promise = WinJS.Promise.wrap(null);

                    // update page width
                    var gridOptions = relayoutOptions.gridOptions;
                    var pageWidth = gridOptions.pageWidth;
                    var pageHeight = gridOptions.pageHeight;
                    var oldPageWidth = this._pageWidth;
                    this._setPageDimensions(pageWidth, pageHeight);

                    if (currentArticle) {
                        var articleReaderLayout = currentArticle.articleReaderLayout;
                        var pageIndex = 0;
                        if (articleReaderLayout) {
                            pageIndex = Math.max(this._getCurrentPageIndex(oldPageWidth), 0);
                            promise = articleReaderLayout.relayout(relayoutOptions);
                        }

                        promise = promise.then(function () {
                            that._adjustViewport(false); // no need to adjust window because we are scrolling right after
                            that._scrollToPageIndex(pageIndex, pageWidth);
                        });
                    }
                    return promise;
                },

                _createViewportManager: function () {
                    var that = this;
                    return {
                        paginatedViewManager: that._paginatedViewManager,

                        scrollToPageIndex: function (pageIndex, pageWidth) {
                            return that._scrollToPageIndex(pageIndex, pageWidth);
                        },
                        getCurrentPageIndex: function (pageWidth) {
                            return that._getCurrentPageIndex(pageWidth);
                        },
                    };
                },

                _scrollToPageIndex: function (pageIndex, pageWidth) {
                    /// <summary>
                    /// Scrolls the viewport to the given 0-based page index. If pageIndex is beyond the end of the article, scrolls to the last page.
                    /// </summary>

                    pageWidth = pageWidth || this._pageWidth;
                    var viewport = this._viewport;
                    var article = this._article;
                    var newPageIndex = pageIndex;
                    if (article) {
                        var articleReaderLayout = article.articleReaderLayout;
                        if (articleReaderLayout) {
                            var pageCount = getPageCount(article);
                            var maxIndex = pageCount - 1;
                            newPageIndex = Math.min(pageIndex, maxIndex);
                        }
                    }

                    var previousPageCount = this._getPreviousPageCount(article);
                    viewport.scrollLeft = (previousPageCount + newPageIndex) * pageWidth;
                    this._firePageTransitionEvent();
                },

                _getCurrentPageIndex: function (pageWidth) {
                    /// <summary>
                    /// Returns the index of the current page the scroll position is on. Rounds to the nearest page.
                    /// </summary>

                    pageWidth = pageWidth || this._pageWidth;
                    var viewport = this._viewport;
                    var pageIndex = -1;
                    var article = this._article;
                    var previousPageCount = this._getPreviousPageCount(article);
                    pageIndex = Math.round(viewport.scrollLeft / pageWidth - previousPageCount);
                    return pageIndex;
                },

                _processNavigateOptions: function (navigateOptions) {
                    if (navigateOptions) {
                        var startPage = navigateOptions.startPage;
                        var isStartPageValid = BingApps.UI.ArticleReaderUtils.isNumber(startPage);

                        if (isStartPageValid) {
                            // start page is provided, honor it
                            this._scrollToPageIndex(startPage);
                        }
                        else {
                            // otherwise, honor start section

                            var startSection = navigateOptions.startSection;
                            var isStartSectionValid = BingApps.UI.ArticleReaderUtils.isNumber(startSection);
                            if (isStartSectionValid) {
                                this._scrollToSection(startSection);
                            }
                        }
                    }
                },

                _scrollToSection: function (section) {
                    if (section === -1) {
                        var viewport = this._viewport;
                        viewport.scrollLeft = 0;
                        this._firePageTransitionEvent();
                    }
                    else {
                        var article = this._article;
                        if (!article) {
                            return;
                        }

                        var articleReaderLayout = article.articleReaderLayout;
                        if (articleReaderLayout) {
                            articleReaderLayout.scrollToSection(section);
                        }
                    }
                },

                _removePlaceholder: function (article) {
                    var placeholder = article.placeholder;
                    var containerElement = article.containerElement;
                    containerElement.removeChild(placeholder.element);
                },

                _cleanupPreviousArticles: function (scrollPosition) {

                    function introducePlaceholder(article) {
                        var containerElement = article.containerElement,
                            placeholder = article.placeholder,
                            articleReaderLayout = article.articleReaderLayout;

                        if (articleReaderLayout) {
                            var pageCount = article.pageCount = getPageCount(article);
                            containerElement.style.width = (pageCount * 100) + "vw";
                            containerElement.removeChild(article.articleReaderLayout.element);
                            containerElement.appendChild(placeholder.element);

                            article.articleReaderLayout.dispose();
                            article.articleReaderLayout = null;

                            this._adjustArticleContainer(containerElement, false);
                        }
                    }

                    var instance = this._article;

                    // null case, there is no current or previous article
                    if (!instance || !instance.previous) {
                        return;
                    }

                    // we keep one back-log entry
                    instance = instance.previous;

                    if (!instance.previous) {
                        return;
                    }

                    // start introducing placeholders
                    instance = instance.previous;

                    while (instance) {
                        if (instance.articleReaderLayout) {
                            introducePlaceholder.apply(this, [instance]);
                        }
                        instance = instance.previous;
                    }
                },

                _adjustViewport: function (adjustWindow) {
                    this._adjustArticlesInGrid();
                    if (adjustWindow) {
                        this._adjustWindow();
                    }
                },

                _adjustArticleContainer: function (hasContent) {
                    var article = this._article;
                    if (article) {
                        var containerElement = article.containerElement;
                        if (hasContent) {
                            WinJS.Utilities.addClass(containerElement, "hasContent");
                            WinJS.Utilities.removeClass(containerElement, "noContent");
                        }
                        else {
                            WinJS.Utilities.addClass(containerElement, "noContent");
                            WinJS.Utilities.removeClass(containerElement, "hasContent");
                        }
                    }
                },

                _adjustArticlesInGrid: function () {
                    // figure out the grid columns for each article/placeholder
                    var articles = this._articles;
                    var minOrder = this._getMinOrder(articles);
                    for (var key in articles) {
                        var article = articles[key];
                        var order = article.order;
                        var gridColumn = (order - minOrder + 1).toString();
                        var containerElement = article.containerElement;
                        if (!article.errorSkip) {
                            this._maybeSetStyle(containerElement, "msGridColumn", gridColumn);
                        }
                    }
                },

                _maybeSetStyle: function (element, name, value) {
                    if (!element.currentStyle || element.currentStyle[name] !== value) {
                        element.style[name] = value;
                    }
                },

                _adjustWindow: function () {
                    // adjust the visible window into the viewport to match the current article
                    var viewport = this._viewport;
                    var pageWidth = this._pageWidth;
                    var bounds = this._getArticleBounds();
                    var start = bounds.start;
                    var startPixels = start * pageWidth;

                    viewport.scrollLeft = startPixels;
                    this._firePageTransitionEvent();
                },

                _getMinOrder: function (articles) {
                    var minOrder = Number.MAX_VALUE;
                    for (var key in articles) {
                        var article = articles[key];
                        var order = article.order;
                        minOrder = Math.min(minOrder, order);
                    }
                    return minOrder;
                },

                _renderArticleOrAd: function (articleData, renderOptions, preRender, containerElement) {
                    var result;
                    if (articleData) {
                        var adMetadata = articleData.metadata ? articleData.metadata.adMetadata : null;
                        if (adMetadata) {
                            result = this._renderInterstitialAd(articleData, renderOptions, containerElement);
                            if (preRender) {

                                // Set article pending load flag
                                // since interstitial ads load asynchronously
                                if (this._article) {
                                    this._article.pendingLoad = true;
                                }
                            }
                        }
                        else {
                            result = this._renderArticleData(articleData, renderOptions, containerElement);
                        }
                    }

                    return result;
                },

                _renderInterstitialAd: function (articleData, renderOptions, containerElement) {
                    var interstitialAd = new BingApps.UI.InterstitialAd();
                    var element = interstitialAd.element;
                    containerElement.appendChild(element);

                    renderOptions.paginatedViewManager = this._paginatedViewManager;

                    var renderPromise = interstitialAd.render(articleData, renderOptions);

                    var result = {
                        articleReaderLayout: interstitialAd,
                        renderPromise: renderPromise,
                    };
                    return result;
                },

                _renderArticleData: function (articleData, renderOptions, containerElement) {
                    var paginatedViewManager = this._paginatedViewManager;
                    var articleReaderLayout = new BingApps.UI.ArticleReaderLayout(null, {
                        paginatedViewManager: paginatedViewManager,
                    });
                    var element = articleReaderLayout.element;
                    containerElement.appendChild(element);

                    renderOptions.viewportManager = this._createViewportManager();
                    var renderPromise = articleReaderLayout.render(articleData, renderOptions);

                    var result = {
                        articleReaderLayout: articleReaderLayout,
                        renderPromise: renderPromise,
                    };
                    return result;
                },

                _createPlaceholder: function () {
                    var placeholder = new BingApps.UI.ArticlePlaceholder();
                    return placeholder;
                },

                _createContainerElement: function () {
                    var containerElt = document.createElement("div");
                    WinJS.Utilities.addClass(containerElt, "articleContainer noContent");
                    return containerElt;
                },

                _getArticleBounds: function () {
                    var article = this._article;
                    var pageCount = 0;
                    if (article) {
                        var articleReaderLayout = article.articleReaderLayout;
                        pageCount = getPageCount(article);
                    }

                    var previousPageCount = this._getPreviousPageCount(article);
                    var start = previousPageCount;
                    var end = previousPageCount + pageCount;

                    var bounds = {
                        start: start,
                        end: end,
                    };

                    return bounds;
                },

                _getPreviousPageCount: function (article) {
                    var previousPageCount = 0;
                    if (article) {
                        var previous = article.previous;
                        while (previous) {
                            previousPageCount += getPageCount(previous);
                            previous = previous.previous;
                        }
                    }
                    return previousPageCount;
                },

                _isAdPage: function (articleData) {
                    return (articleData && articleData.metadata && articleData.metadata.adMetadata);
                },

                _onContentZoom: function (event) {
                    var zoomable = this._zoomable;
                    var zoom = zoomable.msContentZoomFactor;
                    if (zoom > 1) {
                        WinJS.Utilities.addClass(zoomable, "zoomedin");
                        this._isZoomedIn = true;
                    }
                    else {
                        WinJS.Utilities.removeClass(zoomable, "zoomedin");
                        this._isZoomedIn = false;
                    }
                },

                _onScroll: function (event) {
                    var scrollTimer = this._scrollTimer;
                    var viewport = this._viewport;
                    var scrollLeft = viewport.scrollLeft;
                    if (scrollTimer) {
                        clearTimeout(scrollTimer);
                    }

                    this._scrollTimer = setTimeout(this._scrollTimerExpired.bind(this), 25, scrollLeft);
                },

                _scrollTimerExpired: function (oldScrollLeft) {
                    var that = this;
                    var monitorScroll = this._monitorScroll;
                    if (monitorScroll) {
                        var viewport = this._viewport;
                        var newScrollLeft = viewport.scrollLeft;
                        this._scrollTimer = null;

                        // clean-up
                        clearTimeout(this._staticPositionTimer);
                        this._staticPositionTimer = setTimeout(staticPositionTimerExpired.bind(this), 100, newScrollLeft);
                    }
                },
                _setPageDimensions: function (pageWidth, pageHeight) {
                    this._setPageWidth(pageWidth);
                    this._setPageHeight(pageHeight);
                },
                _setPageWidth: function (pageWidth) {
                    this._pageWidth = pageWidth;
                    var viewport = this._viewport;
                    viewport.style.width = pageWidth + "px";

                    var zoomable = this._zoomable;
                    zoomable.style.width = pageWidth + "px";
                },
                _setPageHeight: function (pageHeight) {
                    this._pageHeight = pageHeight;
                },
                _firePageTransitionEvent: function () {
                    var article = this._article;
                    if (article) {
                        var articleData = Object.create(article.articleData);
                        var currentPageIndex = this._getCurrentPageIndex();
                        var pageCount = getPageCount(article);

                        var eventData = { item: articleData };

                        eventData.instrumentationData = {
                            currentIndex: this._getCurrentPageIndex(),
                            count: getPageCount(article)
                        };

                        this.dispatchEvent("pagetransition", eventData);
                    }
                }

            }), WinJS.Utilities.eventMixin),
    });

    function getPageCount(article) {
        if (article.articleReaderLayout) {
            return article.articleReaderLayout.getPageCount();
        } else if (article.pageCount) {
            return article.pageCount;
        } else {
            return 1;
        }
    }

    function staticPositionTimerExpired(scrollPosition) {
        var monitorScroll = this._monitorScroll;
        if (monitorScroll) {
            var viewport = this._viewport;
            var newScrollLeft = viewport.scrollLeft;

            if (scrollPosition === newScrollLeft) {
                // user is reading / not scrolling, perform clean-up
                this._cleanupPreviousArticles(scrollPosition);
            }
        }

    }
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    var leftArrowGlyph = "&#57570;";
    var rightArrowGlyph = "&#57571;";

    // PaginatedViewManager is used for handling keyboard/mouse behavior in an the article reader. 
    // It owns the mousewheel, pgup, pgdown, leftarrow, rightarrow events, and it also owns the flip view style left and right buttons.
    WinJS.Namespace.define("BingApps.UI", {
        PaginatedViewManager: WinJS.Class.define(
            function (options) {
                var orchestrator = this._orchestrator = options.orchestrator;
                var eventListeners = this._eventListeners = [];

                // page buttons
                var elt = orchestrator.viewport;

                var rtl = window.getComputedStyle(elt, null).direction === "rtl";

                var nextPageButton = this._nextPageButton = document.createElement("button");
                nextPageButton.style.visibility = "hidden";
                nextPageButton.setAttribute("tabIndex", -1);
                nextPageButton.setAttribute("aria-hidden", "true");
                nextPageButton.innerHTML = rtl ? leftArrowGlyph : rightArrowGlyph;
                WinJS.Utilities.addClass(nextPageButton, "win-navbutton");
                WinJS.Utilities.addClass(nextPageButton, rtl ? "win-navleft" : "win-navright");
                elt.appendChild(nextPageButton);

                var previousPageButton = this._previousPageButton = document.createElement("button");
                previousPageButton.style.visibility = "hidden";
                previousPageButton.setAttribute("tabIndex", -1);
                previousPageButton.setAttribute("aria-hidden", "true");
                previousPageButton.innerHTML = rtl ? rightArrowGlyph : leftArrowGlyph;
                WinJS.Utilities.addClass(previousPageButton, "win-navbutton");
                WinJS.Utilities.addClass(previousPageButton, rtl ? "win-navright" : "win-navleft");
                elt.appendChild(previousPageButton);

                // events
                var viewport = orchestrator.viewport;
                this._attach(nextPageButton, "click", this._onNextPageClick);
                this._attach(previousPageButton, "click", this._onPreviousPageClick);
                this._attach(orchestrator, "scrolltoarticle", this._onScroll);
                this._attach(viewport, "scroll", this._onScroll);

                this._buttonFadePromise = null;
                this._nextPageButtonPromise = null;
                this._previousPageButtonPromise = null;
                this._buttonsVisible = false;
                this._touch = false;
            },
            {
                _orchestrator: null,
                _eventListeners: null,
                _nextPageButton: null,
                _previousPageButton: null,
                _buttonFadePromise: null,
                _buttonsVisible: null,
                _nextPageButtonPromise: null,
                _previousPageButtonPromise: null,
                _touch: null,

                dispose: function () {
                    try {
                        var eventListeners = this._eventListeners;
                        for (var i = 0, len = eventListeners.length; i < len; i++) {
                            var eventListener = eventListeners[i];
                            var elt = eventListener.elt;
                            var name = eventListener.name;
                            var listener = eventListener.listener;
                            elt.removeEventListener(name, listener);
                        }
                    } catch (ex) {
                        //HACK: silence exceptions
                    }

                    var buttonFadePromise = this._buttonFadePromise;
                    if (buttonFadePromise) {
                        buttonFadePromise.cancel();
                    }
                },

                attachEventListeners: function (elt) {
                    this._attach(elt, "wheel", this._wheelListener);
                    this._attach(elt, "keydown", this._keyDownListener);
                    this._attach(elt, "MSPointerHover", this._pointerHoverListener);
                    this._attach(elt, "MSPointerMove", this._pointerMoveListener);
                    this._attach(elt, "MSPointerDown", this._pointerDownListener);
                    this._attach(elt, "MSManipulationStateChanged", this._manipulationListener);
                },

                exclude: function (elt) {
                    var stopPropagation = this._stopPropagation.bind(this);

                    this._attach(elt, "wheel", stopPropagation);
                    this._attach(elt, "keydown", stopPropagation);
                    this._attach(elt, "MSPointerHover", stopPropagation);
                    this._attach(elt, "MSPointerMove", stopPropagation);
                    this._attach(elt, "MSPointerDown", stopPropagation);
                    this._attach(elt, "MSManipulationStateChanged", stopPropagation);
                },

                _attach: function (elt, name, listener) {
                    var eventListeners = this._eventListeners;

                    var l = listener.bind(this);
                    elt.addEventListener(name, l);
                    eventListeners.push({
                        elt: elt,
                        name: name,
                        listener: l,
                    });
                },

                _pointerHoverListener: function (event) {
                    this._detectTouch(event);
                    this._maybeShowButtons(event);
                },

                _pointerMoveListener: function (event) {
                    this._detectTouch(event);
                    this._maybeShowButtons(event);
                },

                _pointerDownListener: function (event) {
                    this._detectTouch(event);

                    // block middle mouse button click
                    if ((event.buttons & 4) !== 0) {
                        event.stopPropagation();
                        event.preventDefault();
                    }
                },

                _detectTouch: function (event) {
                    if (event.pointerType === event.MSPOINTER_TYPE_TOUCH) {
                        this._fadeOutButtons(true);
                        this._touch = true;
                    }
                    else {
                        this._touch = false;
                    }
                },

                _maybeShowButtons: function (event) {
                    if (event.pointerType !== event.MSPOINTER_TYPE_TOUCH) {
                        this._showButtons();
                    }
                },

                _maybeUpdateButtons: function (event) {
                    var buttonsVisible = this._buttonsVisible;
                    if (buttonsVisible) {
                        this._showButtons();
                    }
                },

                _showButtons: function () {
                    this._fadeInButtons();
                    this._fadeOutButtons(false);
                },

                _fadeInButtons: function () {
                    var orchestrator = this._orchestrator;

                    var hasNextPage = orchestrator.hasNextPage();
                    this._animateButton("next", hasNextPage);

                    var hasPreviousPage = orchestrator.hasPreviousPage();
                    this._animateButton("previous", hasPreviousPage);

                    this._buttonsVisible = true;
                },

                _fadeOutButtons: function (immediate) {
                    var that = this;

                    var buttonFadePromise = this._buttonFadePromise;
                    if (buttonFadePromise) {
                        buttonFadePromise.cancel();
                        this._buttonFadePromise = null;
                    }

                    this._buttonFadePromise = WinJS.Promise.timeout(immediate ? 0 : 3000)
                    .then(function () {
                        that._animateButton("next", false);
                        that._animateButton("previous", false);

                        that._buttonFadePromise = null;
                        that._buttonsVisible = false;
                    });
                },

                _animateButton: function (button, visible) {
                    var elt;
                    var promise;
                    switch (button) {
                        case "next":
                            elt = this._nextPageButton;
                            promise = this._nextPageButtonPromise;
                            break;
                        case "previous":
                            elt = this._previousPageButton;
                            promise = this._previousPageButtonPromise;
                            break;
                    }

                    if (elt) {
                        if (promise) {
                            promise.cancel();
                        }


                        if (visible) {
                            elt.style.visibility = "visible";
                            promise = WinJS.UI.executeTransition(
                                elt,
                                {
                                    property: "opacity",
                                    delay: 0,
                                    duration: 167,
                                    timing: "linear",
                                    to: 1
                                });
                        }
                        else {
                            promise = WinJS.UI.Animation.fadeOut(elt)
                            .then(function () {
                                elt.style.visibility = "hidden";
                            });
                        }
                    }

                    switch (button) {
                        case "next":
                            this._nextPageButtonPromise = promise;
                            break;
                        case "previous":
                            this._previousPageButtonPromise = promise;
                            break;
                    }
                },

                _stopPropagation: function (event) {
                    event.stopPropagation();
                },

                _wheelListener: function (event) {
                    if (event.ctrlKey) {
                        this._controlWheelHandler(event);
                    }
                    else {
                        this._normalWheelHandler(event);
                    }
                    event.preventDefault();
                },
                _normalWheelHandler: function (event) {
                    var orchestrator = this._orchestrator;
                    var deltaY = event.deltaY;
                    if (orchestrator.isZoomedIn()) {
                        var zoomable = orchestrator.zoomable;
                        if (deltaY > 0) {
                            zoomable.scrollLeft += 30;
                        }
                        else if (deltaY < 0) {
                            zoomable.scrollLeft -= 30;
                        }
                    }
                    else {
                        if (deltaY > 0) {
                            orchestrator.scrollOnePage(1);
                        }
                        else if (deltaY < 0) {
                            orchestrator.scrollOnePage(2);
                        }
                    }
                },
                _controlWheelHandler: function (event) {
                    var orchestrator = this._orchestrator;
                    var zoomable = orchestrator.zoomable;
                    var currentZoomFactor = zoomable.msContentZoomFactor;
                    var zoomFactor;
                    var deltaY = event.deltaY;
                    if (deltaY > 0) {
                        zoomFactor = currentZoomFactor - 0.1;
                    }
                    else if (deltaY < 0) {
                        zoomFactor = currentZoomFactor + 0.1;
                    }

                    if (zoomFactor) {
                        zoomable.msContentZoomFactor = zoomFactor;
                        var denominator = (zoomFactor / (zoomFactor - 1));
                        var width = orchestrator.getPageWidth();
                        var height = orchestrator.getPageHeight();
                        var screenX = event.screenX;
                        var screenY = event.screenY;
                        var newWidth = (width / denominator) + width;
                        var newHeight = (height / denominator) + height;
                        zoomable.scrollLeft = ((newWidth / width) * screenX) - screenX;
                        zoomable.scrollTop = ((newHeight / height) * screenY) - screenY;
                    }
                },

                _keyDownListener: function (event) {
                    var orchestrator = this._orchestrator;
                    var viewport = orchestrator.viewport;
                    var zoomable = orchestrator.zoomable;
                    var marketDirection = window.getComputedStyle(zoomable).direction;
                    var keyCode = event.keyCode;
                    var direction = null;
                    this._touch = false;
                    switch (keyCode) {
                        case WinJS.Utilities.Key.add:
                            if (event.ctrlKey) {
                                zoomable.msContentZoomFactor += 0.1;
                            }
                            break;
                        case WinJS.Utilities.Key.subtract:
                            if (event.ctrlKey) {
                                zoomable.msContentZoomFactor -= 0.1;
                            }
                            break;
                        case WinJS.Utilities.Key.pageUp:
                            orchestrator.scrollOnePage(2);
                            event.preventDefault();
                            if (orchestrator.isZoomedIn()) {
                                zoomable.msContentZoomFactor = 1;
                            }
                            break;
                        case WinJS.Utilities.Key.leftArrow:
                            if (!event.altKey) {
                                if (orchestrator.isZoomedIn()) {
                                    zoomable.scrollLeft -= 30;
                                }
                                else {
                                    direction = marketDirection === "ltr" ? 2 : 1;
                                    orchestrator.scrollOnePage(direction);
                                }
                            }
                            event.preventDefault();
                            break;
                        case WinJS.Utilities.Key.pageDown:
                            orchestrator.scrollOnePage(1);
                            event.preventDefault();
                            if (orchestrator.isZoomedIn()) {
                                zoomable.msContentZoomFactor = 1;
                            }
                            break;
                        case WinJS.Utilities.Key.rightArrow:
                            if (!event.altKey) {
                                if (orchestrator.isZoomedIn()) {
                                    zoomable.scrollLeft += 30;
                                }
                                else {
                                    direction = marketDirection === "ltr" ? 1 : 2;
                                    orchestrator.scrollOnePage(direction);
                                }
                            }
                            event.preventDefault();
                            break;
                        case WinJS.Utilities.Key.upArrow:
                            if (orchestrator.isZoomedIn()) {
                                zoomable.scrollTop -= 30;
                                event.preventDefault();
                            }
                            break;
                        case WinJS.Utilities.Key.downArrow:
                            if (orchestrator.isZoomedIn()) {
                                zoomable.scrollTop += 30;
                                event.preventDefault();
                            }
                            break;
                        case WinJS.Utilities.Key.home:
                            orchestrator.scrollToStartOfCurrentArticle();
                            event.preventDefault();
                            break;
                        case WinJS.Utilities.Key.end:
                            orchestrator.scrollToEndOfCurrentArticle();
                            event.preventDefault();
                            break;
                    }
                },

                _manipulationListener: function (event) {
                    this._touch = true;
                },

                _onNextPageClick: function (event) {
                    var orchestrator = this._orchestrator;
                    orchestrator.scrollOnePage(1);
                },

                _onPreviousPageClick: function (event) {
                    var orchestrator = this._orchestrator;
                    orchestrator.scrollOnePage(2);
                },

                _onScroll: function (event) {
                    var orchestrator = this._orchestrator;
                    if (!orchestrator.isZoomedIn()) {
                        this._maybeUpdateButtons();
                        var touch = this._touch;
                        if (!touch) {
                            this._fixScroll();
                        }

                        var viewport = orchestrator.viewport;
                        var scrollLeft = viewport.scrollLeft;
                        this._lastScroll = scrollLeft;
                    }
                },

                _fixScroll: function () {
                    var orchestrator = this._orchestrator;
                    var viewport = orchestrator.viewport;
                    var pageWidth = orchestrator.getPageWidth();

                    var lastScroll = this._lastScroll || 0;
                    var scrollLeft = viewport.scrollLeft;

                    if (scrollLeft % pageWidth !== 0) {
                        var func = (lastScroll - scrollLeft > 0 ? Math.floor : Math.ceil);
                        viewport.scrollLeft = func(scrollLeft / pageWidth) * pageWidth;
                    }
                },
            }),
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // 
    WinJS.Namespace.define("BingApps.UI", {
        ArticlePlaceholder: WinJS.Class.define(
            function (elt, options) {
                /// <summary>
                /// Creates an instance of the ArticlePlaceholder control.
                /// </summary>

                // create the dom elements
                elt = this._elt = elt || document.createElement("div");
                elt.winControl = this;
                WinJS.Utilities.addClass(elt, "placeholder");
            },
            {
                _elt: null,

                element: {
                    get: function () {
                        return this._elt;
                    }
                },

                dispose: function () {
                },
            },
            {
            })
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    WinJS.Namespace.define("BingApps.UI", {
        ArticleReader: WinJS.Class.define(function (elt, options) {
            /// <summary>
            /// Creates an instance of the ArticleReader control.
            /// </summary>
            /// <param name="options">
            /// - articleData: JSON object for Article
            /// - contentCssPath: content area css style sheet path
            /// - columnCount: the number of columns per page
            /// - leftMargin: the left margin of the control
            /// - rightMargin: the right margin of the control
            /// - topMargin: the top margin of the control
            /// - bottomMargin: the bottom margin of the control
            /// - columnMargin: the margin between columns
            /// </param>

            // create the dom elements
            elt = this._elt = elt || document.createElement("div");
            options = options || {};
            elt.winControl = this;
            WinJS.Utilities.addClass(elt, "defaultArticleReaderTheme");

            // add ArticleReaderOrchestrator control
            var orchestrator = this._orchestrator = new BingApps.UI.ArticleReaderOrchestrator();
            elt.appendChild(this._orchestrator.zoomable);

            var scrollOnePageListener = this._scrollOnePageListener = this._scrollOnePage.bind(this);
            var pageTransitionListener = this._pageTransitionListener = this._pageTransition.bind(this);
            orchestrator.addEventListener("scrollonepage", scrollOnePageListener);
            orchestrator.addEventListener("pagetransition", pageTransitionListener);

            this._redrawPromise = WinJS.Promise.wrap(null);

            this._runningInit = true;
            WinJS.UI.setOptions(this, options);
            this._runningInit = false;

            if (this._articleData) {
                this._render();
            }
        },
        {
            _elt: null,
            _articleData: null,
            _contentCssPath: null,
            _columnCount: null,
            _leftMargin: null,
            _rightMargin: null,
            _topMargin: null,
            _bottomMargin: null,
            _columnMargin: null,
            _width: null,
            _height: null,
            _redrawPromise: null,
            _relayoutTimer: false,
            _renderTimer: false,

            element: {
                get: function () {
                    return this._elt;
                }
            },

            /// <field type="articleData JSON object">
            /// Gets or sets the articleData JSON object to render in the control
            /// </field>
            articleData: {
                get: function () {
                    return this._articleData;
                },
                set: function (newValue) {
                    if (newValue) {
                        this._articleData = newValue;
                        this._render();
                    }
                }
            },

            /// <field type="string">
            /// Gets or sets content area css style sheet path
            /// </field>
            contentCssPath: {
                get: function () {
                    return this._contentCssPath;
                },
                set: function (newValue) {
                    if (newValue !== this._contentCssPath) {
                        this._contentCssPath = newValue;
                        this.forceLayout();
                    }
                }
            },

            /// <field type="Number" integer="true">
            /// Gets or sets the number of columns per page for rendering article
            /// </field>
            columnCount: {
                get: function () {
                    return this._columnCount;
                },
                set: function (newValue) {
                    if (newValue !== this._columnCount) {
                        if (newValue) {
                            if (!(typeof newValue === "number") || (newValue <= 0)) {
                                throw new WinJS.ErrorFromName("BingApps.UI.ArticleReader.ColumnCountIsInvalid", WinJS.Resources.getString("BingApps/ColumnCountIsInvalid").value);
                            }
                        }

                        this._columnCount = newValue;
                        this.forceLayout();
                    }
                }
            },

            /// <field type="Number" integer="true">
            /// Gets or sets the number of pixels for the left side margin
            /// </field>
            leftMargin: {
                get: function () {
                    return this._leftMargin;
                },
                set: function (newValue) {
                    if (newValue !== this._leftMargin) {
                        if (newValue) {
                            if (!(typeof newValue === "number") || (newValue <= 0)) {
                                throw new WinJS.ErrorFromName("BingApps.UI.ArticleReader.LeftMarginIsInvalid", WinJS.Resources.getString("BingApps/LeftMarginIsInvalid").value);
                            }
                        }

                        this._leftMargin = newValue;
                        this.forceLayout();
                    }
                }
            },

            /// <field type="Number" integer="true">
            /// Gets or sets the number of pixels for the right side margin
            /// </field>
            rightMargin: {
                get: function () {
                    return this._rightMargin;
                },
                set: function (newValue) {
                    if (newValue !== this._rightMargin) {
                        if (newValue) {
                            if (!(typeof newValue === "number") || (newValue <= 0)) {
                                throw new WinJS.ErrorFromName("BingApps.UI.ArticleReader.RightMarginIsInvalid", WinJS.Resources.getString("BingApps/RightMarginIsInvalid").value);
                            }
                        }

                        this._rightMargin = newValue;
                        this.forceLayout();
                    }
                }
            },

            /// <field type="Number" integer="true">
            /// Gets or sets the number of pixels for the top margin
            /// </field>
            topMargin: {
                get: function () {
                    return this._topMargin;
                },
                set: function (newValue) {
                    if (newValue !== this._topMargin) {
                        if (newValue) {
                            if (!(typeof newValue === "number") || (newValue <= 0)) {
                                throw new WinJS.ErrorFromName("BingApps.UI.ArticleReader.TopMarginIsInvalid", WinJS.Resources.getString("BingApps/TopMarginIsInvalid").value);
                            }
                        }

                        this._topMargin = newValue;
                        this.forceLayout();
                    }
                }
            },

            /// <field type="Number" integer="true">
            /// Gets or sets the number of pixels for the bottom margin
            /// </field>
            bottomMargin: {
                get: function () {
                    return this._bottomMargin;
                },
                set: function (newValue) {
                    if (newValue !== this._bottomMargin) {
                        if (newValue) {
                            if (!(typeof newValue === "number") || (newValue <= 0)) {
                                throw new WinJS.ErrorFromName("BingApps.UI.ArticleReader.BottomMarginIsInvalid", WinJS.Resources.getString("BingApps/BottomMarginIsInvalid").value);
                            }
                        }

                        this._bottomMargin = newValue;
                        this.forceLayout();
                    }
                }
            },

            /// <field type="Number" integer="true">
            /// Gets or sets the number of pixels for margin between columns
            /// </field>
            columnMargin: {
                get: function () {
                    return this._columnMargin;
                },
                set: function (newValue) {
                    if (newValue !== this._columnMargin) {
                        if (newValue) {
                            if (!(typeof newValue === "number") || (newValue <= 0)) {
                                throw new WinJS.ErrorFromName("BingApps.UI.ArticleReader.ColumnMarginIsInvalid", WinJS.Resources.getString("BingApps/ColumnMarginIsInvalid").value);
                            }
                        }

                        this._columnMargin = newValue;
                        this.forceLayout();
                    }
                }
            },

            /// <field type="Number" integer="true">
            /// Gets the number of renderPromise of the control
            /// </field>
            renderPromise: {
                get: function () {
                    return this._redrawPromise;
                },
            },

            dispose: function () {
                /// <summary>
                /// Unbind top level event handlers and then call dispose on all child controls
                /// </summary>
                var orchestrator = this._orchestrator;
                if (orchestrator) {
                    orchestrator.removeEventListener("scrollonepage", this._scrollOnePageListener);
                    orchestrator.removeEventListener("pagetransition", this._pageTransitionListener);
                    orchestrator.dispose();
                    orchestrator = this._orchestrator = null;
                }
            },

            forceLayout: function () {
                /// <summary>
                /// Relays out the existing article based on the grid options.
                /// this method should be called when changing grid related properties, 
                /// such as columnCount, leftMargin etc.
                /// it will only recalculate layout surface and update content css style sheet. 
                /// </summary>

                // _runningInit is to avoid call forceLayout when set options during control constuctor 
                if (!this._runningInit && this._orchestrator && this._orchestrator._article) {
                    var that = this;
                    if (!that._relayoutTimer && !that._renderTimer) {
                        that._relayoutTimer = true;
                        var currentRedrawPromise = that._redrawPromise;

                        // by using _relayoutTimer and timeout to avoid do relayout multipul times 
                        // when modify multiple properties at the same time
                        that._redrawPromise = WinJS.Promise.timeout()
                            .then(function () {
                                return currentRedrawPromise.then(function () {
                                    return that._relayoutImpl();
                                });
                            }).then(function () {
                                that._orchestrator.focusViewport();
                            });
                    }

                    return that._redrawPromise;
                }
            },

            _render: function () {
                /// <summary>
                /// Renders the given articleData in the control. 
                /// this will include delete existing articlereader DOM, reprocess articleData JSON, 
                /// and repopulate content into IFrame, recalculate layout surface.
                /// </summary>

                // _runningInit is to avoid call _render when set options during control constuctor.
                if (!this._runningInit) {
                    var that = this;
                    if (!that._renderTimer) {
                        that._renderTimer = true;
                        var currentRedrawPromise = that._redrawPromise;

                        // by using _renderTimer and timeout to avoid do render multipul times
                        that._redrawPromise = WinJS.Promise.timeout()
                            .then(function () {
                                return currentRedrawPromise.then(function () {
                                    that._elt.style.visibility = "hidden";
                                    return that._renderImpl();
                                }).then(function () {
                                    that._elt.style.visibility = "visible";
                                    that._orchestrator.focusViewport();
                                });
                            });
                    }
                    return that._redrawPromise;
                }
            },

            _renderImpl: function () {
                /// <summary>
                /// Internal render implementation
                /// If there is an article already be rendered, we need to clean it up and render it again.
                /// </summary>      
                this._renderTimer = false;
                var renderOptions = this._getRenderOptions();
                var orchestrator = this._orchestrator;
                if (renderOptions && orchestrator) {
                    if (orchestrator._article) {
                        orchestrator.removeEventListener("scrollonepage", this._scrollOnePageListener);
                        orchestrator.removeEventListener("pagetransition", this._pageTransitionListener);
                        orchestrator.dispose();
                        this.element.removeChild(orchestrator.zoomable);
                        orchestrator = this._orchestrator = new BingApps.UI.ArticleReaderOrchestrator();
                        orchestrator.addEventListener("scrollonepage", this._scrollOnePageListener);
                        orchestrator.addEventListener("pagetransition", this._pageTransitionListener);
                        this.element.appendChild(orchestrator.zoomable);
                    }
                    return orchestrator.render(this.articleData, renderOptions);
                } else {
                    return WinJS.Promise.wrap(null);
                }
            },

            _relayoutImpl: function () {
                /// <summary>
                /// Internal implementation to relay out the existing article based on the grid options.
                /// </summary>

                this._relayoutTimer = false;
                var renderOptions = this._getRenderOptions();
                if (renderOptions && this._orchestrator) {
                    return this._orchestrator.relayout(renderOptions);
                } else {
                    return WinJS.Promise.wrap(null);
                }
            },

            _getRenderOptions: function () {
                /// <summary>
                /// Internal function to get renderOptions based on the control properties.
                /// </summary>

                this._width = this.element.offsetWidth;
                this._height = this.element.offsetHeight;
                var customGridParams = {
                    columnCount: this._columnCount,
                    leftMargin: this._leftMargin,
                    rightMargin: this._rightMargin,
                    topMargin: this._topMargin,
                    bottomMargin: this._bottomMargin,
                    columnMargin: this._columnMargin
                };

                var gridOptions = BingApps.UI.GridCalculator.calculateGridOptions(
                    this._width,
                    this._height,
                    customGridParams);

                // article reader container might not have enough width/height, 
                // which will cause the calculated columnWidth or columnHeight to be negative number
                if (gridOptions.columnWidth <= 0 || gridOptions.columnHeight <= 0) {
                    return null;
                }

                var renderOptions = {
                    gridOptions: gridOptions,
                    initialTextAttributes: { size: "medium", style: "primary" },
                    contentCssPaths: [this.contentCssPath],
                    articleMetadata: this._articleData ? this._articleData.metadata : null
                };

                return renderOptions;
            },

            _pageTransition: function (eventData) {
                this.dispatchEvent("pagetransition", eventData.detail);
            },

            _scrollOnePage: function (event) {
                // if swiped to a different page, fire event
                this.dispatchEvent("scrollonepage", event.detail);
            }
        })
    });

    WinJS.Class.mix(BingApps.UI.ArticleReader,
        BingApps.Utilities.DOMEventMixinWithBubbling,
        WinJS.Utilities.createEventProperties("scrollonepage"),
        WinJS.Utilities.createEventProperties("pagetransition")
        );

})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // ContentFrameManager manages the iframe for regions.
    WinJS.Namespace.define("BingApps.UI", {
        ContentFrameManager: WinJS.Class.define(
            function (options) {
                /// <summary>
                /// Creates an instance.
                /// </summary>
                /// <param name="options">
                /// - contentFrame: The iframe object.
                /// - paginatedViewManager: handler for mouse/keyboard scroll behavior
                /// </param>

                this._contentFrame = options.contentFrame;
                this._clickListener = null;
                this._pointerUpListener = null;
                this._paginatedViewManager = options.paginatedViewManager;
            },
            {
                _contentFrame: null,
                _clickListener: null,
                _pointerUpListener: null,
                _paginatedViewManager: null,

                dispose: function () {
                    var contentDocument = this._getContentDocument();
                    if (contentDocument) {
                        var clickListener = this._clickListener;
                        contentDocument.removeEventListener("click", clickListener);

                        var pointerUpListener = this._pointerUpListener;
                        contentDocument.removeEventListener("MSPointerUp", pointerUpListener, false);
                    }
                },

                setup: function (initialTextAttributes, flowId, contentCssPaths) {
                    /// <summary>
                    /// Initializes the iframe.
                    /// </summary>
                    /// <param name="initialTextAttributes">
                    /// Initial text attributes of the content.
                    /// - style: primary or secondary
                    /// - size: small, medium, or large
                    /// </param>
                    /// <param name="flowId">Name of the flow to set -ms-flow-into to.</param>
                    /// <param name="contentCssPaths">Array of css files to apply to the content document.</param>

                    var contentDocument = this._getContentDocument();
                    if (contentDocument) {
                        var contentFrame = this._contentFrame;
                        contentFrame.style.msFlowInto = flowId;

                        contentDocument.open();
                        contentDocument.close();

                        // add css files
                        var defaultCssPath = BingApps.UI.ContentFrameManager._defaultCssPath;
                        var cssFiles = [].concat([defaultCssPath], contentCssPaths);
                        this._addCssFilesToDocument(contentDocument, cssFiles);

                        // set up html tag for bidi
                        contentDocument.getElementsByTagName("HTML")[0].dir = getComputedStyle(document.body).direction;

                        // attach event handlers to iframe document
                        var clickListener = this._clickListener = this._onContentClick.bind(this);
                        contentDocument.addEventListener("click", clickListener);

                        var pointerUpListener = this._pointerUpListener = this._onContentMSPointerUp.bind(this);
                        contentDocument.addEventListener("MSPointerUp", pointerUpListener, false);

                        var paginatedViewManager = this._paginatedViewManager;
                        paginatedViewManager.attachEventListeners(contentDocument);

                        // set initial text attributes
                        this.setTextAttributes(initialTextAttributes);
                    }
                },

                updateCssFiles: function (contentCssPaths) {
                    /// <summary>
                    /// update css files in the iframe.
                    /// </summary>
                    /// <param name="contentCssPaths">Array of css files to apply to the content document.</param>

                    var contentDocument = this._getContentDocument();
                    if (contentDocument) {
                        this._removeCssFilesFromDocument(contentDocument);
                        var defaultCssPath = BingApps.UI.ContentFrameManager._defaultCssPath;
                        var cssFiles = [].concat([defaultCssPath], contentCssPaths);
                        this._addCssFilesToDocument(contentDocument, cssFiles);
                    }
                },

                addContent: function (content) {
                    /// <summary>
                    /// Appends the given string into the iframe body.
                    /// </summary>
                    /// <param name="content">HTML string to insert into the iframe.</param>

                    var contentDocument = this._getContentDocument();
                    if (contentDocument) {
                        var contentFrame = this._contentFrame;
                        var root = contentDocument.body;

                        if (content && root) {
                            if (!root.childNodes.length) {
                                // first add

                                // bug 306501: There is a rendering bug in IE with U+3000 and regions. Insert an invisible span before U+3000 in the content as a work-around.
                                // U+3000 = ideographic space (decimal code 12288)
                                var fixedContent = content.replace(/[\u3000]/g, "<span class='hiddenContentSpan'></span>" + String.fromCharCode(12288));
                         
                                WinJS.Utilities.setInnerHTML(root, toStaticHTML(fixedContent));
                            }
                            else {
                                // subsequent adds
                                var temp = document.createElement("div");
                                WinJS.Utilities.setInnerHTML(temp, toStaticHTML(content));
                                var frag = contentDocument.createDocumentFragment();
                                var nodes = temp.childNodes;
                                while (nodes && nodes.length) {
                                    frag.appendChild(nodes[0]);
                                }
                                root.appendChild(frag);
                            }
                        }
                    }
                },

                setTextAttributes: function (textAttributes) {
                    /// <summary>
                    /// Sets the text size and style of the article reader.
                    /// </summary>
                    /// <param name="textAttributes">
                    /// - style: primary or secondary
                    /// - size: small, medium, or large
                    /// </param>

                    var contentDocument = this._getContentDocument();
                    if (contentDocument) {
                        var root = contentDocument.body;
                        if (root) {
                            var size = textAttributes.size;
                            var style = textAttributes.style;
                            root.setAttribute("data-text-size", size);
                            root.setAttribute("data-text-style", style);
                        }
                    }
                },

                _getContentDocument: function () {
                    var contentDocument = null;
                    var contentFrame = this._contentFrame;
                    try {
                        contentDocument = contentFrame.contentWindow.document;
                    }
                    catch (ex) {
                        // swallow exception. sometimes on navigate away, the iframe can be in a state where there is no content document.
                    }
                    return contentDocument;
                },

                _addCssFilesToDocument: function (doc, cssFiles) {
                    for (var i = 0, len = cssFiles.length; i < len; i++) {
                        if (cssFiles[i]) {
                            var link = doc.createElement("link");
                            link.setAttribute("href", cssFiles[i]);
                            link.setAttribute("rel", "stylesheet");
                            doc.getElementsByTagName("HEAD")[0].appendChild(link);
                        }
                    }
                },

                _removeCssFilesFromDocument: function (doc) {
                    var links = doc.querySelectorAll('link[rel="stylesheet"]');
                    for (var i = 0; i < links.length; i++) {
                        var linkElt = links[i];
                        linkElt.parentElement.removeChild(linkElt);
                    }
                },

                _onContentClick: function (evt) {
                    /// <summary>
                    /// Makes sure link clicks are opened in browser not the app.
                    /// </summary>
                    var elt = evt.srcElement;
                    while (elt) {
                        if (elt && elt.tagName === "A") {
                            elt.setAttribute("target", "_blank");
                            break;
                        }
                        elt = elt.parentElement;
                    }
                },

                _onContentMSPointerUp: function (event) {
                    switch (event.button) {
                        // Mouse back button
                        case 3:
                            if (WinJS.Navigation.canGoBack) {
                                WinJS.Navigation.back();
                            }
                            break;
                            // Mouse forward button
                        case 4:
                            if (WinJS.Navigation.canGoForward) {
                                WinJS.Navigation.forward();
                            }
                            break;
                    }
                },

            },
            {
                _defaultCssPath: "/BingSdk/assets/ArticleReader/css/Content.css"
            }),
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Footer at the bottom of each page. Contains the toc anchor and the page number.
    WinJS.Namespace.define("BingApps.UI", {
        Footer: WinJS.Class.define(
            function (elt, options) {
                /// <summary>
                /// Creates a Footer instance.
                /// </summary>
                /// <param name="options">
                /// - tocFlyout: the toc flyout object, can be null
                /// - gridOptions: grid options
                /// - pageNumberString: text for the page number control
                /// - tocAnchorText: text for the toc anchor control
                /// </param>
                elt = this.elt = elt ? elt : document.createElement("div");
                elt.winControl = this;

                WinJS.Utilities.addClass(elt, "footer");

                // create toc anchor container
                var tocAnchorContainerElt = document.createElement("div");
                WinJS.Utilities.addClass(tocAnchorContainerElt, "tocAnchorContainer");
                elt.appendChild(tocAnchorContainerElt);

                var tocFlyout = options.tocFlyout;
                var tocAnchorText = options.tocAnchorText;
                var gridOptions = options.gridOptions;
                var columnMargin = gridOptions.columnMargin;
                var columnWidth = gridOptions.columnWidth;
                var columnCount = gridOptions.columnCount;

                // create toc anchor control
                var tocAnchorElt = document.createElement("div");
                // width is one column
                tocAnchorElt.style.width = (columnCount === 1 ? 350 : columnWidth) + "px";
                var tocAnchor = this._tocAnchor = new BingApps.UI.TocAnchor(tocAnchorElt, {
                    tocAnchorText: tocAnchorText,
                    tocFlyout: tocFlyout,
                });
                tocAnchorContainerElt.appendChild(tocAnchorElt);

                // create page number container
                var pageNumberContainerElt = document.createElement("div");
                WinJS.Utilities.addClass(pageNumberContainerElt, "pageNumberContainer");
                elt.appendChild(pageNumberContainerElt);

                // create page number control
                var pageNumberString = options.pageNumberString;
                var pageNumberElt = document.createElement("div");
                var pageNumber = this._pageNumber = new BingApps.UI.PageNumber(pageNumberElt, {
                    pageNumberString: pageNumberString,
                });
                pageNumberContainerElt.appendChild(pageNumberElt);
            },
            {
                _pageNumber: null,
                _tocAnchor: null,

                pageNumberString: {
                    set: function (value) {
                        var pageNumber = this._pageNumber;
                        pageNumber.pageNumberString = value;
                    },
                },

                tocAnchorText: {
                    set: function (value) {
                        var tocAnchor = this._tocAnchor;
                        tocAnchor.tocAnchorText = value;
                    },
                },
            }),
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Responsible for calculating the grid measuremnets.
    WinJS.Namespace.define("BingApps.UI", {
        GridCalculator: WinJS.Class.define(
            function () {
            },
            {
            },
            {
                calculateGridOptions: function (pageWidth, pageHeight, customGridParams) {
                    var gridConstants;
                    if (pageWidth >= pageHeight) {
                        gridConstants = BingApps.UI.GridCalculator.landscapeGridConstants;
                    } else {
                        gridConstants = BingApps.UI.GridCalculator.portraitGridConstants;
                    }

                    var leftMargin = (customGridParams.leftMargin !== null && customGridParams.leftMargin !== undefined) ? customGridParams.leftMargin : gridConstants.leftMargin;
                    var defaultRightMargin = (customGridParams.rightMargin !== null && customGridParams.rightMargin !== undefined) ? customGridParams.rightMargin : gridConstants.defaultRightMargin;
                    var topMargin = (customGridParams.topMargin !== null && customGridParams.topMargin !== undefined) ? customGridParams.topMargin : gridConstants.topMargin;
                    var bottomMargin = (customGridParams.bottomMargin !== null && customGridParams.bottomMargin !== undefined) ? customGridParams.bottomMargin : gridConstants.bottomMargin;
                    var columnMargin = (customGridParams.columnMargin !== null && customGridParams.columnMargin !== undefined) ? customGridParams.columnMargin : gridConstants.columnMargin;
                    var columnCount = customGridParams.columnCount;

                    if (columnCount) {
                        var columnWidth = BingApps.UI.GridCalculator._getColumnWidth(pageWidth, defaultRightMargin, columnCount, leftMargin, columnMargin);
                        var columnHeight = pageHeight - topMargin - bottomMargin;
                        return {
                            pageWidth: pageWidth,
                            pageHeight: pageHeight,
                            columnCount: columnCount,
                            columnWidth: columnWidth,
                            columnHeight: columnHeight,
                            rightMargin: defaultRightMargin,
                            leftMargin: leftMargin,
                            columnMargin: columnMargin,
                            topMargin: topMargin,
                            bottomMargin: bottomMargin
                        };
                    } else {
                        var columnCount = 3; // typical case
                        var columnWidth;
                        var done = false;

                        var maxColumnWidth = gridConstants.maxColumnWidth;
                        var minColumnWidth = gridConstants.minColumnWidth;

                        while (!done && columnCount >= 2) {
                            // Try with one more column, and with one less column, and see if the column widths are within range. Minimum of 2 columns.
                            var currentColumnWidth = BingApps.UI.GridCalculator._getColumnWidth(pageWidth, defaultRightMargin, columnCount, leftMargin, columnMargin);
                            var oneMoreColumnWidth = BingApps.UI.GridCalculator._getColumnWidth(pageWidth, defaultRightMargin, columnCount + 1, leftMargin, columnMargin);
                            var oneLessColumnWidth = BingApps.UI.GridCalculator._getColumnWidth(pageWidth, defaultRightMargin, columnCount - 1, leftMargin, columnMargin);

                            if (currentColumnWidth > maxColumnWidth) {
                                // if column width is too big
                                if (oneMoreColumnWidth < minColumnWidth) {
                                    // and column width is too small with one more column, use the max column width
                                    columnWidth = maxColumnWidth;
                                    done = true;
                                } else if (oneMoreColumnWidth > maxColumnWidth) {
                                    // and column width is still too big with one more column, try again with one more column
                                    columnCount++;
                                } else {
                                    // otherwise, one more column is the right column count
                                    columnCount++;
                                    columnWidth = oneMoreColumnWidth;
                                    done = true;
                                }
                            } else if (currentColumnWidth < minColumnWidth) {
                                // if column width is too small
                                if (oneLessColumnWidth > maxColumnWidth) {
                                    // and column width is too big with one less column, use the max column width with one fewer column
                                    columnCount--;
                                    columnWidth = maxColumnWidth;
                                    done = true;
                                } else if (oneLessColumnWidth < minColumnWidth) {
                                    // and column width is too small with one less column, try again with one fewer column
                                    columnCount--;
                                } else {
                                    // otherwise, one fewer column is the right column count
                                    columnCount--;
                                    columnWidth = oneLessColumnWidth;
                                    done = true;
                                }
                            } else {
                                // if column width is within range, use it
                                columnWidth = currentColumnWidth;
                                done = true;
                            }
                        }

                        // set the right margin to pick up any slack
                        var rightMargin = BingApps.UI.GridCalculator._getRightMargin(pageWidth, columnWidth, columnCount, leftMargin, columnMargin);
                        // calculate the column height
                        var columnHeight = pageHeight - topMargin - bottomMargin;

                        return {
                            pageWidth: pageWidth,
                            pageHeight: pageHeight,
                            columnCount: columnCount,
                            columnWidth: columnWidth,
                            columnHeight: columnHeight,
                            rightMargin: rightMargin,
                            leftMargin: leftMargin,
                            columnMargin: columnMargin,
                            topMargin: topMargin,
                            bottomMargin: bottomMargin
                        };
                    }
                },

                _getColumnWidth: function (pageWidth, rightMargin, columnCount, leftMargin, columnMargin) {
                    return Math.floor((pageWidth - leftMargin - rightMargin - (columnCount - 1) * columnMargin) / columnCount);
                },

                _getRightMargin: function (pageWidth, columnWidth, columnCount, leftMargin, columnMargin) {
                    return pageWidth - leftMargin - columnCount * (columnWidth + columnMargin) + columnMargin;
                },

                landscapeGridConstants: {
                    leftMargin: 120,
                    columnMargin: 30,
                    defaultRightMargin: 25,
                    topMargin: 30,
                    bottomMargin: 50,
                    minColumnWidth: 300,
                    maxColumnWidth: 460
                },

                portraitGridConstants: {
                    leftMargin: 100,
                    columnMargin: 30,
                    defaultRightMargin: 100,
                    topMargin: 30,
                    bottomMargin: 80,
                    minColumnWidth: 375,
                    maxColumnWidth: 770
                }
            }),
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // PageManager manages a single page. It is a view into the array of content elements, footer elements, etc.
    WinJS.Namespace.define("BingApps.UI", {
        PageManager: WinJS.Class.define(
            function (options) {
                /// <summary>
                /// Creates an insance of PageManager.
                /// </summary>
                /// <param name="options">
                /// - surfaceManager: the SurfaceManager instance
                /// - contentElements: Array of all content elements
                /// - footerBlockElements: Array of all footer elements
                /// - layoutData: layout data containing all block placements
                /// - pageIndex: index of current page
                /// - tocAnchorText: text for the toc anchor of this page
                /// </param>
                this._surfaceManager = options.surfaceManager;
                this._contentElements = options.contentElements;
                this._footerBlockElements = options.footerBlockElements;
                this._layoutData = options.layoutData;
                this._pageIndex = options.pageIndex;
                this._tocAnchorText = options.tocAnchorText;
                this._footer = null;
            },
            {
                _surfaceManager: null,
                _contentElements: null,
                _footerElements: null,
                _layoutData: null,
                _pageIndex: null,
                _tocAnchorText: null,
                _footer: null,

                pageIndex: {
                    get: function () {
                        /// <summary>
                        /// Returns the 0-based index of this page.
                        /// </summary>
                        return this._pageIndex;
                    }
                },

                pageNumberString: {
                    set: function (value) {
                        var footer = this._footer;
                        if (footer) {
                            footer.pageNumberString = value;
                        }
                    },
                },

                tocAnchorText: {
                    set: function (value) {
                        var footer = this._footer;
                        if (footer) {
                            this._tocAnchorText = value;
                            footer.tocAnchorText = value;
                        }
                    },
                },

                isEmpty: function(context) {
                    /// <summary>
                    /// Returns true if this page does not have any content or blocks.
                    /// </summary>

                    var gridOptions = context.gridOptions;
                    var isBlockEmpty = true;
                    var isContentEmpty = true;

                    // find out if there are no blocks on the page
                    var layoutData = this._layoutData;
                    var exclusions = BingApps.UI.ArticleReaderUtils.getAllExclusions(layoutData);
                    for (var i = 0, len = exclusions.length; i < len; i++) {
                        var exclusion = exclusions[i];
                        if (exclusion) {
                            var isExclusionOnPage = this._isExclusionOnPage(exclusion, gridOptions);
                            if (isExclusionOnPage) {
                                isBlockEmpty = false;
                                break;
                            }
                        }
                    }

                    if (isBlockEmpty) {
                        // find out if there is no content on page
                        var startIndex = this._getStartIndex(gridOptions);
                        var firstContentElement = this._getContentElement(startIndex, context);
                        isContentEmpty = BingApps.UI.ArticleReaderUtils.isContentElementEmpty(firstContentElement);
                    }

                    var isEmpty = isBlockEmpty && isContentEmpty;
                    return isEmpty;
                },

                isOverflowing: function(context) {
                    /// <summary>
                    /// Returns true if the page is overflowing with content, or there are exclusions on higher pages.
                    /// </summary>

                    var gridOptions = context.gridOptions;
                    var isBlockOverflowing = false;
                    var isContentOverflowing = false;

                    // find out if blocks are overflowing
                    var layoutData = this._layoutData;

                    var exclusions = BingApps.UI.ArticleReaderUtils.getAllExclusions(layoutData);
                    for (var i = 0, len = exclusions.length; i < len; i++) {
                        var exclusion = exclusions[i];
                        var isExclusionOnHigherPage = this._isExclusionOnHigherPage(exclusion, gridOptions);
                        if (isExclusionOnHigherPage) {
                            isBlockOverflowing = true;
                            break;
                        }
                    }

                    if (!isBlockOverflowing) {
                        // find out if content is overflowing
                        var endIndex = this._getEndIndex(gridOptions);
                        var lastContentElement = this._getContentElement(endIndex, context);
                        var ranges = lastContentElement.msGetRegionContent();
                        isContentOverflowing = BingApps.UI.ArticleReaderUtils.isContentElementOverflowing(lastContentElement);
                    }


                    var isOverflowing = isBlockOverflowing || isContentOverflowing;
                    return isOverflowing;
                },

                isLastColumnEmpty: function (context) {
                    /// <summary>
                    /// Returns true if the last column of this page is empty.
                    /// </summary>

                    var gridOptions = context.gridOptions;
                    var isBlockEmpty = true;
                    var isContentEmpty = true;

                    var endIndex = this._getEndIndex(gridOptions);
                    var layoutData = this._layoutData;
                    var exclusions = BingApps.UI.ArticleReaderUtils.getAllExclusions(layoutData);
                    for (var i = 0, len = exclusions.length; i < len; i++) {
                        var exclusion = exclusions[i];
                        var isExclusionOnColumn = BingApps.UI.ArticleReaderUtils.isExclusionOnColumn(exclusion, endIndex);
                        if (isExclusionOnColumn) {
                            isBlockEmpty = false;
                            break;
                        }
                    }

                    if (isBlockEmpty) {
                        var lastColumn = this._getContentElement(endIndex, context);
                        isContentEmpty = BingApps.UI.ArticleReaderUtils.isContentElementEmpty(lastColumn);
                    }

                    var isLastColumnEmpty = isContentEmpty && isBlockEmpty;

                    return isLastColumnEmpty;
                },

                createElements: function (context) {
                    /// <summary>
                    /// Create content and footer elements required for this page. Reuse from existing elements in array if appropriate.
                    /// </summary>
                    var contentElements = this._contentElements;
                    var gridOptions = context.gridOptions;
                    var endIndex = this._getEndIndex(gridOptions);

                    // create content elements
                    while (endIndex > contentElements.length - 1) {
                        this._getContentElement(contentElements.length, context);
                    }

                    // create footer
                    this._getFooterBlockElement(context);
                },

                associateLayoutWithElements: function (context) {
                    /// <summary>
                    /// Layout content and footer elements that belong to this page.
                    /// </summary>

                    var contentElements = this._contentElements;
                    var gridOptions = context.gridOptions;
                    var startIndex = this._getStartIndex(gridOptions);
                    var endIndex = this._getEndIndex(gridOptions);
                    var pageIndex = this.pageIndex;
                    var columnCount = gridOptions.columnCount;

                    // layout content elements
                    for (var i = startIndex; i <= endIndex; i++) {
                        var contentElement = this._getContentElement(i, context);
                        var contentStyle = contentElement.style;

                        var contentColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(i, columnCount);
                        contentStyle.msGridRow = 2;
                        contentStyle.msGridColumn = contentColumn;
                        contentStyle.msGridRowSpan = 2;
                        contentStyle.msGridColumnSpan = 1;
                        contentElement.setAttribute("data-block-visibility", "shown");
                    }

                    // layout footer
                    var footerBlockElement = this._getFooterBlockElement(context);
                    var footerStyle = footerBlockElement.style;

                    var footerColumn = (((columnCount * 2) + 1) * pageIndex) + 2;
                    var footerColumnSpan = columnCount * 2 - 1;
                    footerStyle.msGridRow = 4;
                    footerStyle.msGridColumn = footerColumn;
                    footerStyle.msGridRowSpan = 1;
                    footerStyle.msGridColumnSpan = footerColumnSpan;
                    footerBlockElement.setAttribute("data-block-visibility", "shown");
                },

                destroy: function (context) {
                    /// <summary>
                    /// Destroy this page by hiding its content and footer elements.
                    /// </summary>

                    var contentElements = this._contentElements;
                    var gridOptions = context.gridOptions;
                    var startIndex = this._getStartIndex(gridOptions);
                    var endIndex = this._getEndIndex(gridOptions);

                    // hide content elements
                    for (var i = startIndex; i <= endIndex; i++) {
                        var contentElement = this._getContentElement(i, context);
                        contentElement.setAttribute("data-block-visibility", "hidden");
                    }

                    // hide footer element
                    var footerBlockElement = this._getFooterBlockElement(context);
                    footerBlockElement.setAttribute("data-block-visibility", "hidden");
                },

                getSections: function (context) {
                    /// <summary>
                    /// Returns an array of section indexes that are on this page.
                    /// </summary>

                    var gridOptions = context.gridOptions;
                    var sections = [];
                    var contentElements = this._contentElements;
                    var prefix = BingApps.UI.ArticleReader.sectionIdentifierPrefix;
                    var startIndex = this._getStartIndex(gridOptions);
                    var endIndex = this._getEndIndex(gridOptions);
                    for (var i = startIndex; i <= endIndex; i++) {
                        var elt = this._getContentElement(i, context);
                        var ranges = elt.msGetRegionContent();
                        if (ranges) {
                            for (var j = 0, lenj = ranges.length; j < lenj; j++) {
                                var range = ranges[j];
                                var fragment = range.cloneContents();
                                var sectionElts = fragment.querySelectorAll("." + prefix);
                                for (var k = 0, lenk = sectionElts.length; k < lenk; k++) {
                                    var sectionElt = sectionElts[k];
                                    var section = parseInt(sectionElt.id.substr(prefix.length));
                                    sections.push(section);
                                }
                            }
                        }
                    }

                    return sections;
                },

                _getStartIndex: function (gridOptions) {
                    /// <summary>
                    /// Returns the 0-based index of the first column on this page.
                    /// </summary>

                    var columnCount = gridOptions.columnCount;
                    var pageIndex = this.pageIndex;
                    var startIndex = pageIndex * columnCount;
                    return startIndex;
                },

                _getEndIndex: function (gridOptions) {
                    /// <summary>
                    /// Returns the 0-based index of the last column on this page.
                    /// </summary>

                    var columnCount = gridOptions.columnCount;
                    var pageIndex = this.pageIndex;
                    var endIndex = (pageIndex + 1) * columnCount - 1;
                    return endIndex;
                },

                _isExclusionOnPage: function (exclusion, gridOptions) {
                    var columnCount = gridOptions.columnCount;
                    var column = exclusion.column;
                    var pageIndex = this.pageIndex;

                    var pageIndexForColumn = Math.floor(column / columnCount);
                    var isExclusionOnPage = (pageIndexForColumn === pageIndex);

                    return isExclusionOnPage;
                },

                _isExclusionOnHigherPage: function (exclusion, gridOptions) {
                    var columnCount = gridOptions.columnCount;
                    var column = exclusion.column;
                    var pageIndex = this.pageIndex;

                    var pageIndexForColumn = Math.floor(column / columnCount);
                    var isExclusionOnHigherPage = (pageIndexForColumn > pageIndex);

                    return isExclusionOnHigherPage;
                },

                _getContentElement: function (index, context) {
                    var contentElements = this._contentElements;
                    var surfaceManager = this._surfaceManager;
                    var auxiliaryData = context.auxiliaryData;
                    var flowId = auxiliaryData.flowId;

                    while (index > contentElements.length - 1) {
                        var element = BingApps.UI.ArticleReaderUtils.createContentElement(flowId);

                        surfaceManager.appendBlock(element);
                        contentElements.push(element);
                    }
                    var contentElement = contentElements[index];
                    return contentElement;
                },

                _getFooterBlockElement: function (context) {
                    var footerBlockElements = this._footerBlockElements;
                    var pageIndex = this.pageIndex;
                    var surfaceManager = this._surfaceManager;
                    var gridOptions = context.gridOptions;

                    while (pageIndex > footerBlockElements.length - 1) {
                        var element = document.createElement("div");
                        WinJS.Utilities.addClass(element, "footerBlock");

                        surfaceManager.appendBlock(element);
                        footerBlockElements.push(element);
                    }

                    var footerBlockElt = footerBlockElements[pageIndex];
                    footerBlockElt.innerHTML = "";
                    var auxiliaryData = context.auxiliaryData;
                    var tocFlyout = auxiliaryData.tocFlyout;
                    var tocAnchorText = this._tocAnchorText;
                    var footer = this._footer = new BingApps.UI.Footer(null, {
                        gridOptions: gridOptions,
                        tocFlyout: tocFlyout,
                        pageNumberString: "",
                        tocAnchorText: tocAnchorText,
                    });
                    var footerElt = footer.elt;
                    footerBlockElt.appendChild(footerElt);

                    return footerBlockElt;
                },
            },
            {
            })
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Control for the page number on each page.
    WinJS.Namespace.define("BingApps.UI", {
        PageNumber: WinJS.Class.define(
            function (elt, options) {
                /// <summary>
                /// Creates an instance.
                /// </summary>
                /// <param name="options">
                /// pageNumberString: the presentable string to show in this control.
                /// </param>

                elt = this._elt = elt ? elt : document.createElement("div");
                elt.winControl = this;

                elt.setAttribute("aria-hidden", true);
                WinJS.Utilities.addClass(elt, "pageNumber");

                this.pageNumberString = options.pageNumberString;
            },
            {
                _elt: null,

                pageNumberString: {
                    set: function (value) {
                        var elt = this._elt;
                        elt.innerText = value;
                    },
                },
            },
            {
            }),
    });

})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Displays article data in vertical layout for snapped mode.
    WinJS.Namespace.define("BingApps.UI", {
        SnappedArticleReader: WinJS.Class.define(
            function (elt) {
                /// <summary>
                /// Constructs a SnappedArticle Reader.
                /// </summary>
                elt = this.elt = elt ? elt : document.createElement("div");
                elt.winControl = this;
                WinJS.Utilities.addClass(elt, "snappedArticleReader");

                this._currentArticleId = null;
            },
            {
                _rendered: null,
                _currentArticleId: null,

                dispose: function () {
                    this.elt.innerHTML = "";
                },

                currentArticleId: {
                    get: function () {
                        return this._currentArticleId;
                    }
                },

                render: function (articleId, articleData, renderOptions) {
                    var elt = this.elt;
                    elt.innerHTML = "";
                    this._currentArticleId = articleId;

                    var titleBlockElt = document.createElement("div");
                    titleBlockElt.className = "titleBlock";

                    var titleContainerElt = document.createElement("div");
                    titleContainerElt.className = "titleContainer";
                    titleBlockElt.appendChild(titleContainerElt);

                    var isInterstitialAd = articleData.metadata && articleData.metadata.adMetadata;

                    if (isInterstitialAd) {
                        // for interstitial ad, just add a button that says Unsnap
                        var unsnapButton = document.createElement("button");
                        unsnapButton.textContent = WinJS.Resources.getString("BingApps/Unsnap").value;
                        unsnapButton.attachEvent("onclick", function snappedArticleReader_onClick() {
                            Windows.UI.ViewManagement.ApplicationView.tryUnsnap();
                        });
                        elt.appendChild(unsnapButton);
                    }
                    else {
                        // headline
                        var headlineElt = document.createElement("h1");
                        headlineElt.className = "headline";
                        headlineElt.innerText = articleData.title.headline;
                        titleContainerElt.appendChild(headlineElt);

                        // author
                        var authorElt = document.createElement("div");
                        authorElt.className = "author";
                        authorElt.innerText = articleData.title.author ? articleData.title.author : articleData.title.byline;
                        titleContainerElt.appendChild(authorElt);

                        // date
                        var dateElt = document.createElement("div");
                        dateElt.className = "date";
                        dateElt.innerText = articleData.title.date;
                        titleContainerElt.appendChild(dateElt);
                        elt.appendChild(titleBlockElt);

                        var button = document.createElement("button");
                        button.textContent = WinJS.Resources.getString("BingApps/ArticleReaderUnsnap").value;
                        button.attachEvent("onclick", function snappedArticleReader_onClick() {
                            Windows.UI.ViewManagement.ApplicationView.tryUnsnap();
                        });
                        elt.appendChild(button);
                    }

                    return WinJS.Promise.wrap({});
                }
            })
    });

})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Represents the surface of the article reader. Surface is where all the blocks are rendered.
    WinJS.Namespace.define("BingApps.UI", {
        SurfaceManager: WinJS.Class.define(
            function (options) {
                /// <summary>
                /// Creates an instance of SurfaceManager.
                /// </summary>
                /// <param name="options">
                /// - surface: The surface dom element.
                /// </param>

                this._surface = options.surface;
                this._contentElements = [];
                this._titleElements = {};
                this._blockElements = [];
                this._pageManagers = [];
                this._postRenderAdjustments = [];
                this._footerBlockElements = [];
            },
            {
                _surface: null,
                _contentElements: null,
                _titleElements: null,
                _blockElements: null,
                _pageManagers: null,
                _postRenderAdjustments: null,
                _footerBlockElements: null,

                dispose: function () {
                },

                initializeSurface: function (context) {
                    /// <summary>
                    /// initializes the surface
                    /// </summary>
                    var surface = this._surface;
                    var gridOptions = context.gridOptions;
                    var columnMargin = gridOptions.columnMargin;
                    var columnWidth = gridOptions.columnWidth;
                    var leftMargin = gridOptions.leftMargin;
                    var rightMargin = gridOptions.rightMargin;
                    var columnCount = gridOptions.columnCount;
                    var columnHeight = gridOptions.columnHeight;
                    var topMargin = gridOptions.topMargin;
                    var bottomMargin = gridOptions.bottomMargin;
                    var pageWidth = gridOptions.pageWidth;

                    // row style
                    var rowHeight = columnHeight / 2;
                    var rowsStyle = [];
                    rowsStyle.push(topMargin + "px");
                    rowsStyle.push(rowHeight + "px");
                    rowsStyle.push(rowHeight + "px");
                    rowsStyle.push(bottomMargin + "px");
                    surface.style.msGridRows = rowsStyle.join(" ");

                    // column style
                    var columnsStyle = [];
                    columnsStyle.push(leftMargin + "px");
                    for (var j = 0, jlen = columnCount; j < jlen; j++) {
                        columnsStyle.push(columnWidth + "px");
                        columnsStyle.push(columnMargin + "px");
                    }
                    columnsStyle.pop();
                    columnsStyle.push(rightMargin + "px");
                    surface.style.msGridColumns = ["(", columnsStyle.join(" "), ")[1000]"].join(" ");

                    // title style
                    var renderableData = context.renderableData;
                    var titleBlock = renderableData.titleBlock;
                    var titleStyle = titleBlock.style;
                    surface.setAttribute("data-title-style", titleStyle);
                },

                getContentDensity: function (context) {
                    /// <summary>
                    /// Returns the number of characters per pixel times pixel.
                    /// </summary>

                    var contentDensity;
                    var calibrationData = context.calibrationData;
                    if (calibrationData) {
                        var existingDensity = calibrationData.contentDensity;
                        if (existingDensity || existingDensity === 0) {
                            contentDensity = existingDensity;
                        }
                        else {
                            contentDensity = this._determineContentDensity(context);
                        }
                    }
                    else {
                        contentDensity = this._determineContentDensity(context);
                    }

                    contentDensity = Math.max(0.001, contentDensity); // putting a lower cap on density per bug #339350

                    return contentDensity;
                },

                calculateLayout: function (context) {
                    /// <summary>
                    /// Determines the positioning of all blocks, and populates the layoutData object in context.
                    /// </summary>

                    var exclusions = [];
                    var gridOptions = context.gridOptions;
                    var columnHeight = gridOptions.columnHeight;
                    var columnWidth = gridOptions.columnWidth;
                    var columnCount = gridOptions.columnCount;
                    var calibrationData = context.calibrationData;
                    var contentColumnCount = calibrationData.contentColumnCount;
                    var contentDensity = calibrationData.contentDensity;
                    var renderableData = context.renderableData;

                    // title layout
                    var titleBlock = renderableData.titleBlock;
                    var style = titleBlock.style;
                    var titleRenderer = BingApps.UI.SurfaceManager.titleRenderers[style];
                    if (titleRenderer) {
                        var titleLayoutData = titleRenderer.calculateLayout(context, gridOptions);
                        var titleExclusions = titleLayoutData.exclusions;
                        for (var key in titleExclusions) {
                            var exclusion = titleExclusions[key];
                            exclusions.push(exclusion);
                        }
                    }

                    // blocks layout
                    var renderableBlocks = renderableData.renderableBlocks;
                    var maxBlockColumn = 0;
                    var blockLayoutDatas = [];
                    for (var i = 0, len = renderableBlocks.length; i < len; i++) {
                        var renderableBlock = renderableBlocks[i];
                        var block = renderableBlock.block;
                        var type = block.type;
                        var renderer = BingApps.UI.SurfaceManager.blockRenderers[type];

                        if (renderer) {
                            var position = renderableBlock.position;
                            var attributes = block.attributes;

                            var done = false;
                            var tries = 5; // try for 5 pages and then give up
                            var currentExclusionColumnCount = this._getExclusionsColumnCount(exclusions, columnHeight);
                            var startColumn = contentDensity === 0 ? 0 : Math.floor((currentExclusionColumnCount + (position / (contentDensity * columnWidth * columnHeight))) * 2) / 2;
                            var blockLayoutData;
                            while (!done && tries) {
                                tries--;
                                blockLayoutData = renderer.calculateLayout(attributes, startColumn, gridOptions, exclusions);
                                if (blockLayoutData) {
                                    done = true;
                                }
                                else {
                                    // try the next page
                                    startColumn = Math.floor(startColumn) + columnCount - (Math.floor(startColumn) % columnCount);
                                }
                            }

                            // if no place found for block, don't lay it out
                            if (!blockLayoutData) {
                                blockLayoutData = {
                                    exclusion: null,
                                    layoutDelegate: function (elt) {
                                        elt.setAttribute("data-block-visibility", "hidden");
                                    }
                                };
                            }

                            var blockExclusion = blockLayoutData.exclusion;
                            if (blockExclusion) {
                                exclusions.push(blockExclusion);
                                maxBlockColumn = Math.max(maxBlockColumn, blockExclusion.column + blockExclusion.columnSpan - 1);
                            }
                            blockLayoutDatas.push(blockLayoutData);
                        }
                    }

                    // page count (calibrated + exclusions)
                    var exclusionColumnCount = this._getExclusionsColumnCount(exclusions, columnHeight);
                    var totalColumnCount = contentColumnCount + exclusionColumnCount;
                    var pageCount = Math.ceil(Math.max(totalColumnCount, maxBlockColumn + 1) / columnCount);

                    // create layout data
                    var layoutData = context.layoutData;
                    layoutData.pageCount = pageCount;
                    layoutData.titleLayoutData = titleLayoutData;
                    layoutData.blockLayoutDatas = blockLayoutDatas;

                    // create page managers
                    var pageManagers = this._pageManagers;
                    while (pageManagers.length < pageCount) {
                        this._addPage(context);
                    }
                },

                createElements: function (context) {
                    /// <summary>
                    /// Create all the dom elements for all blocks.
                    /// </summary>
                    var that = this;
                    var innerPromise;

                    var promise = new WinJS.Promise(
                        function (c, e, p) {
                            innerPromise = WinJS.Promise.wrap(null);
                            innerPromise = innerPromise
                            .then(function () {
                                that._createTitleElements(context);
                                return WinJS.Promise.wrap(null);
                            })
                            .then(function () {
                                return WinJS.Promise.timeout();
                            })
                            .then(function () {
                                that._createPageElements(context);
                                return WinJS.Promise.wrap(null);
                            })
                            .then(function () {
                                return WinJS.Promise.timeout();
                            })
                            .then(function () {
                                that._createBlockElements(context);
                                return WinJS.Promise.wrap(null);
                            })
                            .then(function () {
                                c();
                            }, function (err) {
                                e(err);
                            });
                        },
                        function () {
                            if (innerPromise) {
                                innerPromise.cancel();
                            }
                        });

                    return promise;
                },

                associateLayoutWithElements: function (context) {
                    /// <summary>
                    /// Associate layout positining data with dom elements are created.
                    /// </summary>

                    var layoutData = context.layoutData;

                    // initially hide all content and footer blocks (in case any left overs from previous rotation)
                    this._hideAllPageElements();

                    // page elements
                    var pageManagers = this._pageManagers;
                    for (var i = 0, leni = pageManagers.length; i < leni; i++) {
                        var pageManager = pageManagers[i];
                        pageManager.associateLayoutWithElements(context);
                    }

                    // layout title blocks
                    var titleLayoutData = layoutData.titleLayoutData;
                    if (titleLayoutData) {
                        var titleLayoutDelegates = titleLayoutData.layoutDelegates;
                        var titleElements = this._titleElements;
                        for (var key in titleElements) {
                            var titleElement = titleElements[key];
                            var titleLayoutDelegate = titleLayoutDelegates[key];
                            if (titleLayoutDelegate) {
                                titleLayoutDelegate.call(titleLayoutData, titleElement);
                            }
                        }
                    }

                    // layout other blocks
                    var blockElements = this._blockElements;
                    var blockLayoutDatas = layoutData.blockLayoutDatas;
                    for (var j = 0, lenj = blockElements.length; j < lenj; j++) {
                        var blockElement = blockElements[j];
                        var blockLayoutData = blockLayoutDatas[j];

                        // reset aggregation state from previous layout
                        this._applyAggregationDelegate(blockLayoutData, blockElement, true);

                        var blockLayoutDelegate = blockLayoutData.layoutDelegate;
                        if (blockLayoutDelegate) {
                            var blockVisibility = blockElement.getAttribute("data-block-visibility");
                            var isFirstLayout = !blockVisibility;
                            blockElement.setAttribute("data-block-visibility", "shown");
                            blockLayoutDelegate.call(blockLayoutData, blockElement, isFirstLayout);

                            // set data-location
                            var exclusion = blockLayoutData.exclusion;
                            if (exclusion) {
                                var rowAlign = exclusion.rowAlign;
                                blockElement.setAttribute("data-location", rowAlign);
                            }
                        }
                    }

                    return WinJS.Promise.wrap(null);
                },

                adjust: function (context) {
                    /// <summary>
                    /// After layout association, does any final adjustments necessary.
                    /// </summary>

                    var that = this;
                    var innerPromise;

                    var promise = new WinJS.Promise(
                        function (c, e, p) {
                            innerPromise = WinJS.Promise.wrap(null);
                            innerPromise = innerPromise
                            .then(function () {
                                // if any exclusion was created post adjustment, reset it
                                that._resetPostAdjustmentExclusions(context);

                                // run post render adjustments
                                that._runPostRenderAdjustments(context);

                                return WinJS.Promise.wrap(null);
                            })
                            .then(function () {
                                return WinJS.Promise.timeout();
                            })
                            .then(function () {
                                // hide or aggregate inline blocks that are off by themselves
                                that._handleOrphans(context);

                                // fix up number of pages
                                that._adjustPages(context);

                                // post adjustment layout delegates (referral block, etc.)
                                that._runPostAdjustmentLayoutDelegates(context);

                                return WinJS.Promise.wrap(null);
                            })
                            .then(function () {
                                return WinJS.Promise.timeout();
                            })
                            .then(function () {
                                // update surface size
                                that._updateSurfaceSize(context);

                                // update bookmarks data
                                that._updateBookmarks(context);

                                // update page data
                                that._updatePageData(context);

                                return WinJS.Promise.wrap(null);
                            })
                            .then(function () {
                                c();
                            }, function (err) {
                                e(err);
                            });
                        },
                        function () {
                            if (innerPromise) {
                                innerPromise.cancel();
                            }
                        });

                    return promise;
                },

                scrollToSection: function (sectionIndex, context) {
                    /// <summary>
                    /// Scrolls the viewport to the given 0-based section index.
                    /// </summary>

                    var auxiliaryData = context.auxiliaryData;
                    var bookmarks;

                    // try to get bookmarks out of immediateBookmarks, and if immediateBookmarks is null, get it from bookmarksList.
                    var immediateBookmarks = auxiliaryData.immediateBookmarks;
                    if (immediateBookmarks) {
                        bookmarks = immediateBookmarks;
                    }
                    else {
                        var bookmarksList = auxiliaryData.bookmarksList;
                        bookmarks = bookmarksList.bookmarks;
                    }

                    var key = "b" + sectionIndex;
                    var bookmarkItem = bookmarks[key];
                    if (bookmarkItem) {
                        var pageIndex = bookmarkItem.pageIndex;
                        var viewportManager = auxiliaryData.viewportManager;
                        var gridOptions = context.gridOptions;
                        var pageWidth = gridOptions.pageWidth;
                        viewportManager.scrollToPageIndex(pageIndex, pageWidth);
                    }
                },

                appendBlock: function (blockElt) {
                    /// <summary>
                    /// Appends the given dom element to the surface.
                    /// </summary>

                    var surface = this._surface;
                    surface.appendChild(blockElt);
                },

                getLastPageWithEmptyLastColumn: function (context, createNewPage) {
                    /// <summary>
                    /// Returns the PageManager associated with the last page with an empty column.
                    /// Creates a new page if necessary. Used for trailing blocks such as Referral block.
                    /// </summary>
                    /// <param name="createNewPage">If false, don't attempt to create a new page, and return null.</param>

                    var pageManagers = this._pageManagers;
                    var lastPage = pageManagers[pageManagers.length - 1];
                    var isLastColumnEmpty = lastPage.isLastColumnEmpty(context);

                    var page;
                    if (isLastColumnEmpty) {
                        page = lastPage;
                    }
                    else if (createNewPage) {
                        page = this._addPage(context);
                        page.associateLayoutWithElements(context);
                    }

                    return page;
                },

                getLastColumnWithContent: function (context) {
                    /// <summary>
                    /// Returns the 0-based column index of the last column on the surface with any content in it.
                    /// </summary>

                    var contentElements = this._contentElements;
                    var index = 0;
                    for (var i = contentElements.length - 1; i >= 0; i--) {
                        var contentElement = contentElements[i];
                        if (!BingApps.UI.ArticleReaderUtils.isContentElementEmpty(contentElement)) {
                            index = i;
                            break;
                        }
                    }
                    return index;
                },

                isColumnOverflowing: function (columnIndex, context) {
                    /// <summary>
                    /// Given a 0-based column index, determines whether that column is overflowing.
                    /// </summary>

                    var contentElements = this._contentElements;
                    var contentElement = contentElements[columnIndex];
                    var isOverflowing = false;
                    if (contentElement) {
                        isOverflowing = BingApps.UI.ArticleReaderUtils.isContentElementOverflowing(contentElement);
                    }
                    return isOverflowing;
                },

                getNextColumnIndexAndMaybeCreatePage: function (columnIndex, context) {
                    /// <summary>
                    /// Given a starting 0-based column index, returns the index of the next column, and creates an additional page in the process if necessary.
                    /// </summary>

                    var pageManagers = this._pageManagers;
                    var gridOptions = context.gridOptions;
                    var columnCount = gridOptions.columnCount;

                    var nextColumnIndex = columnIndex + 1;
                    while (pageManagers.length * columnCount <= nextColumnIndex) {
                        var page = this._addPage(context);
                        page.associateLayoutWithElements(context);
                    }

                    return nextColumnIndex;
                },

                getPageCount: function () {
                    var pageManagers = this._pageManagers;
                    var pageCount = pageManagers.length;
                    return pageCount;
                },

                _determineContentDensity: function (context) {
                    var surface = this._surface;
                    var contentElements = this._contentElements;
                    var auxiliaryData = context.auxiliaryData;
                    var flowId = auxiliaryData.flowId;

                    var contentElement = BingApps.UI.ArticleReaderUtils.createContentElement(flowId);
                    contentElements.push(contentElement);
                    surface.appendChild(contentElement);

                    var style = contentElement.style;
                    style.msGridRow = 2;
                    style.msGridColumn = 2;
                    style.msGridRowSpan = 2;
                    style.msGridColumnSpan = 1;

                    var charCount = 0;
                    var ranges = contentElement.msGetRegionContent();
                    if (ranges) {
                        for (var i = 0, len = ranges.length; i < len; i++) {
                            var range = ranges[i];
                            charCount = charCount + range.toString().length;
                        }
                    }

                    var charactersPerColumn = charCount;
                    var gridOptions = context.gridOptions;
                    var columnHeight = gridOptions.columnHeight;
                    var columnWidth = gridOptions.columnWidth;
                    var density = charactersPerColumn / (columnHeight * columnWidth);

                    return density; // characters per px*px
                },

                _getExclusionsColumnCount: function (exclusions, columnHeight) {
                    var columns = 0;
                    for (var i = 0, len = exclusions.length; i < len; i++) {
                        var exclusion = exclusions[i];
                        var columnSpan = exclusion.columnSpan;
                        var height = exclusion.height;
                        columns += columnSpan * height / columnHeight;
                    }
                    return columns;
                },

                _adjustPages: function (context) {
                    var pageManagers = this._pageManagers;
                    var lastPage;
                    // remove some
                    while (true) {
                        lastPage = pageManagers[pageManagers.length - 1];
                        var isEmpty = lastPage && lastPage.isEmpty(context);
                        if (isEmpty) {
                            this._removeLastPage(context);
                        }
                        else {
                            break;
                        }
                    }

                    // add some
                    while (true) {
                        lastPage = pageManagers[pageManagers.length - 1];
                        var isOverflowing = lastPage && lastPage.isOverflowing(context);
                        if (isOverflowing) {
                            // add one more page
                            var pageManager = this._addPage(context);
                            pageManager.associateLayoutWithElements(context);
                        }
                        else {
                            break;
                        }
                    }
                },

                _runPostRenderAdjustments: function (context) {
                    var gridOptions = context.gridOptions;
                    var postRenderAdjustments = this._postRenderAdjustments;
                    for (var i = 0, len = postRenderAdjustments.length; i < len; i++) {
                        var postRenderAdjustment = postRenderAdjustments[i];
                        postRenderAdjustment(gridOptions);
                    }
                },

                _runPostAdjustmentLayoutDelegates: function (context) {
                    var layoutData = context.layoutData;
                    var blockLayoutDatas = layoutData.blockLayoutDatas;

                    // layout other blocks
                    var blockElements = this._blockElements;
                    for (var i = 0, len = blockElements.length; i < len; i++) {
                        var blockElement = blockElements[i];
                        var blockLayoutData = blockLayoutDatas[i];

                        var postAdjustmentLayoutDelegate = blockLayoutData.postAdjustmentLayoutDelegate;
                        if (postAdjustmentLayoutDelegate) {
                            // reset aggregation state from previous layout
                            var aggregated = blockLayoutData.aggregated;
                            if (!aggregated) {
                                this._applyAggregationDelegate(blockLayoutData, blockElement, true);
                            }

                            postAdjustmentLayoutDelegate.call(blockLayoutData, blockElement, this, context);
                        }
                    }
                },

                _resetPostAdjustmentExclusions: function (context) {
                    var layoutData = context.layoutData;
                    var blockLayoutDatas = layoutData.blockLayoutDatas;
                    for (var i = 0, len = blockLayoutDatas.length; i < len; i++) {
                        var blockLayoutData = blockLayoutDatas[i];
                        var hasPostAdjustmentDelegate = blockLayoutData.postAdjustmentLayoutDelegate || false;
                        if (hasPostAdjustmentDelegate) {
                            blockLayoutData.exclusion = null;
                        }
                    }
                },

                _updateBookmarks: function (context) {
                    var hasBookmarks = BingApps.UI.ArticleReaderUtils.hasBookmarks(context);
                    if (hasBookmarks) {
                        var renderableData = context.renderableData;
                        var auxiliaryData = context.auxiliaryData;
                        var bookmarksList = auxiliaryData.bookmarksList;
                        var pageManagers = this._pageManagers;
                        var map = {};
                        for (var i = 0, leni = pageManagers.length; i < leni; i++) {
                            var pageManager = pageManagers[i];
                            var currentPageIndex = pageManager.pageIndex;
                            var sections = pageManager.getSections(context);
                            for (var j = 0, lenj = sections.length; j < lenj; j++) {
                                var currentSection = sections[j];
                                map[currentSection] = currentPageIndex;
                            }
                        }

                        var newBookmarks = {};
                        var bookmarks = bookmarksList.backingData.bookmarks;
                        for (var section in map) {
                            var pageIndex = map[section];

                            var key = "b" + section;
                            var bookmark = bookmarks[key];
                            var name = bookmark.name;

                            var newBookmark = {
                                name: name,
                                pageIndex: pageIndex,
                                pageNumber: BingApps.UI.ArticleReaderUtils.convertPageIndexToPageNumber(pageIndex),
                            };
                            newBookmarks[key] = newBookmark;
                        }
                        msSetImmediate(function () { // the msSetImmediate fixes bug 323459 which appears to be a trident MSHTML bug
                            bookmarksList.bookmarks = newBookmarks; // triggers change notification on binding
                            auxiliaryData.immediateBookmarks = null;
                        });

                        // bookmarksList is getting updated in the msSetImmediate. We do need the new bookmarks values immediately though
                        // for scrolling to the right section. So we'll save another copy of it into the auxiliaryData.
                        auxiliaryData.immediateBookmarks = newBookmarks;
                    }
                },

                _updatePageData: function (context) {
                    // update page numbers
                    this._updatePageNumberData(context);

                    // for first page, maybe hide toc anchor
                    var auxiliaryData = context.auxiliaryData;
                    var pageManagers = this._pageManagers;
                    var firstPage = pageManagers[0];
                    if (firstPage) {
                        var showTocAnchor = this._getShowTocAnchorForPage(0, context);
                        var tocAnchorText = showTocAnchor ? auxiliaryData.tocAnchorText : "";
                        firstPage.tocAnchorText = tocAnchorText;
                    }
                },

                _updatePageNumberData: function (context) {
                    var pageManagers = this._pageManagers;
                    var pageCount = pageManagers.length;

                    for (var i = 0; i < pageCount; i++) {
                        var pageManager = pageManagers[i];
                        pageManager.pageNumberString = BingApps.UI.ArticleReaderUtils.convertPageNumberDataToString(i, pageCount);
                    }
                },

                _getShowTocAnchorForPage: function (pageIndex, context) {
                    var gridOptions = context.gridOptions;
                    var hasBookmarks = BingApps.UI.ArticleReaderUtils.hasBookmarks(context);
                    var hasToc = BingApps.UI.ArticleReaderUtils.hasToc(gridOptions);
                    var showTocAnchor = hasBookmarks && (!hasToc || pageIndex !== 0);

                    return showTocAnchor;
                },

                _addPage: function (context) {
                    var contentElements = this._contentElements;
                    var footerBlockElements = this._footerBlockElements;
                    var gridOptions = context.gridOptions;
                    var surface = this._surface;
                    var pageManagers = this._pageManagers;
                    var layoutData = context.layoutData;
                    var renderableData = context.renderableData;
                    var auxiliaryData = context.auxiliaryData;

                    // page data
                    var pageIndex = pageManagers.length;
                    var showTocAnchor = this._getShowTocAnchorForPage(pageIndex, context);
                    var tocAnchorText = showTocAnchor ? auxiliaryData.tocAnchorText : "";

                    var pageManager = new BingApps.UI.PageManager({
                        pageIndex: pageIndex,
                        pageNumberString: "",
                        tocAnchorText: tocAnchorText,
                        contentElements: contentElements,
                        footerBlockElements: footerBlockElements,
                        gridOptions: gridOptions,
                        layoutData: layoutData,
                        surfaceManager: this,
                    });
                    pageManagers.push(pageManager);
                    return pageManager;
                },

                _removeLastPage: function (context) {
                    var pageManagers = this._pageManagers;
                    var pageManager = pageManagers.pop();
                    pageManager.destroy(context);
                },

                _updateSurfaceSize: function (context) {
                    var surface = this._surface;
                    var gridOptions = context.gridOptions;
                    var pageWidth = gridOptions.pageWidth;
                    var pageManagers = this._pageManagers;
                    var pageCount = pageManagers.length;

                    // update surface width
                    surface.style.width = pageWidth * pageCount + "px";
                },

                _createPageElements: function (context) {
                    var pageManagers = this._pageManagers;
                    for (var i = 0, len = pageManagers.length; i < len; i++) {
                        var pageManager = pageManagers[i];
                        pageManager.createElements(context); // maybe create elements, maybe not if already in dom
                    }
                },

                _createTitleElements: function (context) {
                    var renderableData = context.renderableData;
                    var gridOptions = context.gridOptions;
                    var surface = this._surface;

                    // render title
                    var titleBlock = renderableData.titleBlock;
                    var style = titleBlock.style;
                    var titleRenderer = BingApps.UI.SurfaceManager.titleRenderers[style];
                    if (titleRenderer) {
                        var renderData = titleRenderer.render(context);

                        // process elements
                        var elements = renderData.elements;
                        var titleElements = this._titleElements;
                        for (var key in elements) {
                            var element = elements[key];
                            this.appendBlock(element);
                            titleElements[key] = element;
                        }

                        // process adjustments
                        var adjustments = renderData.adjustments;
                        if (adjustments) {
                            var postRenderAdjustments = this._postRenderAdjustments;
                            for (var i = 0, len = adjustments.length; i < len; i++) {
                                var adjustment = adjustments[i];
                                postRenderAdjustments.push(adjustment);
                            }
                        }
                    }
                },

                _createBlockElements: function (context) {
                    var renderableData = context.renderableData;
                    var renderableBlocks = renderableData.renderableBlocks;
                    var surface = this._surface;
                    var blockElements = this._blockElements;
                    var postRenderAdjustments = this._postRenderAdjustments;
                    var gridOptions = context.gridOptions;

                    for (var i = 0, ilen = renderableBlocks.length; i < ilen; i++) {
                        var renderableBlock = renderableBlocks[i];
                        var block = renderableBlock.block;
                        var type = block.type;
                        var renderer = BingApps.UI.SurfaceManager.blockRenderers[type];
                        if (renderer) {
                            var attributes = block.attributes;
                            var renderData = renderer.render(attributes, context);

                            // process element
                            var element = renderData.element;
                            this.appendBlock(element);
                            blockElements.push(element);

                            // process adjustments
                            var adjustments = renderData.adjustments;
                            if (adjustments) {
                                for (var j = 0, jlen = adjustments.length; j < jlen; j++) {
                                    var adjustment = adjustments[j];
                                    postRenderAdjustments.push(adjustment);
                                }
                            }
                        }
                    }
                },

                _hideAllPageElements: function () {
                    var contentElements = this._contentElements;
                    for (var i = 0, leni = contentElements.length; i < leni; i++) {
                        var contentElement = contentElements[i];
                        contentElement.setAttribute("data-block-visibility", "hidden");
                    }
                    var footerBlockElements = this._footerBlockElements;
                    for (var j = 0, lenj = footerBlockElements.length; j < lenj; j++) {
                        var footerBlockElement = footerBlockElements[j];
                        footerBlockElement.setAttribute("data-block-visibility", "hidden");
                    }
                },

                _handleOrphans: function (context) {
                    var auxiliaryData = context.auxiliaryData;
                    var renderAll = auxiliaryData.renderAll;

                    renderAll = true;

                    if (renderAll) {
                        this._aggregateOrphans(context);
                    }
                    else {
                        this._hideOrphans(context);
                    }
                },

                _aggregateOrphans: function (context) {
                    // aggregate blocks that are not allowed to be orphaned and are on empty final columns
                    var layoutData = context.layoutData;
                    var blockLayoutDatas = layoutData.blockLayoutDatas;
                    var blockElements = this._blockElements;
                    var contentElements = this._contentElements;
                    var gridOptions = context.gridOptions;
                    var columnHeight = gridOptions.columnHeight;
                    var columnCount = gridOptions.columnCount;

                    // first pass to get all the orphans, fix up number of pages first for accuracy of the getLastColumnWithContent call.
                    this._adjustPages(context);
                    var lastColumnWithContent = this.getLastColumnWithContent(context);
                    var orphansData = this._getOrphansData(context, lastColumnWithContent);
                    var orphans = orphansData.orphans;
                    context.auxiliaryData.instrumentationData.trailingMediaBlockCount = orphansData.trailingMediaBlockCount;

                    // second pass to hide all the orphans
                    for (var j = 0, lenj = orphans.length; j < lenj; j++) {
                        var orphanToHide = orphans[j];
                        var blockElementToHide = orphanToHide.blockElement;
                        blockElementToHide.setAttribute("data-visibility", "hidden");
                    }

                    // third pass to aggregate the orphans
                    var aggregationColumn = lastColumnWithContent;
                    var lastColumnWithExclusion = this._getLastColumnWithExclusion(context);
                    var emptyColumn = Math.max(lastColumnWithContent, lastColumnWithExclusion) + 1;
                    var limits = this._getColumnLimits(context, aggregationColumn, orphans);
                    var marginTop = limits.top;
                    var first = true;

                    for (var i = 0, len = orphans.length; i < len; i++) {
                        var orphan = orphans[i];
                        var blockElement = orphan.blockElement;
                        var blockLayoutData = orphan.blockLayoutData;

                        // reset aggregation state from previous layout
                        this._applyAggregationDelegate(blockLayoutData, blockElement, true);

                        // prepare for aggregation (resize, etc.)
                        this._prepareForAggregationDelegate(blockLayoutData, blockElement, columnHeight, emptyColumn, gridOptions);

                        // measure height
                        var height = blockElement.offsetHeight;

                        if (first) {
                            first = false;

                            // create temp div for measurement
                            var tempDiv = document.createElement("div");
                            tempDiv.className = "exclusion";
                            tempDiv.style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(aggregationColumn, columnCount);
                            tempDiv.style.msGridRow = 2;
                            tempDiv.style.msGridRowSpan = 2;
                            tempDiv.style.msGridRowAlign = "end";
                            this.appendBlock(tempDiv);

                            var availableHeight = 0;
                            var step = 20;
                            tempDiv.style.height = availableHeight + "px";

                            var contentElement = contentElements[aggregationColumn];
                            while (!BingApps.UI.ArticleReaderUtils.isContentElementOverflowing(contentElement) && availableHeight < columnHeight - marginTop) {
                                availableHeight += step;
                                tempDiv.style.height = availableHeight + "px";
                            }

                            availableHeight = Math.max(0, availableHeight - step - 20); // 20 margin

                            var surface = this._surface;
                            surface.removeChild(tempDiv);

                            marginTop = columnHeight - availableHeight;
                        }

                        // go to next aggregation column if necessary
                        if (marginTop + height > columnHeight - limits.bottom) {
                            aggregationColumn++;
                            limits = this._getColumnLimits(context, aggregationColumn, orphans);
                            marginTop = limits.top;
                        }
                        this._aggregate(blockLayoutData, blockElement, aggregationColumn, marginTop, context);

                        // move aggregation snap point down
                        marginTop += height;
                    }
                },

                _getOrphansData: function(context, lastColumnWithContent) {
                    var orphans = [];
                    var actions;
                    var blockElements = this._blockElements;
                    var layoutData = context.layoutData;
                    var blockLayoutDatas = layoutData.blockLayoutDatas;
                    var trailingMediaBlockCount = 0;

                    for (var i = 0, len = blockElements.length; i < len; i++) {
                        var blockElement = blockElements[i];
                        var blockLayoutData = blockLayoutDatas[i];
                        if (blockLayoutData.type === BingApps.UI.ActionsRenderer) {
                            actions = {
                                blockElement: blockElement,
                                blockLayoutData: blockLayoutData,
                            };
                        }

                        var alreadyOrphan = (blockElement.getAttribute("data-location") === "aggregate");
                        var shouldHandleOrphan = (alreadyOrphan && blockLayoutData.type !== BingApps.UI.ActionsRenderer) || this._shouldHandleOrphan(blockLayoutData, lastColumnWithContent);

                        if (shouldHandleOrphan) {
                            orphans.push({
                                blockElement: blockElement,
                                blockLayoutData: blockLayoutData,
                            });
                            if (blockLayoutData.type !== BingApps.UI.ActionsRenderer) {
                                trailingMediaBlockCount++;
                            }
                        }
                    }

                    if (orphans.length && actions) {
                        orphans.push({
                            blockElement: actions.blockElement,
                            blockLayoutData: actions.blockLayoutData,
                        });
                    }

                    return {orphans: orphans, trailingMediaBlockCount: trailingMediaBlockCount};
                },

                _aggregate: function (blockLayoutData, blockElement, column, marginTop, context) {
                    var exclusion = blockLayoutData.exclusion;
                    var gridOptions = context.gridOptions;
                    var columnHeight = gridOptions.columnHeight;
                    var columnCount = gridOptions.columnCount;

                    // update exclusion
                    var columnSpan = 1;
                    var rowAlign = "start";
                    exclusion.column = column;
                    exclusion.columnSpan = columnSpan;
                    exclusion.rowAlign = rowAlign;
                    exclusion.height = columnHeight;

                    // update element in grid
                    var gridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(column, columnCount);
                    var gridColumnSpan = columnSpan * 2 - 1;
                    var style = blockElement.style;
                    style.msGridColumn = gridColumn;
                    style.msGridColumnSpan = gridColumnSpan;
                    style.msGridRowAlign = rowAlign;

                    // aggregate
                    this._applyAggregationDelegate(blockLayoutData, blockElement, false, marginTop);
                },

                _prepareForAggregationDelegate: function (blockLayoutData, blockElement, columnHeight, emptyColumn, gridOptions) {
                    var columnCount = gridOptions.columnCount;
                    var prepareForAggregationDelegate = blockLayoutData.prepareForAggregationDelegate;
                    if (prepareForAggregationDelegate) {
                        var exclusion = blockLayoutData.exclusion;
                        if (exclusion) {
                            exclusion.columnSpan = 1;
                            exclusion.rowAlign = "start";
                            exclusion.height = columnHeight;
                        }

                        // move to an empty column
                        var style = blockElement.style;
                        style.msGridRow = 2;
                        style.msGridColumn = BingApps.UI.ArticleReaderUtils.convertColumnIndexToGridColumn(emptyColumn, columnCount);
                        style.msGridRowSpan = 2;
                        style.msGridColumnSpan = 1;
                        style.msGridRowAlign = "start";
                        
                        WinJS.Utilities.removeClass(blockElement, "exclusion");
                        blockElement.setAttribute("data-location", "aggregate");
                        blockElement.setAttribute("data-visibility", "shown");

                        prepareForAggregationDelegate.call(blockLayoutData, blockElement);
                    }
                },

                _applyAggregationDelegate: function (blockLayoutData, blockElement, reset, top) {
                    var applyAggregationDelegate = blockLayoutData.applyAggregationDelegate;
                    if (applyAggregationDelegate) {
                        if (reset) {
                            WinJS.Utilities.addClass(blockElement, "exclusion");
                        }

                        applyAggregationDelegate.call(blockLayoutData, blockElement, reset, top);
                    }

                },

                _getColumnLimits: function (context, index, orphans) {
                    var gridOptions = context.gridOptions;
                    var columnCount = gridOptions.columnCount;

                    var blockElements = this._blockElements;
                    var titleElements = this._titleElements;
                    var top = 0;
                    var bottom = 0;

                    for (var key in titleElements) {
                        var titleElement = titleElements[key];
                        if (titleElement && BingApps.UI.ArticleReaderUtils.isElementOnColumn(titleElement, index, columnCount)) {
                            var titleHeight = titleElement.offsetHeight;
                            var titleAlign = titleElement.currentStyle.msGridRowAlign;
                            if (titleAlign === "start") {
                                top = Math.max(top, titleHeight);
                            }
                            else if (titleAlign === "end") {
                                bottom = Math.max(bottom, titleHeight);
                            }
                        }
                    }

                    for (var i = 0, len = blockElements.length; i < len; i++) {
                        var blockElement = blockElements[i];
                        var isOrphan = this._isElementOrphan(blockElement, orphans);
                        var isOnColumn = BingApps.UI.ArticleReaderUtils.isElementOnColumn(blockElement, index, columnCount);
                        if (!isOrphan && isOnColumn) {
                            var blockHeight = blockElement.offsetHeight;
                            var blockAlign = blockElement.currentStyle.msGridRowAlign;
                            if (blockAlign === "start") {
                                top = Math.max(top, blockHeight);
                            }
                            else if (blockAlign === "end") {
                                bottom = Math.max(bottom, blockHeight);
                            }
                        }
                    }

                    var limits = {
                        top: top,
                        bottom: bottom,
                    };

                    return limits;
                },

                _isElementOrphan: function (element, orphans) {
                    var isOrphan = false;
                    for (var i = 0, len = orphans.length; i < len; i++) {
                        var orphan = orphans[i];
                        var blockElement = orphan.blockElement;

                        if (element === blockElement) {
                            isOrphan = true;
                            break;
                        }
                    }

                    return isOrphan;
                },

                _hideOrphans: function (context) {
                    // hide blocks that are not allowed to be orphaned and are on empty final columns
                    var layoutData = context.layoutData;
                    var blockLayoutDatas = layoutData.blockLayoutDatas;
                    var blockElements = this._blockElements;
                    var lastColumnWithContent = this.getLastColumnWithContent(context);
                    for (var i = 0, len = blockElements.length; i < len; i++) {
                        var blockElement = blockElements[i];
                        var blockLayoutData = blockLayoutDatas[i];
                        var shouldHandleOrphan = this._shouldHandleOrphan(blockLayoutData, lastColumnWithContent);

                        if (shouldHandleOrphan) {
                            blockElement.setAttribute("data-block-visibility", "hidden");
                            blockLayoutData.exclusion = null;
                        }
                    }
                },

                _shouldHandleOrphan: function (blockLayoutData, lastColumnWithContent) {
                    var shouldHandleOrphan = false;
                    var contentElements = this._contentElements;

                    var type = blockLayoutData.type;
                    var aggregatableTypes = BingApps.UI.SurfaceManager.aggregatableTypes;
                    var isAggregatable = false;
                    for(var i = 0, ilen = aggregatableTypes.length; i < ilen; i++) {
                        var aggregatableType = aggregatableTypes[i];
                        if(type === aggregatableType) {
                            isAggregatable = true;
                            break;
                        }
                    }
                    if (isAggregatable) {
                        var exclusion = blockLayoutData.exclusion;
                        if (exclusion) {
                            var column = exclusion.column;
                            var columnSpan = exclusion.columnSpan;
                            for (var j = column, jlen = column + columnSpan; j < jlen; j++) {
                                var contentElement = contentElements[j];
                                if (!contentElement) {
                                    shouldHandleOrphan = true;
                                    break;
                                } else {
                                    // handle orphan when any part of it is beyond the last content column, or it is at the bottom of the last content column
                                    if (j > lastColumnWithContent || j === lastColumnWithContent && exclusion.rowAlign === "end" && columnSpan === 1) {
                                        shouldHandleOrphan = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    return shouldHandleOrphan;
                },

                _getLastColumnWithExclusion: function (context) {
                    var layoutData = context.layoutData;
                    var exclusions = BingApps.UI.ArticleReaderUtils.getAllExclusions(layoutData);
                    var index = 0;
                    for (var i = 0, len = exclusions.length; i < len; i++) {
                        var exclusion = exclusions[i];
                        index = Math.max(index, exclusion.column + exclusion.columnSpan - 1);
                    }
                    return index;
                },
            },
            {
                blockRenderers: {
                    InlineImage: BingApps.UI.InlineImageRenderer,
                    InlineSlideshow: BingApps.UI.InlineSlideshowRenderer,
                    FocusImage: BingApps.UI.InlineImageRenderer,
                    InlineVideo: BingApps.UI.InlineVideoRenderer,
                    Referral: BingApps.UI.ReferralRenderer,
                    External: BingApps.UI.ExternalRenderer,
                    Actions: BingApps.UI.ActionsRenderer,
                    InlineAd: BingApps.UI.InlineAdRenderer,
                    EndAd: BingApps.UI.EndAdRenderer,
                },

                titleRenderers: {
                    1: BingApps.UI.TitleStyle1Renderer,
                    2: BingApps.UI.TitleStyle2Renderer,
                    9: BingApps.UI.TitleStyle9Renderer,
                    100: BingApps.UI.TitleStyle100Renderer,
                },

                aggregatableTypes: [
                    BingApps.UI.InlineImageRenderer,
                    BingApps.UI.InlineSlideshowRenderer,
                    BingApps.UI.InlineVideoRenderer,
                    BingApps.UI.ExternalRenderer,
                    BingApps.UI.InlineAdRenderer
                ],
            }),
    });

})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Toc is a control that represents the table of contents (toc) block in the flyout and on the first page.
    WinJS.Namespace.define("BingApps.UI", {
        Toc: WinJS.Class.define(
            function (elt, options) {
                /// <summary>
                /// Creates a Toc instance.
                /// </summary>
                /// <param name="options">
                /// - bookmarksList: the bookmarks list.
                /// - viewportManager: the viewport manager used for scrolling the viewport
                /// </param>
                var that = this;
                elt = this.elt = elt ? elt : document.createElement("div");
                elt.winControl = this;

                WinJS.Utilities.addClass(elt, "toc");

                // exclude the toc from the keyboard/mouse scroll handling done by the orchestrator
                var viewportManager = options.viewportManager;
                var paginatedViewManager = viewportManager.paginatedViewManager;
                paginatedViewManager.exclude(elt);
                elt.addEventListener("keydown", function (event) {
                    var keyCode = event.keyCode;
                    switch (keyCode) {
                        case WinJS.Utilities.Key.leftArrow:
                        case WinJS.Utilities.Key.rightArrow:
                            // if left and right are not prevent defaulted, they will scroll the article viewport even when the toc flyout has focus (bug #327669)
                            event.preventDefault();
                            break;
                    }
                });

                var headElt = document.createElement("div");
                WinJS.Utilities.addClass(headElt, "head");
                elt.appendChild(headElt);

                var headerContainerElt = document.createElement("div");
                WinJS.Utilities.addClass(headerContainerElt, "headerContainer");
                headElt.appendChild(headerContainerElt);

                var headerElt = document.createElement("h2");
                headerElt.setAttribute("aria-hidden", true);
                WinJS.Utilities.addClass(headerElt, "header");
                headerElt.innerText = WinJS.Resources.getString("BingApps/Contents").value;
                headerContainerElt.appendChild(headerElt);

                var bodyElt = document.createElement("div");
                WinJS.Utilities.addClass(bodyElt, "body");
                elt.appendChild(bodyElt);

                var listElt = document.createElement("ol");
                WinJS.Utilities.addClass(listElt, "list");
                bodyElt.appendChild(listElt);

                var bookmarksList = options.bookmarksList;
                var bookmarks = bookmarksList.backingData.bookmarks;
                for (var key in bookmarks) {
                    var bookmark = bookmarks[key];

                    var bookmarkElt = document.createElement("li");
                    WinJS.Utilities.addClass(bookmarkElt, "bookmark");
                    listElt.appendChild(bookmarkElt);

                    var buttonElt = document.createElement("button");
                    WinJS.Utilities.addClass(buttonElt, "button");
                    buttonElt.setAttribute("data-win-bind", "pageIndex: bookmarks." + key + ".pageIndex");
                    bookmarkElt.appendChild(buttonElt);

                    buttonElt.addEventListener("click", function (event) {
                        var pageIndex = this.pageIndex;
                        viewportManager.scrollToPageIndex(pageIndex, null);
                        var tocFlyout = that._tocFlyout;
                        if (tocFlyout) {
                            tocFlyout.hide();
                        }
                    });

                    var containerElt = document.createElement("div");
                    WinJS.Utilities.addClass(containerElt, "container");
                    buttonElt.appendChild(containerElt);

                    var nameElt = document.createElement("div");
                    WinJS.Utilities.addClass(nameElt, "name");
                    nameElt.setAttribute("data-win-bind", "innerText: bookmarks." + key + ".name");
                    containerElt.appendChild(nameElt);

                    var numberElt = document.createElement("div");
                    WinJS.Utilities.addClass(numberElt, "number");
                    numberElt.setAttribute("data-win-bind", "innerText: bookmarks." + key + ".pageNumber");
                    containerElt.appendChild(numberElt);
                }

                WinJS.Binding.processAll(bodyElt, bookmarksList);

                this._tocFlyout = null;
            },
            {
                _tocFlyout: null,

                tocFlyout: {
                    set: function (value) {
                        this._tocFlyout = value;
                    },
                },
            },
            {
            })
    });

})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    /// Toc anchor at the bottom of the page. If there are sections, clicking on it shows the toc, otherwise, it just displays the article title.
    WinJS.Namespace.define("BingApps.UI", {
        TocAnchor: WinJS.Class.define(
            function (elt, options) {
                /// <summary>
                /// Creates a TocAnchor instance.
                /// </summary>
                /// <param name="options">
                /// - tocFlyout: the toc flyout object, can be null
                /// - tocAnchorText: text to show for the toc anchor
                /// </param>
                elt = this._elt = elt ? elt : document.createElement("div");
                elt.winControl = this;
                WinJS.Utilities.addClass(elt, "tocAnchor");

                // create button
                var tocFlyout = options.tocFlyout;
                var buttonElt = document.createElement("button");
                WinJS.Utilities.addClass(buttonElt, "button");
                buttonElt.setAttribute("tabIndex", 0);
                elt.appendChild(buttonElt);

                // attach button click listener                
                WinJS.Utilities.addClass(buttonElt, "toc");
                buttonElt.addEventListener("click", function (event) {
                    tocFlyout.show(this);
                });

                // create glyph
                var glyphElt = document.createElement("div");
                glyphElt.setAttribute("aria-hidden", true);
                WinJS.Utilities.addClass(glyphElt, "glyph");
                buttonElt.appendChild(glyphElt);

                // create button text
                var textElt = this._textElt = document.createElement("div");
                textElt.setAttribute("aria-hidden", true);
                WinJS.Utilities.addClass(textElt, "text");
                buttonElt.appendChild(textElt);

                // set the text
                this.tocAnchorText = options.tocAnchorText;
            },
            {
                _elt: null,
                _textElt: null,

                tocAnchorText: {
                    set: function (value) {
                        // set the text
                        var textElt = this._textElt;
                        textElt.innerText = value;

                        // hide the whole thing if needed
                        var elt = this._elt;
                        if (!value) {
                            WinJS.Utilities.addClass(elt, "platformHide");
                        }
                        else {
                            WinJS.Utilities.removeClass(elt, "platformHide");
                        }
                    },
                },
            },
            {
            }),
    });

})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // 
    WinJS.Namespace.define("BingApps.UI", {
        InterstitialAd: WinJS.Class.define(
            function (elt, options) {
                /// <summary>
                /// Creates an instance of the InterstitialAd control.
                /// </summary>

                // create the dom elements
                elt = this._elt = elt || document.createElement("div");
                elt.winControl = this;
                WinJS.Utilities.addClass(elt, "interstitialAd");

                this._adContainer = null;
                this._isRendered = false;
            },
            {
                _elt: null,
                _adContainer: null,
                _isRendered: null,

                element: {
                    get: function () {
                        return this._elt;
                    }
                },

                isRendered: {
                    get: function () {
                        return this._isRendered;
                    }
                },

                dispose: function () {
                    var adContainer = this._adContainer;
                    if (adContainer) {
                        adContainer.dispose();
                    }
                },

                getHeader: function () {
                    return null;
                },
                getInstrumentationData: function () {
                    return null;
                },
                /*
                Logic Implemented, where:
                - adPartnerName == 1 when adPartnerName is present and non-empty
                - PartnerAd == 1 when an override with a matching PartnerId & size is present
                - NonPartnerAd == 1 when an override with a matching size & empty PartnerId is present

                NOTE: Logic ideally would match the one in ArticleReader.js - _overrideAds, but the
                      we couldn't implement NO AD action at this level in the code.

                adPartnerName PartnerAd NonPartnerAd Ad displayed
                1             1         *            Partner Ad
                1	          0         *	         Use what's in adMetadata
                0	          *     	1       	 NonPartnerAd
                0	          *     	0	         Use what's in adMetadata
                */
                _overrideAd: function (parsedAdMetadata, articleData, adPartnerName) {
                    var adOverrides = null;
                    if (articleData.previousArticle) {
                        adOverrides = articleData.previousArticle.adOverrides;
                    }
                    if (!adOverrides && articleData.nextArticle) {
                        adOverrides = articleData.nextArticle.adOverrides;
                    }
                    if (!adOverrides || !adOverrides.length) {
                        return;
                    }

                    var options = parsedAdMetadata.controlOptions.adOptions;
                    var lOptions = options.landscapeOptions;
                    var pOptions = options.portraitOptions;
                    
                    for (var i = 0; i < adOverrides.length; i++) {
                        var adOverride = adOverrides[i];
                        if ((adPartnerName && adOverride.partnerId === adPartnerName) ||
                                (!adPartnerName && !adOverride.partnerId)) {
                            for (var j = 0; j < adOverride.ads.length; j++) {
                                if (BingApps.UI.ArticleReaderUtils.adTypeMatchesClass(adOverride.ads[j].type, lOptions.className)) {
                                    lOptions.otherAdOptions.adUnitId = lOptions.adUnitId = adOverride.ads[j].id;
                                }
                                if (BingApps.UI.ArticleReaderUtils.adTypeMatchesClass(adOverride.ads[j].type, pOptions.className)) {
                                    pOptions.otherAdOptions.adUnitId = pOptions.adUnitId = adOverride.ads[j].id;
                                }
                            }
                        }
                    }
                },

                render: function (articleData, renderOptions) {
                    var elt = this._elt;

                    var metadata = articleData.metadata;
                    var adMetadata = metadata.adMetadata;
                    var parsedAdMetadata = JSON.parse(adMetadata);
                    var controlType = parsedAdMetadata.controlType;
                    var controlOptions = parsedAdMetadata.controlOptions;

                    this._overrideAd(parsedAdMetadata, articleData, renderOptions.adPartnerName);

                    // Create render promise
                    var that = this;
                    var renderPromise = new WinJS.Promise(
                        function (complete, error) {

                            // Pass completion and error methods
                            // to ad control
                            if (controlOptions.adOptions) {
                                var adOptions = controlOptions.adOptions;
                                if (adOptions.landscapeOptions) {
                                    adOptions.landscapeOptions.completionHandler = complete;
                                    adOptions.landscapeOptions.errorHandler = error;
                                }
                                if (adOptions.portraitOptions) {
                                    adOptions.portraitOptions.completionHandler = complete;
                                    adOptions.portraitOptions.errorHandler = error;
                                }
                            }

                            // Create ad container
                            var adContainer = that._adContainer = new BingApps.UI.AdContainer(null, {
                                controlOptions: controlOptions,
                                controlType: controlType,
                            });
                            var adContainerElt = adContainer.element;
                            elt.appendChild(adContainerElt);

                            // Instantiate ad
                            adContainer.instantiateAd();
                        })
                        .then(function () {
                            that._isRendered = true;
                        });

                    // Return render promise
                    return renderPromise;
                },

                relayout: function (relayoutOptions) {
                    var adContainer = this._adContainer;
                    if (adContainer) {
                        adContainer.relayout(relayoutOptions);
                    }

                    return WinJS.Promise.wrap(null);
                },

                setTextAttributes: function (textAttributes) {
                    // do nothing
                    return WinJS.Promise.wrap();
                },

                getPageCount: function () {
                    return 1;
                },

                scrollToSection: function (sectionIndex) {
                    // do nothing
                },

                articleFocusLost: function () {
                    // do nothing
                },

            },
            {
            })
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // Manages the disposal of article blocks
    WinJS.Namespace.define("BingApps.UI", {
        DisposalManager: WinJS.Class.mix(WinJS.Class.define(
            function (options) {
                /// <summary>
                /// Creates an instance of DisposalManager.
                /// </summary>

                this._disposedDelegates = [];
                this._articleFocusLostDelegates = [];

                Object.defineProperties(this, WinJS.Utilities.createEventProperties("disposed"));
                Object.defineProperties(this, WinJS.Utilities.createEventProperties("articlefocuslost"));
            },
            {
                _disposedDelegates: null,
                _articleFocusLostDelegates: null,

                dispose: function () {
                    var disposedDelegates = this._disposedDelegates;
                    for (var i = 0, leni = disposedDelegates.length; i < leni; i++) {
                        var disposedDelegate = disposedDelegates[i];
                        this.removeEventListener("disposed", disposedDelegate);
                    }

                    var articleFocusLostDelegates = this._articleFocusLostDelegates;
                    for (var j = 0, lenj = articleFocusLostDelegates.length; j < lenj; j++) {
                        var articleFocusLostDelegate = articleFocusLostDelegates[j];
                        this.removeEventListener("articlefocuslost", articleFocusLostDelegate);
                    }
                },

                addDisposedDelegate: function (delegate) {
                    var disposedDelegates = this._disposedDelegates;
                    disposedDelegates.push(delegate);
                    this.addEventListener("disposed", delegate);
                },

                addArticleFocusLostDelegate: function (delegate) {
                    var articleFocusLostDelegates = this._articleFocusLostDelegates;
                    articleFocusLostDelegates.push(delegate);
                    this.addEventListener("articlefocuslost", delegate);
                },

                runAllDisposedDelegates: function () {
                    this.dispatchEvent("disposed");
                },

                runAllArticleFocusLostDelegates: function () {
                    this.dispatchEvent("articlefocuslost");
                },
            },
            {
            }), WinJS.Utilities.eventMixin),
    });

})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function appexCommonControlsMediaPlaybackInit(WinJS) {
    "use strict";

    var Animation = WinJS.UI.Animation;
    var Utilities = WinJS.Utilities;
    var Promise = WinJS.Promise;
    var mouseLeftButton = 0;
    var mousePointerType = 4;
    var controlTemplateLocation = "/BingSdk/assets/MediaPlayback/html/MediaPlayback.html";

    var MediaAppControls = WinJS.Namespace.define("BingApps.UI.MediaAppControls", {

        PlaybackCapabilities: {
            fullScreenOnly: "fullScreenOnly",
            normal: "normal"    /* Allow toggle in + out of FS */
        },

        PlaybackMode: {
            full: "full",
            partial: "partial",
            minimal: "minimal"
        },

        PlaybackType: {
            video: "video"
        },

        ControlState: {
            rest: "Rest",
            hover: "Hover",
            pressed: "Pressed"
        },

        Control: {
            play: "Play",
            pause: "Pause",
            gripper: "Gripper"
        },

        MediaPlayback: WinJS.Class.define(
            function mediaPlayback_ctor(containerElement, options) {
                /// construction
                /// <summary>
                /// Creates an instance of the MediaPlayback control.
                /// </summary>
                /// <param name='containerElement'>
                /// The element that will host the playback control
                /// </param>
                /// <param name='options'>
                /// Options parameter has two properties type and mode
                /// type is either "audio" or "video"
                /// mode is either "full" or "partial" or "minimal" scales down the number of controls show accordingly
                /// etwProvider is a reference to the ETW provider for logging events.
                /// </param>
                /// <returns>
                /// An instance of the mediaplayback control
                /// </returns>

                if (!containerElement) {
                    throw new Error("container element cannot be null or undefined");
                }

                if (this === window || this === MediaAppControls) {
                    var playback = containerElement.winControl;

                    if (playback) {
                        return playback;
                    } else {
                        return new MediaAppControls.MediaPlayback(containerElement, options);
                    }
                }

                // Attach the JS object to the host DOM element
                if (!containerElement.winControl) {
                    containerElement.winControl = this;
                }

                this._mediaLibrary = null;
                this._currentMediaSrcId = null;
                this._currentMediaSrcProvider = null;

                this._containerElement = containerElement;
                this._type = MediaAppControls.PlaybackType.video;
                this._mode = MediaAppControls.PlaybackMode.partial;
                this._windowEventManager = BingApps.WindowEventManager.getInstance();

                var adSiteSectionId, pageRandomNumber;

                var autoLoad = false;

                if (options) {
                    if (options.type && MediaAppControls.PlaybackType[options.type]) {
                        this._type = options.type;
                    }

                    if (options.mode && MediaAppControls.PlaybackMode[options.mode]) {
                        this._mode = options.mode;
                    }

                    if (options.timeFormat) {
                        this._timeFormat = options.timeFormat;
                    }

                    if (options.durationFormatter) {
                        this._durationFormatter = options.durationFormatter;
                    }

                    this._setupEtw(options.etwProvider);

                    if (options.userPreferenceVideoScreenSize) {
                        this._userPreferenceVideoScreenSize = options.userPreferenceVideoScreenSize;
                    }

                    if (options.playbackCapabilities && MediaAppControls.PlaybackCapabilities[options.playbackCapabilities]) {
                        this._playbackCapabilities = options.playbackCapabilities;
                    } else {
                        this._playbackCapabilities = MediaAppControls.PlaybackCapabilities.normal;
                    }
                }

                //only supports type === MediaAppControls.PlaybackType.video
                this._currentMediaElement = this._createVideoElement();

                this._currentMediaElement.isVacant = true;

                return null;
            },
            {
                // Private fields. declaring these explicitly makes sure this is available in intellisense and to  
                // make sure we dont endup creating private members accidentally with typos, and slightly different from the one we intended to use.
                _playbackCapabilities: null,
                _thumbSrc: null,
                _srcPath: null,
                _containerElement: null,
                _currentMediaElement: null,
                _inputHandlerElement: null,
                _controlsElement: null,
                _thumbElement: null,
                _playbackControlTable: null,
                _seekAndPlaybackControlTable: null,
                _seekAndPlaybackControlTableSpacerLeft: null,
                _seekAndPlaybackControlTableSpacerRight: null,
                _seekAndPlaybackControlTableSpacerMiddle: null,
                _playButton: null,
                _type: null,
                _mode: null,
                _controlHideTimeout: null,
                _controlsAutoHideDuration: 3000,
                _controlsAddedHideDuration: null,
                _thumbGrabThreshold: 30,
                _isControlsVisible: false,
                _isThumbUp: false,
                _oldThumbState: null,
                _onStopping: false,
                _timeFormat: null,
                _timeIndicator: null,
                _mediaControl: Windows.Media.MediaControl,
                _lastTimeDisplayAriaUpdate: Math.min(),
                _inFullScreenMode: false,
                _canScrubVideo: true,
                _userPreferenceVideoScreenSize: "auto", // auto - by default i.e. depending on resolution we will take care; The other TWO (50%/100%) will be set through UI by user

                _enableContinuousVideoPlayback: true,
                _shouldContinueNextVideo: false,
                _countdownForNextVideo: 5,
                _isCountdownUIShowing: false,
                _nextIndex: 0,
                _nextWrapperElement: null,
                _nextVideoOptions: null,
                _nextVideoPlaybackButton: null,
                _videoList: [],
                _currentIndex: 0,
                _wrapperElement: null,

                _fireVideoError: function (msg) {
                    var eventData = {
                        item: Object.create(this._videoList[this._currentIndex]),
                        instrumentationData: { errorMessage: msg }
                    };
                    this.dispatchEvent("videoerror", eventData);
                },

                _fireVideoPlay: function (percentage) {
                    var eventData = {
                        item: Object.create(this._videoList[this._currentIndex]),
                        instrumentationData: { percentageDone: percentage }
                    };
                    this.dispatchEvent("videoplay", eventData);
                },

                _fireVideoOnFullscreenToggle: function (isFullscreen) {
                    var eventData = {
                        item: Object.create(this._videoList[this._currentIndex]),
                        instrumentationData: { isFullscreen: isFullscreen }
                    };
                    this.dispatchEvent("videofullscreentoggle", eventData);
                },

                // START SEQUENCER FUNCTIONS
                _assignContentVideo: function (contentVideoObject) {
                    var that = this;
                    this._currentMediaElement.src = contentVideoObject.SourceUrl;
                    this._currentMediaElement.isVacant = false;

                    //if this is exeternal video, contentVideoObject might not contain poster image, 
                    if (contentVideoObject.PosterImageUrl) {
                        this._posterImage.src = contentVideoObject.PosterImageUrl;
                    }
                },

                _disableScrubbing: function () {
                    this._canScrubVideo = false;
                    Utilities.addClass(this._thumbElement, "platformHide");
                },

                _enableScrubbing: function () {
                    this._canScrubVideo = true;
                    Utilities.removeClass(this._thumbElement, "platformHide");
                },

                _showContentVideoElement: function () {
                    Utilities.removeClass(this._currentMediaElement, "platformHide");
                    this._setupMediaElement(this._currentMediaElement);
                },

                // END SEQUENCER FUNCTIONS

                _adjustVideoSizeToScreen: function (shouldFitToScreen) {
                    if (!shouldFitToScreen) {
                        this._currentMediaElement.visual.style.width = "50%";
                        this._currentMediaElement.visual.style.height = "50%";

                        this._mediaStrip.style.textAlign = "center";
                        this._mediaStrip.style.paddingTop = "33%";
                        this._mediaStrip.style.height = "67%";
                        Utilities.addClass(this._screenSizeToggleButton, "fullScreenSizeToggleButton");
                        Utilities.removeClass(this._screenSizeToggleButton, "halfScreenSizeToggleButton");
                    } else {
                        this._currentMediaElement.visual.style.width = "100%";
                        this._currentMediaElement.visual.style.height = "100%";

                        this._mediaStrip.style.textAlign = "";
                        this._mediaStrip.style.paddingTop = "";
                        this._mediaStrip.style.height = "";
                        Utilities.addClass(this._screenSizeToggleButton, "halfScreenSizeToggleButton");
                        Utilities.removeClass(this._screenSizeToggleButton, "fullScreenSizeToggleButton");
                    }

                },

                // Creates a new video element
                _createVideoElement: function () {
                    var videoElementContainer = document.createElement("div");

                    Utilities.setInnerHTMLUnsafe(videoElementContainer, "<video preload='auto' />");
                    var videoElement = videoElementContainer.firstChild.cloneNode(true);
                    Utilities.addClass(videoElement, "mediaPlaybackVideo");
                    videoElement.visual = videoElement;
                    videoElement._mediaEventSubscriptions = [];
                    videoElement._posterEventSubscriptions = [];

                    return videoElement;
                },

                // setup etw with default noop handlers if no real provider is passed
                _setupEtw: function (etwProvider) {
                    if (etwProvider) {
                        this._etw = etwProvider;
                    } else {
                        var defaultEtw = {};
                        defaultEtw["mediaPlaybackSliderUpdateStart"] = function mediaPlayback_defaultMediaPlaybackSliderUpdateStart() { };
                        defaultEtw["mediaPlaybackSliderUpdateEnd"] = function mediaPlayback_defaultMediaPlaybackSliderUpdateEnd() { };
                        defaultEtw["mediaPlaybackSeekStart"] = function mediaPlayback_defaultMediaPlaybackSeekStart() { };
                        defaultEtw["mediaPlaybackSeekEnd"] = function mediaPlayback_defaultMediaPlaybackSeekEnd() { };
                        defaultEtw["mediaPlaybackPlayStart"] = function mediaPlayback_defaultMediaPlaybackPlayStart() { msWriteProfilerMark("BingApps:MediaPlayback:mediaPlaybackPlayStart"); };
                        defaultEtw["mediaPlaybackPlayEnd"] = function mediaPlayback_defaultMediaPlaybackPlayEnd() { msWriteProfilerMark("BingApps:MediaPlayback:mediaPlaybackPlayEnd"); };
                        defaultEtw["mediaPlaybackPauseStart"] = function mediaPlayback_defaultMediaPlaybackPauseStart() { msWriteProfilerMark("BingApps:MediaPlayback:mediaPlaybackPauseStart"); };
                        defaultEtw["mediaPlaybackPauseEnd"] = function mediaPlayback_defaultMediaPlaybackPauseEnd() { msWriteProfilerMark("BingApps:MediaPlayback:mediaPlaybackPauseEnd"); };
                        defaultEtw["mediaPlaybackShowControlsStart"] = function mediaPlayback_defaultMediaPlaybackShowControlsStart() { };
                        defaultEtw["mediaPlaybackShowControlsEnd"] = function mediaPlayback_defaultMediaPlaybackShowControlsEnd() { };
                        defaultEtw["mediaPlaybackHideControlsStart"] = function mediaPlayback_defaultMediaPlaybackHideControlsStart() { };
                        defaultEtw["mediaPlaybackHideControlsEnd"] = function mediaPlayback_defaultMediaPlaybackHideControlsEnd() { };
                        defaultEtw["mediaPlaybackSrcSet"] = function mediaPlayback_defaultMediaPlaybackSrcSet() { msWriteProfilerMark("BingApps:MediaPlayback:mediaPlaybackSrcSet"); };
                        defaultEtw["mediaPlaybackMediaEnd"] = function mediaPlayback_defaultMediaPlaybackMediaEnd() { msWriteProfilerMark("BingApps:MediaPlayback:mediaPlaybackMediaEnd"); };
                        this._etw = defaultEtw;
                    }
                },

                // Remove the auto hide timer for hiding controls
                _removeControlsTimer: function () {
                    if (this._controlHideTimeout) {
                        clearTimeout(this._controlHideTimeout);
                        this._controlHideTimeout = null;
                    }
                },

                // Start an auto hide timer for hiding controls
                _setControlsTimer: function () {
                    var that = this;
                    this._removeControlsTimer();
                    this._controlHideTimeout = setTimeout(function mediaPlayback_afterSetControlsTimer() {
                        // Reset the timer with an added duration if we've moved the mouse since the last reset, otherwise hide controls
                        if (that._lastPointerMoveTimeStamp && that._lastPointerMoveTimeStamp > that._lastControlsResetTimeStamp) {
                            var currentHideDuration = that._controlsAddedHideDuration || that._controlsAutoHideDuration;
                            that._controlsAddedHideDuration = that._controlsAutoHideDuration - (that._lastControlsResetTimeStamp + currentHideDuration - that._lastPointerMoveTimeStamp);
                            that._removeControlsTimer();
                            that._setControlsTimer();
                            that._controlsAddedHideDuration = null;
                        } else {
                            that._hideControls();
                        }
                    }, this._controlsAddedHideDuration || this._controlsAutoHideDuration);
                    this._lastControlsResetTimeStamp = Date.now();
                },

                // Hide the controls bar, this will initiate an slideout + fadeout animation immediately.
                _hideControls: function () {
                    this._etw.mediaPlaybackHideControlsStart();

                    this._removeControlsTimer();

                    var that = this;

                    if (!Utilities.hasClass(this._topBar, "platformHide") && Utilities.hasClass(this._errorScreen, "platformHide")) {
                        Animation.fadeOut(this._topBar).done(function topBarFadeOutComplete() {
                            Utilities.addClass(that._topBar, "platformHide");
                            that._topBarShowed = false;
                        });
                    }

                    Animation.fadeOut(this._controlsElement)
                        .then(function mediaPlayback_fadeOutComplete() {
                            that._isControlsVisible = false;
                            Utilities.addClass(that._controlsElement, "hiddenObject");
                        });

                    this._lastPointerPosition = null;
                    this._etw.mediaPlaybackHideControlsEnd();
                },

                // Show the controls bar, controls bar will slide/fade in, but will auto hide automatically.
                _showControls: function (forceShow, skipAutoHide) {
                    /// <param name="forceShow" optional="true"/>
                    /// <param name="skipAutoHide" optional="true"/>

                    if (this._isControlsVisible && !forceShow) {
                        return;
                    }

                    this._removeControlsTimer();

                    if (Utilities.hasClass(this._topBar, "platformHide")) {
                        var that = this;
                        Utilities.removeClass(that._topBar, "platformHide");//if this removeClass called in done() block, there will be no animation when using touch (mouse will still work)
                        Animation.fadeIn(this._topBar).done(function showTopBarComplete() {
                            that._topBarShowed = true;
                        });
                    }

                    if (!skipAutoHide) {
                        this._setControlsTimer();
                    }

                    if (!WinJS.Utilities.hasClass(this._waitingSpinnerContainer, "platformHide")) {
                        return; //do not show playButton during loading
                    }

                    if (!Utilities.hasClass(this._errorScreen, "platformHide")) {
                        return; //do not show playButton during errorScreen
                    }

                    this._etw.mediaPlaybackShowControlsStart();

                    Utilities.removeClass(this._controlsElement, "hiddenObject");

                    if (this._isThumbUp) {
                        this._rotateThumbDown();
                    }

                    this._isControlsVisible = true;
                    this._controlsElement.style.opacity = 1;

                    this._etw.mediaPlaybackShowControlsEnd();
                },

                // Returns true if the seek bar is curently visible
                _isSeekBarVisible: {
                    get: function () {
                        if (this._canScrubVideo) {
                            if (this._thumbElement.currentStyle) {
                                return this._thumbElement.currentStyle.opacity !== "0";
                            } else {
                                return false;
                            }
                        } else {
                            if (this._seekBar.currentStyle) {
                                return this._seekBar.currentStyle.opacity !== "0";
                            } else {
                                return false;
                            }

                        }
                    }
                },

                // Removes the current auto hide timer for hiding the seek bar
                _removeSeekBarTimer: function () {
                    if (this._seekBarHideTimeout) {
                        clearTimeout(this._seekBarHideTimeout);
                        this._seekBarHideTimeout = null;
                    }
                },

                // Start an auto hide timer for hiding seekbar
                _setSeekBarTimer: function () {
                    var that = this;

                    this._removeSeekBarTimer();
                    this._seekBarHideTimeout = setTimeout(function mediaPlayback_afterSeekBarHideTimeout() {
                        // Reset the timer with an added duration if we've moved the mouse since the last reset, otherwise hide seekbar
                        if (that._lastPointerMoveTimeStamp && that._lastPointerMoveTimeStamp > that._lastSeekBarResetTimeStamp) {
                            var currentHideDuration = that._seekBarAddedHideDuration || that._controlsAutoHideDuration;
                            that._seekBarAddedHideDuration = that._controlsAutoHideDuration - (that._lastSeekBarResetTimeStamp + currentHideDuration - that._lastPointerMoveTimeStamp);
                            that._removeSeekBarTimer();
                            that._setSeekBarTimer();
                            that._seekBarAddedHideDuration = null;
                        } else {
                            that._hideSeekBar();
                        }
                    }, this._seekBarAddedHideDuration || this._controlsAutoHideDuration);
                    this._lastSeekBarResetTimeStamp = Date.now();
                },

                // Hide the seek bar, this will initiate an fadeout animation immediately.
                _hideSeekBar: function () {
                    var that = this;

                    if (this._isSeekBarVisible) {
                        // Unsubscribe to media position change events again
                        if (this._mode === MediaAppControls.PlaybackMode.full) {
                            this.unsubscribeTimeUpdates();
                        }

                        this._removeSeekBarTimer();
                        Animation.fadeOut(this._thumbElement);
                        var promise = Animation.fadeOut(this._seekBar);

                        promise.then(function mediaPlayback_fadeOutSeekBarComplete() {
                            that._rotateThumbDown();
                        });

                        Animation.fadeOut(this._timeIndicator);
                        Animation.fadeOut(this._currentTimeIndicator);
                        Animation.fadeOut(this._totalTimeIndicator);
                        this._backdrop.style.opacity = 0;
                    }
                },

                // Show the seek bar, seek bar will fade in, but will auto hide automatically.
                _showSeekBar: function (forceShow, skipAutoHide) {
                    /// <param name="forceShow" optional="true"/>
                    /// <param name="skipAutoHide" optional="true"/>

                    if (this._isSeekBarVisible && !forceShow) {
                        return;
                    }

                    if (!WinJS.Utilities.hasClass(this._errorScreen, "platformHide")) {
                        return;
                    }

                    //need to hide seekbar when loading, bug 338083 shows that if user seek before onplaying event being fired,
                    //we will NOT get onplaying event, which will trigger more problems since _currentState is not correctly set
                    if (!WinJS.Utilities.hasClass(this._waitingSpinnerContainer, "platformHide")) {
                        return;
                    }

                    // Subscribe to media position change events again
                    if (this._mode === MediaAppControls.PlaybackMode.full) {
                        this.subscribeTimeUpdates();
                    }

                    if (this._seekBarHideTimeout) {
                        this._removeSeekBarTimer();
                    }

                    if (!this._isSeekBarVisible) {
                        this._syncTimeAndProgress(true);

                        if (this._canScrubVideo) {
                            Animation.fadeIn(this._thumbElement);
                        }

                        Animation.fadeIn(this._seekBar);
                        Animation.fadeIn(this._timeIndicator);
                        Animation.fadeIn(this._currentTimeIndicator);
                        Animation.fadeIn(this._totalTimeIndicator);
                        this._backdrop.style.opacity = 1;
                    }

                    if (!skipAutoHide) {
                        this._setSeekBarTimer();
                    }
                },

                // This is a helper to get an element by id, within the container element
                _getChildElementById: function (childId) {
                    var theParent = this._containerElement;
                    var children = theParent.getElementsByTagName("*");

                    for (var index = children.length - 1; index >= 0; index--) {
                        if (children[index].id === childId) {
                            return children[index];
                        }
                    }

                    return null;
                },

                // This initializes the control's parts after the fragment containing the controls template is loaded
                _init: function () {
                    this._thumbSrc = this._getChildElementById("mediaPlaybackGripperHarvest").src;
                    this._srcPath = this._thumbSrc.substring(0, this._thumbSrc.lastIndexOf("/"));
                    this._contentElement = this._getChildElementById("mediaPlaybackContent");
                    this._controlsElement = this._getChildElementById("mediaPlaybackControls");
                    this._controlsLayerElement = this._getChildElementById("mediaPlaybackControlsLayer");
                    this._thumbElement = this._getChildElementById("mediaPlaybackSeekBarThumb");
                    this._thumbElementToolTip = this._getChildElementById("mediaPlaybackSeekBarThumbToolTip").firstChild;
                    this._seekBar = this._getChildElementById("mediaPlaybackSeekBar");
                    this._seekBarRail = this._getChildElementById("mediaPlaybackSeekBarRail");
                    this._progress = this._getChildElementById("mediaPlaybackSeekBarProgress");
                    this._playbackControlTable = this._getChildElementById("playbackControlTable");
                    this._seekAndPlaybackControlTable = this._getChildElementById("seekAndPlaybackControlTable");
                    this._seekAndPlaybackControlTableSpacerLeft = this._getChildElementById("seekAndPlaybackControlTableSpacerLeft");
                    this._seekAndPlaybackControlTableSpacerRight = this._getChildElementById("seekAndPlaybackControlTableSpacerRight");
                    this._seekAndPlaybackControlTableSpacerMiddle = this._getChildElementById("seekAndPlaybackControlTableSpacerMiddle");
                    this._playButton = this._getChildElementById("mediaPlaybackPlayButton");
                    this._screenSizeToggleButton = this._getChildElementById("screenSizeToggleButton");
                    this._inputHandlerElement = this._getChildElementById("mediaPlaybackInputHandler");
                    this._onPlayingEventFired = false;
                    this._timeIndicator = this._getChildElementById("mediaPlaybackTimeIndicator");
                    this._currentTimeIndicator = this._getChildElementById("mediaPlaybackCurrentTimeIndicator");
                    this._totalTimeIndicator = this._getChildElementById("mediaPlaybackTotalTimeIndicator");
                    this._fullScreenToggleButton = this._getChildElementById("mediaPlaybackFullScreenToggleButton");
                    this._fullScreenControl = BingApps.UI.FullScreen;
                    this._navigationControl = WinJS.Navigation;
                    this._posterImageElement = this._getChildElementById("mediaPlaybackPosterImageContainer");
                    this._posterImage = this._getChildElementById("mediaPlaybackPosterImage");
                    this._loadingScreen = this._getChildElementById("mediaPlaybackPosterImagePlaceholder");
                    this._waitingSpinnerContainer = this._getChildElementById("mediaPlaybackSpinnerContainer");
                    this._waitingSpinnerVisible = false;
                    this._message = this._getChildElementById("mediaPlaybackMessage");
                    this._errorScreen = this._getChildElementById("mediaPlaybackErrorScreen");
                    this._reloadButton = this._getChildElementById("mediaPlaybackReloadIcon");
                    this._topBar = this._getChildElementById("mediaPlaybackTopBar");
                    this._topBarCurrentTime = this._getChildElementById("topBarCurrentTime");
                    this._topBarTotalTime = this._getChildElementById("topBarTotalTime");
                    this._topBarTitle = this._getChildElementById("topBarTitle");
                    this._topBarAttribution = this._getChildElementById("topBarAttribution");
                    this._topBarLogo = this._getChildElementById("topBarLogo");

                    this._mediaPlaybackAdClickthroughContainer = this._getChildElementById("mediaPlaybackAdClickthroughContainer");
                    this._mediaPlaybackAdClickthroughButton = this._getChildElementById("mediaPlaybackAdClickthroughButton");

                    // Reset media source provider
                    this._currentMediaSrcProvider = null;

                    this._resetVidSrc = "/BingSdk/assets/MediaPlayback/Resources/black.mp4";

                    //following instructions from http://blogs.iis.net/cenkd/archive/2012/03/28/How-to-build-your-first-html5-metro-style-smooth-streaming-player.aspx
                    if (!BingApps.UI.MediaAppControls.ssPlugin) {
                        var ssPlugin = new Windows.Media.MediaExtensionManager();
                        ssPlugin.registerByteStreamHandler("Microsoft.Media.AdaptiveStreaming.SmoothByteStreamHandler", ".ism", "text/xml");
                        ssPlugin.registerByteStreamHandler("Microsoft.Media.AdaptiveStreaming.SmoothByteStreamHandler", ".ism", "application/vnd.ms-ss");
                        BingApps.UI.MediaAppControls.ssPlugin = ssPlugin;
                    }

                    if (!this._posterImageElement) {
                        throw "Unable to initialize video playback.";
                    }

                    this._backdrop = this._getChildElementById("mediaPlaybackControlsBackdrop");

                    // Create the sequencer prior to setting up event listeners for 
                    // the video controls, as it listens to these events
                    this._sequencer = new BingApps.UI.MediaAppControls.MediaSequencer(this);

                    this._mediaStrip = this._getChildElementById("mediaPlaybackMediaStrip");


                    this._setupMediaElement(this._currentMediaElement);

                    this._mediaStrip.appendChild(this._currentMediaElement.visual);

                    this._setupMediaStrip();
                    this._updateControls();
                    this._showPlayButton();

                    var that = this;

                    // Handle focus for accessibility
                    Utilities.addRemovableEventListener(this._playButton, "blur", function mediaPlayback_onBlurPlayButton(event) { that.resetAutoHideTimers(true); }, false);
                    Utilities.addRemovableEventListener(this._fullScreenToggleButton, "blur", function mediaPlayback_onBlurFullScreenButton(event) { that.resetAutoHideTimers(true); }, false);
                    Utilities.addRemovableEventListener(this._thumbElement, "focus", function mediaPlayback_onFocusThumb(event) { that._showControls(true, false); that._showSeekBar(true, false); }, false);
                    Utilities.addRemovableEventListener(this._thumbElement, "blur", function mediaPlayback_onBlurThumb(event) { that.resetAutoHideTimers(true); }, false);

                    // Handle keystrokes for accessibility
                    Utilities.addRemovableEventListener(this._playButton, "keydown", function mediaPlayback_onKeyDownPlayButton(event) { that._stopEventPropagation(event); that._onInputHandlerKeyDown(event); }, false);
                    Utilities.addRemovableEventListener(this._playButton, "keyup", function mediaPlayback_onKeyUpPlayButton(event) { that._stopEventPropagation(event); that._onInputHandlerKeyUp(event); }, false);
                    Utilities.addRemovableEventListener(this._fullScreenToggleButton, "keydown", function mediaPlayback_onKeyDownFullScreenButton(event) { that._stopEventPropagation(event); that._onInputHandlerKeyDown(event); }, false);
                    Utilities.addRemovableEventListener(this._fullScreenToggleButton, "keyup", function mediaPlayback_onKeyUpFullScreenButton(event) { that._stopEventPropagation(event); that._onInputHandlerKeyUp(event); }, false);
                    Utilities.addRemovableEventListener(this._thumbElement, "keydown", function mediaPlayback_onKeyDownThumb(event) { that._onInputHandlerKeyDown(event); }, false);
                    Utilities.addRemovableEventListener(this._thumbElement, "keyup", function mediaPlayback_onKeyUpThumb(event) { that._onInputHandlerKeyUp(event); }, false);


                    Utilities.addRemovableEventListener(this._playButton, "click", function mediaPlayback_onClickPlayButton(event) {
                        if (event.offsetX < 0 || event.offsetY < 0) {
                            return;
                        }
                        that.resetAutoHideControlsTimer();
                        that._onPlayPauseToggleCommand();
                        that._stopEventPropagation(event);
                        that._thumbElement.focus();
                    }, false);


                    Utilities.addRemovableEventListener(this._screenSizeToggleButton, "click", function mediaPlayback_onClickScreenSizeToggleButton(event) {
                        that._toggleScreenSize(event);
                        that._thumbElement.focus();
                    }, false);
                    Utilities.addRemovableEventListener(this._screenSizeToggleButton, "keydown", function mediaPlayback_onKeyDownScreenSizeToggleButton(event) { that._stopEventPropagation(event); that._onInputHandlerKeyDown(event); }, false);
                    Utilities.addRemovableEventListener(this._screenSizeToggleButton, "keyup", function mediaPlayback_onKeyUpScreenSizeToggleButton(event) { that._stopEventPropagation(event); that._onInputHandlerKeyUp(event); }, false);

                    var mediaPlayback_onClickFullScreenButton = function mediaPlayback_onClickFullScreenButton(event) {
                        that.resetAutoHideControlsTimer();
                        that._toggleFullScreen();
                        that._stopEventPropagation(event);
                        that._thumbElement.focus();
                    };

                    if (document) {
                        Utilities.addRemovableEventListener(document, "msvisibilitychange", function mediaPlayback_onVisibilityChange(event) {
                            if (document) {

                                // Get hidden flag
                                var isHidden = document.msHidden;

                                // If document is now hidden
                                if (isHidden) {
                                    if (that._sequencer && (!that._sequencer.IsPaused())) {
                                        that._resumePlay = true;
                                        that.pause();
                                    }
                                }
                                else if (that._resumePlay) {
                                    that._resumePlay = false;
                                    that.play();
                                }
                            }
                        }, false);
                    }

                    Utilities.addRemovableEventListener(this._fullScreenToggleButton, "click", mediaPlayback_onClickFullScreenButton, false);

                    Utilities.addRemovableEventListener(this._reloadButton, "keydown", function (event) {
                        that._stopEventPropagation(event);
                    }, false);

                    Utilities.addRemovableEventListener(this._reloadButton, "keyup", function (event) {
                        that._stopEventPropagation(event);
                        that._onInputHandlerKeyUp(event);
                    }, false);

                    Utilities.addRemovableEventListener(this._containerElement, "keypress", function mediaPlayback_onKeyPressFullScreenButton(event) {
                        that._onContainerKeyPress(event);
                    }, false);

                    Utilities.addRemovableEventListener(this._wrapperElement, "keypress", function mediaPlayback_onKeyPressFullScreenButton(event) {
                        that._onContainerKeyPress(event);
                    }, false);

                    Utilities.addRemovableEventListener(this._inputHandlerElement, "click", function mediaPlayback_onInputHandlerClick(event) {
                        if (that._message && that._message.innerText && that._message.innerText !== "") {
                            that._reload();
                        }
                    }, false);

                    this._onSamePageNavBinding = this._onSamePageNav.bind(this);
                    if (this._windowEventManager) {
                        Utilities.addRemovableEventListener(this._windowEventManager, "samePageNav", this._onSamePageNavBinding);
                    }

                    Utilities.addRemovableEventListener(this._navigationControl, "navigating", this._onSamePageNavBinding);

                    Utilities.addRemovableEventListener(this._controlsElement, "mousemove", function mediaPlayback_onMouseMove(event) {
                        that._onControlsElementMouseMove();
                        that._stopEventPropagation(event);
                    }, true);

                    Utilities.addRemovableEventListener(this._thumbElement, "resize", function mediaPlayback_onResizeThumb(event) { that._syncTimeAndProgress(); }, false);

                    //_fullScreenControl is shared by all video instances and we do not want duplicated listeners
                    Utilities.addRemovableEventListener(this._fullScreenControl, "FullScreenEnter", function mediaPlayback_onFullScreenEnter(event) { that._sequencer._onEnteredFullScreen(event); });
                    Utilities.addRemovableEventListener(this._fullScreenControl, "FullScreenExit", function mediaPlayback_onFullScreenExit(event) { that._sequencer._onExitedFullScreen(event); });

                    this._onResizeBinding = this._onResize.bind(this);
                    if (this._windowEventManager) {
                        Utilities.addRemovableEventListener(this._windowEventManager, BingApps.WindowEventManager.Events.WINDOW_RESIZE, this._onResizeBinding);
                    }

                    this._startOffsetX = 0;
                    this._lastGranularity = 1;
                    this._hasBeenInitialized = true;
                    this._isPointerDown = false;

                    // Init Countdown UI
                    this._initCountdownUI();
                },

                _onContainerKeyPress: function (event) {
                    this._stopEventPropagation(event);
                    var keyPressed = event.key;
                    if (keyPressed === "Backspace") {
                        this._leaveFullScreenMode();
                    }
                },

                _reload: function () {
                    this._message.innerText = "";
                    if (this._playbackCapabilities === BingApps.UI.MediaAppControls.PlaybackCapabilities.fullScreenOnly) {
                        BingApps.UI.MediaAppControls.MediaPlayback.fullscreenPlayback(this._wrapperElement, this._currentIndex, this._videoList);
                    }
                    else {
                        BingApps.UI.MediaAppControls.MediaPlayback.inlinePlayback(this._wrapperElement, this._currentIndex, this._videoList, true);
                    }
                },

                _initCountdownUI: function () {
                    this._shouldContinueNextVideo = this._shouldContinueNextVideo && window.navigator.onLine; // Connection may lost while during video play. Then, we should not show the countdown popup
                    if (this._shouldContinueNextVideo) {
                        this._mediaPlaybackCountdownUI = this._getChildElementById("mediaPlaybackCountdownUI");
                        var mediaPlaybackCountdownUI = this._mediaPlaybackCountdownUI;
                        if (mediaPlaybackCountdownUI) {
                            this._countdownText = mediaPlaybackCountdownUI.querySelector("#countdownText");
                            this._nextVideoTitle = mediaPlaybackCountdownUI.querySelector("#nextVideoTitle");
                            this._nextVideoFavicon = mediaPlaybackCountdownUI.querySelector("#nextVideoFavicon");
                            this._nextVideoSource = mediaPlaybackCountdownUI.querySelector("#nextVideoSource");
                            this._nextVideoThumbnail = mediaPlaybackCountdownUI.querySelector("#nextVideoThumbnail");
                            this._nextVideoPlaybackButton = mediaPlaybackCountdownUI.querySelector("#nextVideoPlaybackButton");
                            var that = this;
                            Utilities.addRemovableEventListener(this._nextVideoPlaybackButton, "click", function nextVedioPlayback_onClickPlayButton(event) {
                                that._stopEventPropagation(event);
                                that._clearCountdownTimer();
                                if (that._playbackCapabilities === BingApps.UI.MediaAppControls.PlaybackCapabilities.fullScreenOnly) {
                                    BingApps.UI.MediaAppControls.MediaPlayback.fullscreenPlayback(that._nextWrapperElement, that._nextIndex, that._videoList);
                                }
                                else {
                                    BingApps.UI.MediaAppControls.MediaPlayback.inlinePlayback(that._nextWrapperElement, that._nextIndex, that._videoList, true);
                                }
                            });
                        }
                    }
                },

                _resetControlsElementState: function () {
                    if (this._controlHideTimeout) {
                        this._removeControlsTimer();
                        this._isControlsVisible = false;
                    }
                },

                _onSamePageNav: function (event) {
                    this._leaveFullScreenMode();
                },

                _onResize: function (event) {
                    var viewStates = Windows.UI.ViewManagement.ApplicationViewState;
                    var newViewState = Windows.UI.ViewManagement.ApplicationView.value;
                    if (newViewState === viewStates.snapped) {
                        if (this._isCountdownUIShowing) {
                            this._hideCountdownUI();
                            if (this._playbackCapabilities === BingApps.UI.MediaAppControls.PlaybackCapabilities.fullScreenOnly) {
                                BingApps.UI.MediaAppControls.MediaPlayback.fullscreenPlayback(this._nextWrapperElement, this._nextIndex, this._videoList);
                            }
                            else {
                                BingApps.UI.MediaAppControls.MediaPlayback.inlinePlayback(this._nextWrapperElement, this._nextIndex, this._videoList, true);
                            }
                        }
                    }
                    else {
                        if (this._isCountdownUIShowing) {
                            this._refreshCountdownUI();
                        }
                    }
                },

                //Get offsetTop to the root element in DOM tree
                _getRelativeTop: function (obj) {
                    var offsetTop = 0;
                    while (obj) {
                        offsetTop += obj.offsetTop;
                        obj = obj.offsetParent;
                    }
                    return offsetTop;


                },

                // Helper function to stop event propagation
                _stopEventPropagation: function (event) {
                    event.stopPropagation();
                    event.preventDefault();
                },

                // Setup media strip visuals in right order
                _setupMediaStrip: function () {
                    var inputHandlerWidth = this._inputHandlerElement.clientWidth;
                    this._mediaStrip.style.msTransform = "";
                },

                // Handles the gesture start event on the input Handler element
                _onInputHandlerPointerDown: function (event) {
                    if (!this._canScrubVideo) {
                        return;
                    }

                    if (event.pointerType === mousePointerType && event.button !== mouseLeftButton) {
                        return;
                    } else {
                        this._inputHandlerElement.msSetPointerCapture(event.pointerId);
                        event.preventDefault();
                    }

                    this._startTouchOffsetX = event.offsetX;
                    this._startTouchOffsetY = event.offsetY;
                    var thumbOffsetX = (this._thumbElement.offsetLeft - this._thumbElement.parentElement.offsetLeft) + this._thumbElement.clientWidth / 2;
                    var thumbOffsetY = (this._thumbElement.offsetTop - this._thumbElement.parentElement.offsetTop) + this._thumbElement.clientHeight / 2;

                    if (this._isSeekBarVisible && Math.abs(thumbOffsetX - this._startTouchOffsetX) < this._thumbGrabThreshold && Math.abs(thumbOffsetY - this._startTouchOffsetY) < this._thumbGrabThreshold) {
                        this._onThumbStartDrag(event);
                        this._stopEventPropagation(event);
                        return true;
                    }

                    this._isPointerDown = true;
                },

                // Handles the pointer move event on the input Handler element
                _onInputHandlerPointerMove: function (event) {
                    var currentPointerPosition = event.pageX + "," + event.pageY;
                    this._testThumbState(event.pageX, event.pageY);
                    var lastPointerPosition = this._lastPointerPosition;
                    this._lastPointerPosition = currentPointerPosition;
                    event.preventDefault();

                    if (!lastPointerPosition || lastPointerPosition === currentPointerPosition) {
                        return;
                    }

                    if (this._isThumbGrabbed) {
                        this._etw.mediaPlaybackSliderUpdateStart();
                        this._onThumbDrag(event);
                        return true;
                    }

                    if (this._isPointerDown) {
                        event.preventDefault();
                        return true;
                    }

                    // Save the timeStamp to see if we need to add time to the controls and seekbar hide timeout
                    this._lastPointerMoveTimeStamp = event.timeStamp;

                    this.showControls(true, false);

                    return false;
                },

                // Handles the gesture end event on the input Handler element
                _onInputHandlerPointerUp: function (event) {

                    var mini = event.currentTarget.getAttribute("data-mini") === "root";

                    if (!mini) {
                        this._inputHandlerElement.msReleasePointerCapture(event.pointerId);

                        if (this._isThumbGrabbed) {
                            if (this._isThumbUp) {
                                this._rotateThumbDown();
                            }
                            this._onThumbStopDrag(event);
                            //_onThumbStopDrag will set the state of _thumbElement as MediaAppControls.ControlState.hover
                            //here we test its real state based on the pointer's position
                            this._testThumbState(event.pageX, event.pageY);
                            return true;
                        }
                    }

                    if (this._isPointerDown) {
                        var offsetX = event.offsetX + event.target.offsetLeft - event.currentTarget.offsetLeft;

                        // If we're dragging the thumb
                        if (Math.abs(event.offsetY + this._getRelativeTop(event.currentTarget) - (this._getRelativeTop(this._seekBar) + this._seekBar.clientHeight / 2)) < this._thumbGrabThreshold && this._isSeekBarVisible) {
                            this._startOffsetX = event.offsetX;

                            if (this._startOffsetX > this._getSeekbarStart() && this._startOffsetX < (parseFloat(this._seekBar.clientWidth) + this._getSeekbarStart())) {
                                this._onThumbDrag(event);
                            }

                            this._showControls();
                            this._showSeekBar();
                        } else {
                            this._onInputHandlerTap(event);
                        }
                    }

                    this._isPointerDown = false;
                    return false;
                },

                // For tap on mediaplayback, to bring up controls bar
                _onInputHandlerTap: function (event) {
                    if (this._controlHideTimeout) {
                        this._hideControls();
                        this._hideSeekBar();
                    } else {
                        this._showControls();

                        if (this._mode !== MediaAppControls.PlaybackMode.minimal) {
                            this._showSeekBar();
                        }
                    }
                },

                // Handles the gesture end event on the input Handler element
                // This is required because touch down events dont work without a registration for gesture events.
                _onInputHandlerGestureEnd: function (event) {
                },

                // Handle key presses when the video control has the focus accessibility
                // Support play/pause
                _onInputHandlerKeyUp: function (event) {
                    this.showControls(true, false);

                    var keyPressed = event.key;
                    if ((keyPressed === "Spacebar") || (keyPressed === "Enter")) {
                        if (document.activeElement === this._fullScreenToggleButton || (document.activeElement && document.activeElement.children &&
                            document.activeElement.children[0] && document.activeElement.children[0] === this._fullScreenToggleButton)) {
                            this._toggleFullScreen();
                        } else if (document.activeElement === this._screenSizeToggleButton || (document.activeElement && document.activeElement.children &&
                            document.activeElement.children[0] && document.activeElement.children[0] === this._screenSizeToggleButton)) {
                            this._toggleScreenSize();
                        } else if (document.activeElement === this._reloadButton || (document.activeElement && document.activeElement.children &&
                            document.activeElement.children[0] && document.activeElement.children[0] === this._reloadButton)) {
                            this._reload();
                        }
                        else {
                            this._onPlayPauseToggleCommand();
                        }
                        return;
                    }

                    if (keyPressed === "Esc") {
                        this._leaveFullScreenMode();
                    }

                    if (keyPressed === "Tab") {
                        if (this._message && this._message.innerText && this._message.innerText !== "") {
                            if (document.activeElement === this._fullScreenToggleButton || (document.activeElement && document.activeElement.children &&
                            document.activeElement.children[0] && document.activeElement.children[0] === this._fullScreenToggleButton)) {
                                this._reloadButton.focus();
                            } else {
                                this._fullScreenToggleButton.focus();
                            }
                        }
                        else {
                            if (document.activeElement === this._playButton || (document.activeElement && document.activeElement.children &&
                                document.activeElement.children[0] && document.activeElement.children[0] === this._playButton)) {
                                this._fullScreenToggleButton.focus();
                            } else if (document.activeElement === this._fullScreenToggleButton || (document.activeElement && document.activeElement.children &&
                                document.activeElement.children[0] && document.activeElement.children[0] === this._fullScreenToggleButton)) {
                                this._screenSizeToggleButton.focus();
                            } else {
                                this._playButton.focus();
                            }
                        }
                    }
                },

                _onInputHandlerKeyDown: function (event) {
                    //_onPlayingEventFired to avoid using left/right arrows to drag seekbar before video starts playing
                    if (!this._canScrubVideo || !this._onPlayingEventFired) {
                        return;
                    }

                    var keyPressed = event.key;

                    switch (keyPressed) {
                        case "Left":
                            this.showControls();
                            this.currentTime = this.currentTime - 10;
                            this._stopEventPropagation(event);
                            return;
                        case "Right":
                            this.showControls();
                            this.currentTime = this.currentTime + 10;
                            this._stopEventPropagation(event);
                            return;
                    }
                },

                // Handles the mouse move element within the controls bar
                _onControlsElementMouseMove: function () {
                    this._showControls();
                    this._showSeekBar();
                },

                _getTotalSeekbarWidth: function () {
                    return parseFloat(this._seekBar.clientWidth) - this._thumbElement.clientWidth;
                },

                _getSeekbarStart: function () {
                    return this._seekAndPlaybackControlTableSpacerLeft.clientWidth;
                },

                // Handles the pointer down event on the seek bar thumb 
                _onThumbStartDrag: function (event) {
                    if (this._isSeekBarVisible && this._canScrubVideo) {
                        this._changeControlSource(this._thumbElement, MediaAppControls.Control.gripper, MediaAppControls.ControlState.pressed);
                        var thumbOffset = (this._thumbElement.offsetLeft - this._thumbElement.parentElement.offsetLeft) + this._thumbElement.clientWidth / 2;
                        this._thumbGrabOffsetX = event.clientX - thumbOffset;
                        //videoElement.pause cannot distinguish end state and pause state
                        this._wasPausedBeforeScrubbing = this._sequencer._currentState === BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Paused;

                        // Only do this for video as this will stop audio playback
                        if (this._type === MediaAppControls.PlaybackType.video) {
                            this._currentMediaElement.playbackRate = 0;
                        }

                        this._startOffsetX = event.offsetX;
                        this._isThumbGrabbed = true;
                        this._removeControlsTimer();
                        this._removeSeekBarTimer();
                        this._lastSeekBarLocation = this._seekBar.currentStyle.bottom;
                        this._lastThumbLocation = this._thumbElement.currentStyle.bottom;

                        this._rotateThumbUp();

                        return true;
                    } else {
                        this._onInputHandlerPointerDown(event);
                        event.preventDefault();
                        return true;
                    }
                },

                // Handles the mouse up event on the seek bar thumb
                _onThumbStopDrag: function (event) {
                    if (this._isThumbGrabbed) {
                        if (!this._wasPausedBeforeScrubbing) {
                            this._currentMediaElement.playbackRate = 1;

                            // Only resume playback if we are not at the end of the queues last song, as this can occur in the middle of a song (hence the .ended being a clause).
                            // the reason of not using videoElement.ended as the condition of if clause below is that 
                            // videoElement.endedwill be immediately set false once we drag the seekbar, which will trigger 
                            //the update of current time of suqencer and turn off videoElement.ended, 
                            //even though it doesn't start playing. So, _sequencer._currentState is more reliable here.
                            if (this._sequencer._currentState !== BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Playing &&
                                this._sequencer._currentState !== BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Paused) {

                                // [Video DCR]: Support Continuous video playback
                                // Hide CountdownUI if opened
                                if (this._isCountdownUIShowing) {
                                    this._hideCountdownUI();
                                }
                                this._currentMediaElement.play();
                            }
                        }

                        this._isThumbGrabbed = false;
                        this._showSeekBar(true);

                        this._thumbElementToolTip.style.opacity = 0;
                        this._changeControlSource(this._thumbElement, MediaAppControls.Control.gripper, MediaAppControls.ControlState.hover);
                        this.resetAutoHideTimers(true);

                        return true;
                    }

                    return false;
                },

                _rotateThumbUp: function () {
                    this._seekBar.style.msTransitionProperty = "margin-bottom";
                    this._backdrop.style.msTransitionProperty = "height";
                    Utilities.addClass(this._seekBar, "seekBarRaised");
                    Utilities.addClass(this._backdrop, "backDropExpanded");

                    var totalSeekBarWidth = this._getTotalSeekbarWidth();
                    var seekStart = this._getSeekbarStart();

                    var progress = this._sequencer.CurrentTime * totalSeekBarWidth / this._sequencer.Duration;

                    // Handle the case of scrubbing before the video is loaded
                    if (isNaN(this._sequencer.Duration)) {
                        progress = 0;
                    }

                    var angle = -90 + progress / totalSeekBarWidth * 90;

                    // Rotate counterclockwise after halfway point
                    if (angle >= -45 && !this._isThumbUp) {
                        angle -= 360;
                    }

                    this._thumbElement.style.msTransitionProperty = "all";
                    this._thumbElement.style.msTransitionDuration = "200ms";
                    this._thumbElement.style.msTransitionTimingFunction = "ease-in-out";
                    this._thumbElement.style.msTransform = "rotate(" + angle + "deg)";
                    this._thumbElement.style.msTransitionProperty = "";
                    this._thumbElement.style.msTransitionDuration = "";
                    this._thumbElement.style.msTransitionTimingFunction = "";

                    this._isThumbUp = true;
                },

                _rotateThumbDown: function () {
                    this._isThumbUp = false;
                    this._syncTimeAndProgress(true);
                    Utilities.removeClass(this._backdrop, "backDropExpanded");
                    Utilities.removeClass(this._seekBar, "seekBarRaised");
                },

                // Calculates the seek bar scrub granularity based on the time over position.
                _getSeekGranularity: function (event) {
                    var granularity = 1;
                    return granularity;
                },

                // Handles the mouse move event on the input handler element when thumb bar is held down
                _onThumbDrag: function (event) {

                    if (this._currentMediaElement.isVacant) {
                        return;
                    }

                    var difference = event.offsetX - this._startOffsetX;
                    var totalSeekBarWidth = this._getTotalSeekbarWidth();
                    var seekStart = this._getSeekbarStart();

                    // Calculate new bar position
                    var granularity = 1;
                    var progress = this._startOffsetX + difference * granularity - seekStart;

                    progress = progress > 0 ? progress : 0;
                    progress = progress < totalSeekBarWidth ? progress : totalSeekBarWidth;

                    var angle = 0;

                    if (this._isThumbGrabbed || this._isThumbUp) {
                        angle = -90 + progress / totalSeekBarWidth * 90;
                    } else {
                        angle = -180 - progress / totalSeekBarWidth * 90;
                    }

                    this._thumbElement.style.msTransform = "rotate(" + angle + "deg)";

                    // If the video isn't loaded yet, don't update the time...
                    if (isNaN(this._sequencer.Duration)) {
                        return;
                    }

                    // Update current time to match the new position
                    var newTime = progress / totalSeekBarWidth * this._sequencer.Duration;
                    this._thumbElementToolTip.innerText = this._formatTime(newTime);

                    // Cache the position we want to seek to

                    //disable dragging to the very end of video, in a case that video already ends then user keep drgging to the end, video control will behave incorrectly with continue play feature.
                    //also, with smooth streaming format, when seeking to the end, video might be "freezing"/ multiple "onEnded" events will be fired/ video will be playback again automatically
                    if (newTime >= (this._sequencer.Duration - 4) && this._sequencer.Duration > 4) {
                        newTime = this._sequencer.Duration - 4;
                    }

                    this._newTime = newTime;
                    this.currentTime = newTime;

                    if (this.currentTime !== 0) {
                        this._posterImage.style.visibility = "hidden";
                    }

                    // Update the visual position of the seek bar
                    this._thumbElement.style.marginLeft = (seekStart + progress) /* - this._thumbElement.clientWidth / 2) */ + "px";

                    var tooltipBottomMargin = (this._mode === MediaAppControls.PlaybackMode.full) ? 9 : 0;
                    if (this._isThumbGrabbed) {
                        this._thumbElementToolTip.style.opacity = 1;
                        this._thumbElementToolTip.style.marginLeft =
                            Math.min((this._thumbElement.offsetLeft - this._thumbElement.parentElement.offsetLeft) - ((this._thumbElementToolTip.clientWidth - this._thumbElement.clientWidth) / 2),
                                     (this._thumbElementToolTip.parentElement.clientWidth - this._thumbElementToolTip.clientWidth) - 5) + "px";
                        this._thumbElementToolTip.style.offsetTop = (this._thumbElement.offsetTop) - (this._thumbElementToolTip.clientHeight - tooltipBottomMargin) /* - this._thumbElementToolTip.clientHeight - tooltipBottomMargin) */ + "px";
                    }

                    this._progress.style.width = progress / totalSeekBarWidth * 100 + "%";

                    this._etw.mediaPlaybackSliderUpdateEnd();
                    return true;
                },


                // Updates the seek bar position to match the current media play time
                _syncTimeAndProgress: function (force) {
                    /// <param name="force" optional="true"/>

                    if (force || this._isSeekBarVisible || this.playbackMode === MediaAppControls.PlaybackMode.partial) {
                        var totalSeekBarWidth = this._getTotalSeekbarWidth();
                        var seekStart = this._getSeekbarStart();
                        var currentTime = this._sequencer.CurrentTime;
                        var duration = this._sequencer.Duration;

                        if (currentTime > duration) {
                            currentTime = duration;
                        }

                        var progress = ((this._newTime) ? this._newTime : currentTime) * totalSeekBarWidth / duration;

                        if (force || this._isSeekBarVisible) {
                            var angle = 0;

                            if (this._isThumbUp) {
                                angle = -90 + progress / totalSeekBarWidth * 90;
                            } else {
                                angle = -180 - progress / totalSeekBarWidth * 90;
                            }

                            this._thumbElement.style.msTransform = "rotate(" + angle + "deg)";
                            this._thumbElement.style.marginLeft = seekStart + progress /*- this._thumbElement.clientWidth / 2 */ + "px";
                        }

                        this._progress.style.width = progress / totalSeekBarWidth * 100 + "%";
                    }
                },

                // Pads second or minutes with leading zeros and returns string format. seconds or Minutes should be less than 60
                _getTimeString: function (secondsOrMinutes) {
                    var stringForm = secondsOrMinutes.toString();

                    if (secondsOrMinutes < 10) {
                        stringForm = "0" + stringForm;
                    }

                    return stringForm;
                },

                // Formats time in seconds to hh:mm:dd format.
                _formatTime: function (seconds) {
                    if (isNaN(seconds)) {
                        return "";
                    }

                    if (this._durationFormatter) {
                        return this._durationFormatter.format(seconds * 1000);
                    }

                    var minutes = Math.floor(seconds / 60);
                    seconds = Math.floor(seconds % 60);
                    var hours = Math.floor(minutes / 60);
                    minutes = minutes % 60;
                    var timeString = minutes.toString() + ":" + this._getTimeString(seconds);

                    if (hours > 0) {
                        timeString = hours.toString() + ":" + this._getTimeString(timeString);
                    }

                    return timeString;
                },

                _getTimeIndicatorText: function () {
                    return (this._timeFormat || "{0} / {1}").format(
                        this._formatTime(this._sequencer.CurrentTime),
                        this._formatTime(this._sequencer.Duration)
                    );
                },

                _getElapsedTimeText: function () {
                    return this._formatTime(Math.ceil(this._sequencer.CurrentTime));
                },

                _getRemainingTimeText: function () {
                    return "-" + this._formatTime(Math.floor(this._sequencer.Duration) - Math.floor(this._sequencer.CurrentTime));
                },

                // Updates the time display div 
                _updateTimeDisplay: function () {
                    this._clearTimeDisplay();
                    this._timeIndicator.innerText = this.timeIndicatorText;
                    this._currentTimeIndicator.innerText = this._formatTime(this._sequencer.CurrentTime);
                    this._totalTimeIndicator.innerText = this._formatTime(this._sequencer.Duration);
                    if (this._currentMediaElement && this._currentMediaElement.src.indexOf(this._resetVidSrc) >= 0) {
                        this._topBarCurrentTime.innerText = "0:00";
                        this._topBarTotalTime.innerText = "/ 0:00";
                    } else {
                        this._topBarCurrentTime.innerText = this._currentTimeIndicator.innerText;
                        this._topBarTotalTime.innerText = "/ " + this._totalTimeIndicator.innerText;
                    }

                    // Only update the narrator every 5 secs
                    if (Math.abs(this._currentMediaElement.currentTime - this._lastTimeDisplayAriaUpdate) > 5) {
                        this._thumbElement.setAttribute("aria-valuenow", this._sequencer.CurrentTime);
                        this._thumbElement.setAttribute("aria-valuemin", 0);
                        this._thumbElement.setAttribute("aria-valuemax", this._sequencer.Duration);
                        this._lastTimeDisplayAriaUpdate = this._sequencer.CurrentTime;
                    }

                    var payload = {
                        elapsedTime: this.elapsedTimeText,
                        remainingTime: this.remainingTimeText
                    };
                },

                // Clears the time display divs
                _clearTimeDisplay: function () {
                    Utilities.empty(this._timeIndicator);
                    Utilities.empty(this._currentTimeIndicator);
                    Utilities.empty(this._totalTimeIndicator);
                },

                // Handles the timeupdate event of the current media element
                _onTimeUpdate: function () {
                    if (this._hasBeenInitialized) {

                        if (!this._isThumbGrabbed) {
                            this._syncTimeAndProgress();
                        }

                        this._updateTimeDisplay();
                    }
                },

                // This updates the controls with property visibility based on the mode (full/partial/minimal) using the 
                // declarative data-supportedModes and data-supportedMediaTypes attributes on the control buttons.
                _updateControls: function () {
                    var controls = this._controlsElement.getElementsByTagName("button");

                    for (var index = controls.length - 1; index >= 0; index--) {
                        var control = controls[index];
                        control.style.defaultDisplay = control.style.display;
                        control.style.display = "none";
                        control.setAttribute("data-mode", this._mode);
                        var supportedModes = control.getAttribute("data-supportedModes");
                        var supportedTypes = control.getAttribute("data-supportedMediaTypes");

                        if (supportedModes && supportedModes.indexOf(this._mode) > -1) {
                            if (supportedTypes && supportedTypes.indexOf(this._type) > -1) {
                                control.style.display = control.style.defaultDisplay;
                            }
                        }
                    }

                    this._timeIndicator.setAttribute("data-mode", this._mode);
                    this._currentTimeIndicator.setAttribute("data-mode", this._mode);
                    this._totalTimeIndicator.setAttribute("data-mode", this._mode);
                    this._thumbElement.setAttribute("data-mode", this._mode);
                    this._seekBar.setAttribute("data-mode", this._mode);
                    this._backdrop.setAttribute("data-mode", this._mode);
                    this._playButton.setAttribute("data-mode", this._mode);
                    this._fullScreenToggleButton.setAttribute("data-mode", this._mode);
                    this._thumbElementToolTip.setAttribute("data-mode", this._mode);

                    this._playbackControlTable.setAttribute("data-mode", this._mode);
                    this._seekAndPlaybackControlTable.setAttribute("data-mode", this._mode);
                    this._seekAndPlaybackControlTableSpacerLeft.setAttribute("data-mode", this._mode);
                    this._seekAndPlaybackControlTableSpacerRight.setAttribute("data-mode", this._mode);
                    this._seekAndPlaybackControlTableSpacerMiddle.setAttribute("data-mode", this._mode);
                },

                // Adds an poster image for an mediaElement
                _setPoster: function (imageSrc) {
                    this._posterImage.src = imageSrc;
                },

                //Adds title for an mediaElement
                _setTitle: function (title) {
                    this._topBarTitle.innerText = title;
                },

                //Adds attribution for an mediaElement
                _setAttribution: function (attr) {
                    this._topBarAttribution.innerText = attr;
                    this._currentMediaSrcProvider = attr;
                },

                //Adds logo for an mediaElement
                _setLogo: function (src) {
                    try {
                        this._topBarLogo.src = src;
                    } catch (e) {
                        // Invalid image source
                    }
                },

                // Turns the play button into a pause button
                _showPauseButton: function () {
                    this._playButton.isPause = true;
                    this._playButton.setAttribute("aria-labelledby", "mediaPlaybackPauseButtonAriaLabel");
                    Utilities.addClass(this._playButton, "playing");

                    Utilities.removeClass(this._playButton, "grayButton");
                    Utilities.removeClass(this._fullScreenToggleButton, "grayButton");
                },

                // Turns the pause button into a play button
                _showPlayButton: function () {
                    this._playButton.isPause = false;
                    this._playButton.setAttribute("aria-labelledby", "mediaPlaybackPlayButtonAriaLabel");
                    Utilities.removeClass(this._playButton, "playing");
                },

                // Add a media event listener, this method tracks the handlers in a list so that they can be used to unsubscribe later
                _addMediaEventListener: function (element, eventName, handler) {
                    element.addEventListener(eventName, handler, false);
                    element._mediaEventSubscriptions.push({ eventName: eventName, handler: handler });
                },

                // Unsubscribe from previously subscribed media events
                _unsubscribeFromMediaEvents: function (element) {
                    var that = this;

                    if (element._mediaEventSubscriptions) {
                        element._mediaEventSubscriptions.forEach(function mediaPlayback_foreachMediaEventSubscription(subscription) {
                            element.removeEventListener(subscription.eventName, subscription.handler);
                        });
                    }
                    element._mediaEventSubscriptions = [];
                },

                // Unsubscribe a specific media event
                _unsubscribeFromMediaEvent: function (element, eventName) {

                    if (element._mediaEventSubscriptions) {
                        for (var i = 0, len = element._mediaEventSubscriptions.length; i < len; i++) {
                            var otherEventName = element._mediaEventSubscriptions[i].eventName;
                            if (eventName === otherEventName) {
                                element.removeEventListener(otherEventName, element._mediaEventSubscriptions[i].handler);
                                element._mediaEventSubscriptions.splice(i, 1);
                                break;
                            }
                        }
                    }
                },

                // Setup event handlers on the currently active media element
                _setupMediaElement: function (mediaElement) {
                    if (!mediaElement) {
                        return;
                    }

                    this._unsubscribeFromMediaEvents(mediaElement);
                    var that = this._sequencer;
                    this._addMediaEventListener(mediaElement, "playing", function mediaPlayback_mediaElementOnPlaying(event) { that._onPlaying(event); });
                    this._addMediaEventListener(mediaElement, "loadedmetadata", function mediaPlayback_mediaElementOnLoadedMetadata(event) { that._onMetaDataLoaded(event); });
                    this._addMediaEventListener(mediaElement, "pause", function mediaPlayback_mediaElementOnPause(event) { that._onPause(event); });
                    this._addMediaEventListener(mediaElement, "ended", function mediaPlayback_mediaElementOnEnded(event) { that._onEnded(event); });
                    this._addMediaEventListener(mediaElement, "ratechange", function mediaPlayback_mediaElementOnRateChange(event) { that._onRateChange(event); });
                    this._addMediaEventListener(mediaElement, "error", function mediaPlayback_mediaElementOnError(event) { that._onError(event); });
                    this._addMediaEventListener(mediaElement, "timeupdate", function mediaPlayback_mediaElementOnTimeUpdate(event) { that._onTimeUpdate(event); });
                    this._addMediaEventListener(mediaElement, "seeked", function mediaPlayback_mediaElementOnSeeked(event) {
                        Utilities.addClass(that._mediaPlayer._waitingSpinnerContainer, "platformHide");
                        Utilities.removeClass(that._mediaPlayer._waitingSpinnerContainer, "mediaPlaybackSpinnerTransBG");
                        that._onSeeked(event);
                    });
                    this._addMediaEventListener(mediaElement, "seeking", function mediaPlayback_mediaElementOnSeeked(event) {
                        Utilities.removeClass(that._mediaPlayer._waitingSpinnerContainer, "platformHide");
                        Utilities.addClass(that._mediaPlayer._waitingSpinnerContainer, "mediaPlaybackSpinnerTransBG");
                    });
                },

                _changeControlSource: function (control, controlName, state) {
                    control.src = "{0}/{1}{2}_{3}.svg".format(this._srcPath, controlName, state, (this._inFullScreenMode) ? "fullscreen" : "inline");
                },

                _testThumbState: function (mouseX, mouseY) {
                    var position = Utilities.getPosition(this._thumbElement);
                    var state;
                    if (this._isThumbGrabbed) {
                        state = MediaAppControls.ControlState.pressed;
                    } else if (mouseX >= position.left && mouseX <= position.left + position.width && mouseY >= position.top && mouseY <= position.top + position.height) {
                        state = MediaAppControls.ControlState.hover;
                    } else {
                        state = MediaAppControls.ControlState.rest;
                    }

                    if (state !== this._oldThumbState) {
                        this._oldThumbState = state;
                        this._changeControlSource(this._thumbElement, MediaAppControls.Control.gripper, state);
                    }
                },

                _onReadyForInteraction: function () {
                    var that = this;

                    this._loadPromise.then(function mediaPlayback_onReadyForInteractionPromiseComplete() {
                        that._enableInteraction();
                    });
                },

                _enableInteraction: function () {
                    var that = this;

                    Utilities.addRemovableEventListener(this._inputHandlerElement, "MSPointerDown", function mediaPlayback_inputHandlerElementOnMSPointerDown(event) { that._onInputHandlerPointerDown(event); }, true);
                    Utilities.addRemovableEventListener(this._inputHandlerElement, "MSPointerMove", function mediaPlayback_inputHandlerElementOnMSPointerMove(event) { that._onInputHandlerPointerMove(event); }, false);
                    Utilities.addRemovableEventListener(this._inputHandlerElement, "MSGestureEnd", function mediaPlayback_inputHandlerElementOnMSGestureEnd(event) { that._onInputHandlerGestureEnd(event); }, false);
                    Utilities.addRemovableEventListener(this._inputHandlerElement, "MSPointerUp", function mediaPlayback_inputHandlerElementOnMSPointerUp(event) { that._onInputHandlerPointerUp(event); }, false);
                },

                _disableInteraction: function () {
                    Utilities.removeEventListener(this._inputHandlerElement, "MSPointerDown", true);
                    Utilities.removeEventListener(this._inputHandlerElement, "MSPointerMove", false);
                    Utilities.removeEventListener(this._inputHandlerElement, "MSGestureEnd", false);
                    Utilities.removeEventListener(this._inputHandlerElement, "MSPointerUp", false);

                    this.hideControls();
                },

                _onMetaDataLoaded: function () {
                },

                // Handler for media elements onplaying event, used to raise event on outbound subscribers
                _onPlaying: function () {

                    var that = this;
                    //force video to show... work round bug 388898 on Nvidia machine that sometimes the first video after app restart will show black screen only
                    if (that && that._currentMediaElement && that._currentMediaElement.visual && that._currentMediaElement.visual.style) {
                        that._currentMediaElement.visual.style.opacity = "0.99";
                    }

                    //set opacity to other value than 1 will hide top bar background and drabar background, looks like a system bug
                    setTimeout(function mediaPlaybackResetVideoOpacity() {
                        if (that && that._currentMediaElement && that._currentMediaElement.visual && that._currentMediaElement.visual.style) {
                            that._currentMediaElement.visual.style.opacity = "1";
                        }
                    }, 500);

                    this._posterImage.style.visibility = "hidden";
                    Utilities.addClass(this._waitingSpinnerContainer, "platformHide");

                    if (this._hasBeenInitialized) {
                        if (this._currentMediaElement.playbackRate === this._currentMediaElement.defaultPlaybackRate) {
                            this._showPauseButton();
                        }

                        Utilities.addClass(this._playButton, "playbackActiveButton");
                        Utilities.addClass(this._fullScreenToggleButton, "playbackActiveButton");
                    }
                },

                // Handler for media elements pause event, used to raise event on outbound subscribers
                _onPause: function () {
                    this._etw.mediaPlaybackPauseEnd();

                    if (this._hasBeenInitialized) {
                        this._showPlayButton();
                    }

                    this._onStopping = false;

                    Utilities.removeClass(this._playButton, "playbackActiveButton");
                    Utilities.removeClass(this._fullScreenToggleButton, "playbackActiveButton");
                    var that = this;
                },

                _onPosterLoad: function () {
                },

                // Handler for media elements ended event, used to raise event on outbound subscribers
                _onEnded: function (event) {

                    if (this._isThumbGrabbed) {
                        this._onThumbStopDrag(null);
                    }

                    Utilities.removeClass(this._playButton, "playbackActiveButton");
                    Utilities.removeClass(this._fullScreenToggleButton, "playbackActiveButton");
                    //we decided not to show poster image in the end
                    //this._posterImage.style.visibility = "visible";

                    // [Video DCR]: Support Continuous video playback
                    // Setup NEXT video
                    if (this._shouldContinueNextVideo) {
                        // We will not show countdown UI for snapmode. just play videos continuously
                        var state = Windows.UI.ViewManagement.ApplicationView.value;
                        if (state === Windows.UI.ViewManagement.ApplicationViewState.snapped) {
                            if (this._playbackCapabilities === BingApps.UI.MediaAppControls.PlaybackCapabilities.fullScreenOnly) {
                                BingApps.UI.MediaAppControls.MediaPlayback.fullscreenPlayback(this._nextWrapperElement, this._nextIndex, this._videoList);
                            }
                            else {
                                BingApps.UI.MediaAppControls.MediaPlayback.inlinePlayback(this._nextWrapperElement, this._nextIndex, this._videoList, true);
                            }
                        }
                        else if (this._mediaPlaybackCountdownUI) {
                            var sec = this._countdownForNextVideo;
                            var countdownMessage = WinJS.Resources.getString("BingApps/videoCountdownText").value;
                            this._showCountdownUI();
                            var that = this;
                            this._countdownTimerId = setInterval(function () {
                                if (sec === 0) {
                                    that._hideCountdownUI();
                                    if (that._playbackCapabilities === BingApps.UI.MediaAppControls.PlaybackCapabilities.fullScreenOnly) {
                                        BingApps.UI.MediaAppControls.MediaPlayback.fullscreenPlayback(that._nextWrapperElement, that._nextIndex, that._videoList);
                                    }
                                    else {
                                        BingApps.UI.MediaAppControls.MediaPlayback.inlinePlayback(that._nextWrapperElement, that._nextIndex, that._videoList, true);
                                    }
                                    return;
                                }
                                that._countdownText.innerHTML = countdownMessage.format("<strong>" + sec + "</strong>");
                                sec--;
                            }, 1000);
                        }
                    }
                    else {
                        if (Utilities.hasClass(this._errorScreen, "platformHide")) {
                            //_leaveFullScreenMode will check if it it in fullScreen mode
                            this._leaveFullScreenMode();
                        }
                    }
                    this._etw.mediaPlaybackMediaEnd();
                },

                _replaceHTMLEncodedChars: function (str) {
                    if (typeof (str) !== "string") {
                        return "";
                    }
                    var ret = str.replace(/<(?:.|\n)*?>/gm, "");
                    ret = ret.replace(/&quot;|&#34;/g, "\"");
                    ret = ret.replace(/&lt;|&#60;/g, "<");
                    ret = ret.replace(/&gt;|&#62;/g, ">");
                    ret = ret.replace(/&nbsp;|&#160;/g, " ");
                    ret = ret.replace(/&amp;|&#38;/g, "&");
                    return ret;
                },

                _showCountdownUI: function () {
                    this._populateCountdownUI();
                    this._screenSizeToggleButton.disabled = true;
                    Animation.fadeOut(this._currentMediaElement);
                    var that = this;
                    Utilities.removeClass(this._mediaPlaybackCountdownUI, "platformHide");
                    Animation.fadeIn(this._mediaPlaybackCountdownUI).done(function showCountdownUIComplete() {
                        BingApps.Utilities.truncateMultilineText(that._nextVideoTitle);
                        Utilities.removeClass(that._nextVideoTitle, "mask");
                        that._isCountdownUIShowing = true;
                    });
                },

                _refreshCountdownUI: function () {
                    var isPortrait = (this._containerElement.clientHeight > this._containerElement.clientWidth);
                    var shorterEdge = (isPortrait) ? this._containerElement.clientWidth : this._containerElement.clientHeight;
                    this._countdownText.style.fontSize = Math.round(0.039 * shorterEdge) + "px";
                    this._nextVideoTitle.style.fontSize = Math.round(0.022 * shorterEdge) + "px";
                    if (isPortrait) {
                        Utilities.removeClass(this._mediaPlaybackCountdownUI, "landscape");
                        Utilities.addClass(this._mediaPlaybackCountdownUI, "portrait");
                    }
                    else {
                        Utilities.removeClass(this._mediaPlaybackCountdownUI, "portrait");
                        Utilities.addClass(this._mediaPlaybackCountdownUI, "landscape");
                    }
                    BingApps.Utilities.truncateMultilineText(this._nextVideoTitle);
                },

                _populateCountdownUI: function () {
                    var sec = this._countdownForNextVideo;
                    var countdownMessage = WinJS.Resources.getString("BingApps/videoCountdownText").value;
                    this._countdownText.innerHTML = countdownMessage.format("<strong>" + sec + "</strong>");
                    this._nextVideoTitle.innerText = this._replaceHTMLEncodedChars(this._nextVideoOptions.title || "");
                    this._refreshCountdownUI();
                    if (this._nextVideoOptions.sourceImageUrl) {
                        this._nextVideoFavicon.src = this._nextVideoOptions.sourceImageUrl;
                        this._nextVideoFavicon.alt = this._nextVideoOptions.source || "";
                    }
                    else {
                        this._nextVideoFavicon.style.display = "none";
                    }
                    this._nextVideoSource.innerText = this._nextVideoOptions.source || "";
                    if (this._nextVideoOptions.thumbnail) {
                        this._nextVideoThumbnail.style.backgroundImage = "url('" + this._nextVideoOptions.thumbnail + "')";
                    }
                    else {
                        this._nextVideoThumbnail.style.display = "none";
                    }
                },

                _hideCountdownUI: function () {
                    this._clearCountdownTimer();
                    var that = this;
                    Animation.fadeOut(this._mediaPlaybackCountdownUI).done(function hideCountdownUIComplete() {
                        Utilities.addClass(that._mediaPlaybackCountdownUI, "platformHide");
                        that._isCountdownUIShowing = false;
                    });
                    Animation.fadeIn(this._currentMediaElement);
                    this._screenSizeToggleButton.disabled = false;
                },

                _clearCountdownTimer: function () {
                    if (this._countdownTimerId) {
                        clearInterval(this._countdownTimerId);
                    }
                },

                // Handler for media elements seek has ended event
                _onSeeked: function () {
                    this._etw.mediaPlaybackSeekEnd(this._currentMediaElement.currentTime);

                    // We need cache the seeking position (the latest seeking position if the video /audio tag is in seeking already)
                    // and wait for the "seeked" event before we send in another seeking request (since otherwise it will be abandoned by the MF).
                    if (this._currentMediaElement && this._newTime) {
                        var newTime = Math.round(this._newTime);
                        var currentTime = Math.round(this._currentMediaElement.currentTime);

                        if (newTime !== currentTime) {
                            this.currentTime = this._newTime;
                        }

                        this._newTime = null;
                    }
                },

                // Handler for media elements ratechangee event, this helps control the show play pause button during ff/rev
                _onRateChange: function () {
                    /// <disable>JS2045.ReviewEmptyBlocks</disable>
                    if (this._currentMediaElement.playbackRate === this._currentMediaElement.defaultPlaybackRate) {
                        this._showPauseButton();
                    } else if (this._currentMediaElement.playbackRate === 0) {
                        // do nothing
                    } else {
                        this._showPlayButton();
                    }
                    /// <enable>JS2045.ReviewEmptyBlocks</enable>
                },

                // Error event handler for the media element's error event
                _onError: function (event) {
                    if (event.srcElement && event.srcElement.error) {
                        if (this._message) {
                            Utilities.removeClass(this._errorScreen, "platformHide");
                            Utilities.addClass(this._waitingSpinnerContainer, "platformHide");
                            this._message.innerText = window.navigator.onLine ? WinJS.Resources.getString("BingApps/videoLoadErrorText").value : WinJS.Resources.getString("BingApps/videoConnectErrorText").value;
                            this._fireVideoError("Video element error code:" + event.srcElement.error.code);
                            //enable exit controls for "try again"
                            this._showControls(true, false);
                            this._reloadButton.focus();
                        }
                    }
                },

                _resetToBlack: function () {
                    try {
                        this._currentMediaElement.src = this._resetVidSrc;
                        this._currentMediaElement.load();
                    }
                    catch (e) {
                    }
                },

                // Resets the media element to position 0
                _resetMediaElement: function (mediaElement, src) {
                    if (src) {
                        this._currentMediaSrcId = src;
                        mediaElement.objId = null;
                        mediaElement.src = src;

                        this._resetToBlack();
                        var extVid = {
                            ContentType: BingApps.UI.MediaAppControls.MediaContentType.VideoContent,
                            CanScrubVideo: true,
                            SourceUrl: src,
                        };
                        this._delayNavigateBack = false;
                        this._sequencer.AddContent(extVid);
                        this._adjustVideoSizeToScreen(this._userPreferenceVideoScreenSize === "50%" ? false : true);

                        this._newTime = null;
                    } else {
                        mediaElement.isVacant = true;
                        mediaElement.src = "";
                        Utilities.removeClass(this._loadingScreen, "hiddenObject");
                    }
                },

                _onPlayCommand: function () {
                    /// <summary>
                    /// Received Play Command
                    /// </summary>
                    /// <param name='event'>
                    /// MediaControl object on which the app registered this handler with
                    /// </param>

                    this.showControls();
                    this._sequencer.Play();
                },

                _onStopCommand: function () {
                    /// <summary>
                    /// Received Stop Command
                    /// </summary>
                    /// <param name='event'>
                    /// MediaControl object on which the app registered this handler with
                    /// </param>

                    this.showControls();
                    this._sequencer.Pause();
                },

                _onPauseCommand: function () {
                    /// <summary>
                    /// Received Pause Command
                    /// </summary>
                    /// <param name='event'>
                    /// MediaControl object on which the app registered this handler with
                    /// </param>

                    this.showControls();
                    this._sequencer.Pause();
                },

                _onPlayPauseToggleCommand: function () {
                    /// <summary>
                    /// Received Play/Pause Toggle Command
                    /// </summary>
                    /// <param name='event'>
                    /// MediaControl object on which the app registered this handler with
                    /// </param>

                    this.showControls(true, false);

                    if (this._sequencer.IsPaused() || this._sequencer.HasEnded()) {
                        this.play();
                    } else {
                        this.pause();
                    }

                },

                load: function () {
                    var that = this;
                    //always reload html fragment on load(), avoiding invisible video issue when load() is called after DOM structure has been destroyed (for example, page manually reloaded)
                    this._loadPromise = WinJS.UI.Fragments.renderCopy(controlTemplateLocation, null)
                        .then(function mediaPlayback_loadRenderCopyComplete(documentFragment) {
                            that._containerElement.innerHTML = "";
                            that._containerElement.appendChild(documentFragment);
                            that._init();
                            that._controlsElement.setAttribute("data-mediatype", that._type);

                            return WinJS.Resources.processAll(that._containerElement);
                        },
                        function mediaPlayback_loadRenderCopyError(errorDetails) { console.log("An error while rendering the mediaplayback control template" + errorDetails); });

                    return this._loadPromise;
                },

                /// <summary>
                /// Plays the current source ( if set)
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                play: function () {
                    if (this._playbackCapabilities === MediaAppControls.PlaybackCapabilities.fullScreenOnly && !this._inFullScreenMode) {
                        this._enterFullScreenMode();
                    }

                    // Hide CountdownUI if opened
                    if (this._isCountdownUIShowing) {
                        this._hideCountdownUI();
                    }

                    this._etw.mediaPlaybackPlayStart();

                    this._sequencer.Play();
                },

                _toggleFullScreen: function () {
                    if (!this._inFullScreenMode) {
                        this._enterFullScreenMode();
                    } else {
                        this._leaveFullScreenMode();
                    }
                },

                _toggleScreenSize: function (event) {

                    var currentMediaElmStyle = this._currentMediaElement.visual.style;
                    var isFullSize = (currentMediaElmStyle.width === "100%") && (currentMediaElmStyle.height === "100%");
                    this._userPreferenceVideoScreenSize = isFullSize ? "50%" : "100%";
                    this._adjustVideoSizeToScreen(!isFullSize);
                    if (event) {
                        this._stopEventPropagation(event);
                    };
                    this._screenSizeToggleButton.focus();
                },

                _enterFullScreenMode: function () {
                    if (this._inFullScreenMode) {
                        return;
                    }

                    var fsControl = this._fullScreenControl;
                    this._canResumePlayback = !this._sequencer.IsPaused();

                    if (fsControl) {
                        // Save style before going FS
                        var currentStyle = this._containerElement.style;
                        this._containerElement.oldStyle = {};
                        var oldStyle = this._containerElement.oldStyle;

                        oldStyle.width = currentStyle.width;
                        oldStyle.height = currentStyle.height;
                        oldStyle.opacity = currentStyle.opacity;

                        if (!fsControl.tryEnterFullScreen(this._containerElement)) {
                            console.log("Video Control: Failed to enter fullscreen mode");
                            this._containerElement.oldStyle = null;
                        }
                    }
                },

                _onEnteredFullScreen: function () {
                    this._inFullScreenMode = true;
                    this._fullScreenToggleButton.focus();

                    var currentStyle = this._containerElement.style;
                    currentStyle.width = "";
                    currentStyle.height = "";

                    // This hides the timeline bar to enable dp flip
                    this.playbackMode = MediaAppControls.PlaybackMode.full;

                    Utilities.addClass(this._containerElement, "fullScreen");
                    this._fullScreenToggleButton.setAttribute("aria-labelledby", "mediaPlaybackExitFullScreenAriaLabel");

                    this._changeControlSource(this._thumbElement, MediaAppControls.Control.gripper, MediaAppControls.ControlState.rest);

                    if (this._canResumePlayback) {
                        this._sequencer.Play();
                    }

                    this._canResumePlayback = null;
                    this._syncTimeAndProgress(true);
                    if (this._isCountdownUIShowing) {
                        this._refreshCountdownUI();
                    }
                    this._fireVideoOnFullscreenToggle(true);
                },

                _onExitedFullScreen: function () {
                    // restore old style
                    var currentStyle = this._containerElement.style;
                    var oldStyle = this._containerElement.oldStyle;

                    if (oldStyle) {
                        currentStyle.width = oldStyle.width;
                        currentStyle.height = oldStyle.height;
                        currentStyle.opacity = oldStyle.opacity;

                        this._containerElement.oldStyle = null;
                    }

                    this.playbackMode = MediaAppControls.PlaybackMode.partial;
                    Utilities.removeClass(this._containerElement, "fullScreen");
                    this._fullScreenToggleButton.setAttribute("aria-labelledby", "mediaPlaybackEnterFullScreenAriaLabel");

                    this._inFullScreenMode = false;
                    this._changeControlSource(this._thumbElement, MediaAppControls.Control.gripper, MediaAppControls.ControlState.rest);

                    this._canResumePlayback = null;
                    this._syncTimeAndProgress(true);
                    this.showControls(true);
                    if (this._isCountdownUIShowing) {
                        this._refreshCountdownUI();
                    }
                    this._fireVideoOnFullscreenToggle(false);
                },

                _leaveFullScreenMode: function () {
                    if (!this._inFullScreenMode) {
                        return;
                    }

                    var fsControl = this._fullScreenControl;

                    this.hideControls();

                    this._canResumePlayback = !this._sequencer.IsPaused() && (this._playbackCapabilities !== MediaAppControls.PlaybackCapabilities.fullScreenOnly);

                    if (!this._delayNavigateBack && fsControl) {
                        if (!fsControl.tryLeaveFullScreen()) {
                            console.log("Video Control: Failed to leave fullscreen mode");
                        }
                    }

                    if (this._shouldContinueNextVideo && this._playbackCapabilities === MediaAppControls.PlaybackCapabilities.fullScreenOnly) {
                        this._clearCountdownTimer();
                    }
                    Utilities.removeEventListener(this._wrapperElement, "keypress", false);
                    Utilities.removeEventListener(this._containerElement, "keypress", false);
                    document.body.focus();
                },

                /// <summary>
                /// Pauses the current media stream (if playing)
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                pause: function () {
                    this._etw.mediaPlaybackPauseStart();

                    if (this._sequencer && !this._sequencer.IsPaused()) {
                        try {
                            this._sequencer.Pause();
                        } catch (error) { }
                    } else {
                        this._onStopping = false;
                    }
                },

                /// <summary>
                /// Plays the current source if paused; pauses the current stream if playing
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                togglePlayPause: function () {
                    this._onPlayPauseToggleCommand();
                },

                /// <summary>
                /// Stops the current media stream
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                stop: function () {
                    this._onStopping = true;
                    this._sequencer.Pause();
                },

                /// <summary>
                /// Triggers the controls to be visible
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                showControls: function (forceShow, skipAutoHide) {
                    /// <param name="forceShow" optional="true"/>
                    /// <param name="skipAutoHide" optional="true"/>
                    this._showControls(forceShow, skipAutoHide);
                    this._showSeekBar(forceShow, skipAutoHide);
                },

                /// <summary>
                /// Triggers the controls to hide
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                hideControls: function () {
                    this._hideControls();
                    this._hideSeekBar();
                },

                /// <summary>
                /// Subscribes to timeupdate events from MPT
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                subscribeTimeUpdates: function () {
                    // Make sure there is only one timeupdate event ever, so we remove it first everytime
                    var that = this._sequencer;
                    this.unsubscribeTimeUpdates();
                    this._addMediaEventListener(this._currentMediaElement, "timeupdate", function mediaElement_currentMediaElementTimeUpdate() { that._onTimeUpdate(); });
                },

                /// <summary>
                /// Unsubscribes to timeupdate events from MPT
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                unsubscribeTimeUpdates: function () {
                    this._unsubscribeFromMediaEvent(this._currentMediaElement, "timeupdate");
                },

                /// <summary>
                /// Resets both the controls timer and the seekbar timer if available
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                resetAutoHideTimers: function (forceReset) {
                    this.resetAutoHideControlsTimer(forceReset);
                    this.resetAutoHideSeekbarTimer(forceReset);
                },

                /// <summary>
                /// Reset the auto hide timer of the controls if available
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                resetAutoHideControlsTimer: function (forceReset) {
                    /// <param name="forceReset" optional="true"/>

                    if (this._controlHideTimeout || forceReset) {
                        var that = this;

                        this._removeControlsTimer();

                        this._controlHideTimeout = setTimeout(function mediaPlayback_controlHideTimeout() {
                            that._hideControls();
                        }, this._controlsAutoHideDuration);
                    }
                },

                /// <summary>
                /// Reset the auto hide timer of the seekbar if available
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                resetAutoHideSeekbarTimer: function (forceReset) {
                    if (this._seekBarHideTimeout || forceReset) {
                        var that = this;

                        if (this._seekBarHideTimeout) {
                            clearTimeout(this._seekBarHideTimeout);
                        }

                        this._seekBarHideTimeout = setTimeout(function mediaElement_seekBarHideTimeout() {
                            that._hideSeekBar();
                        }, this._controlsAutoHideDuration);
                    }
                },

                /// <summary>
                /// Subscribes to events on the control
                /// Supported events:
                /// 1. playing                      - when playing starts on the current media src
                /// 2. pause                        - when currently playing media is paused
                /// 3. ended                        - when the current track ends.
                /// 4. stopped                      - when the current track ends and next track is not available
                /// 5. nexttrack                    - when the users moves to next track (through swipe gesture, or next track button)
                /// 7. previoustrack                - when the user moves to preious track (through swipe gesture, or next track button)
                /// 8. error                        - when the underlying media element raises and error event
                /// 9. showcontrols                 - when the playback controls are shown
                /// 10. hidecontrols                - when the playback controls are hidden
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                addEventListener: function (eventName, handler) {
                    this._containerElement.addEventListener(eventName, handler, false);
                },

                /// <summary>
                /// Unsubscribes from events
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                removeEventListener: function (eventName, handler) {
                    this._containerElement.removeEventListener(eventName, handler, false);
                },

                /// <summary>
                /// Gets the DOM element that hosts the MediaPlayback control.
                /// </summary>
                element: {
                    get: function () {
                        return this._wrapperElement;
                    }
                },

                /// <summary>
                /// Sets gets a media stream as the current source
                /// </summary>
                src: {
                    get: function () {
                        if (this._currentMediaElement.isVacant) {
                            return null;
                        } else {
                            return this._currentMediaElement.src;
                        }
                    },

                    set: function (value) {
                        this._resetMediaElement(this._currentMediaElement, value);
                    }
                },

                /// <summary>
                /// Sets the media element's logo
                /// </summary>
                logoSrc: {
                    set: function (value) {
                        this._setLogo(value);
                    }
                },

                /// <summary>
                /// Sets the media element's attribution
                /// </summary>
                attributionSrc: {
                    set: function (value) {
                        this._setAttribution(value);
                    }
                },

                /// <summary>
                /// Sets the media element's title
                /// </summary>
                titleSrc: {
                    set: function (value) {
                        this._setTitle(value);
                    }
                },

                /// <summary>
                /// Sets the media element's poster
                /// </summary>
                posterSrc: {
                    set: function (value) {
                        this._setPoster(value);
                    }
                },

                /// <summary>
                /// Gets the media element's poster
                /// </summary>
                poster: {
                    get: function () {
                        return this._posterImage.src;
                    }
                },

                /// <summary>
                /// Retrieves the error from the underlying media element
                /// </summary>
                error: {
                    get: function () {
                        return this._currentMediaElement.error;
                    }
                },

                /// <summary>
                /// Gets the duration in seconds of the current media source
                /// </summary>
                duration: {
                    get: function () {
                        return this._sequencer.Duration;
                    }
                },

                /// <summary>
                /// Gets sets the current time (in seconds) of the currently played media
                /// </summary>
                currentTime: {
                    get: function () {
                        return this._sequencer.CurrentTime;
                    },

                    set: function (value) {

                        if (this._currentMediaElement.isVacant) {
                            return;
                        }

                        this._etw.mediaPlaybackSeekStart(value);
                        var newTime = value;

                        if (newTime > this._sequencer.Duration) {
                            this._sequencer.CurrentTime = this._sequencer.Duration;
                        } else if (newTime < 0) {
                            this._sequencer.CurrentTime = 0;
                        } else {
                            this._sequencer.CurrentTime = newTime;
                        }
                    }
                },

                timeIndicatorText: {
                    get: function () {
                        return this._getTimeIndicatorText();
                    }
                },

                elapsedTimeText: {
                    get: function () {
                        return this._getElapsedTimeText();
                    }
                },

                remainingTimeText: {
                    get: function () {
                        return this._getRemainingTimeText();
                    }
                },

                /// <summary>
                /// Gets sets the playback rate of the currently played media
                /// 1.0 is normal speed.
                /// </summary>
                rate: {
                    get: function () {
                        return this._currentMediaElement.playbackRate;
                    },

                    set: function (value) {
                        this._currentMediaElement.playbackRate = value;
                    }
                },

                /// <summary>
                /// Orgiginal video width.
                /// </summary>
                videoWidth: {
                    get: function () {
                        return this._currentMediaElement.videoWidth;
                    }
                },

                /// <summary>
                /// Orgiginal video height.
                /// </summary>
                videoHeight: {
                    get: function () {
                        return this._currentMediaElement.videoHeight;
                    }
                },

                /// <summary>
                /// Seeks to the beginning of the current source (if set)
                /// </summary>
                /// <returns>
                /// None
                /// </returns>
                seekToBeginning: function () {
                    if (this._currentMediaElement.ended) {
                        this._currentMediaElement.load();
                    }

                    if (this.currentTime !== 0) {
                        this.currentTime = 0;
                    }

                    this._newTime = null;
                },

                /// <summary>
                /// Gets / sets the zoom factor of the currently played media
                /// </summary>
                zoom: {
                    get: function () {
                        return this._currentMediaElement.msZoom;
                    },

                    set: function (value) {
                        this._currentMediaElement.msZoom = value;
                    }
                },

                /// <summary>
                /// Gets / sets muted state of the currently played media
                /// "Full" or "Partial" or "Minimal"
                /// </summary>
                playbackMode: {
                    get: function () {
                        return this._mode;
                    },

                    set: function (value) {
                        this._mode = value;
                        this._updateControls();
                        this._contentElement.setAttribute("data-mode", this._mode);

                        var that = this._sequencer;

                        // Make sure we alway subscribe to media position change events again if not in full screen mode
                        this.subscribeTimeUpdates();
                    }
                },

                /// <summary>
                /// Refreshes the media strip.
                /// </summary>
                refresh: function () {
                    this._setupMediaStrip();
                },

            },
{
    // Provide a singleton instance for apps that want to show video content full screen but don't
    // need an inline element to show the control.
    instance: {
        get: function () {
            if (!BingApps.UI.MediaAppControls.MediaPlayback_instance) {

                // Create a hidden container for the video control to live
                var hiddenVideoContainer = document.createElement("div");
                WinJS.Utilities.addClass(hiddenVideoContainer, "hiddenObject");
                var hiddenVideoContainerChild = document.createElement("div");
                hiddenVideoContainer.appendChild(hiddenVideoContainerChild);
                document.body.appendChild(hiddenVideoContainer);

                BingApps.UI.MediaAppControls.MediaPlayback_instance = new BingApps.UI.MediaAppControls.MediaPlayback(
                    hiddenVideoContainerChild,
                    {
                        type: BingApps.UI.MediaAppControls.PlaybackType.video,
                        mode: BingApps.UI.MediaAppControls.PlaybackMode.minimal,
                        playbackCapabilities: BingApps.UI.MediaAppControls.PlaybackCapabilities.fullScreenOnly
                    });
            }

            return BingApps.UI.MediaAppControls.MediaPlayback_instance;
        }
    },

    // Provide a singleton instance for inlineplayback, to avoid multiple HTML5 Video element memeory issue, we should always use inlineInstance to show video in clusters or Article Reader
    inlineInstance: {
        get: function () {
            if (!BingApps.UI.MediaAppControls.MediaPlayback_inlineInstance) {
                var hiddenVideoContainer = document.createElement("div");
                WinJS.Utilities.addClass(hiddenVideoContainer, "mediaPlaybackContainer");
                BingApps.UI.MediaAppControls.MediaPlayback_inlineInstance = new BingApps.UI.MediaAppControls.MediaPlayback(
                    hiddenVideoContainer,
                    {
                        type: BingApps.UI.MediaAppControls.PlaybackType.video,
                        mode: BingApps.UI.MediaAppControls.PlaybackMode.partial,
                    });
            }

            return BingApps.UI.MediaAppControls.MediaPlayback_inlineInstance;
        }
    },

    fullscreenPlayback: function (wrapperElement, currentIndex, videoList) {

        if (!wrapperElement) {
            return;
        }

        if (!videoList || currentIndex >= videoList.length) {
            return;
        }

        var videoOptions = videoList[currentIndex];
        if (!videoOptions) {
            return;
        }

        var player = BingApps.UI.MediaAppControls.MediaPlayback.instance;

        player._wrapperElement = wrapperElement;
        player._currentIndex = currentIndex;
        player._videoList = videoList;

        // Set VideoOptions of next video
        player._shouldContinueNextVideo = player._enableContinuousVideoPlayback && window.navigator.onLine && videoList && videoList.length > 1;
        if (player._shouldContinueNextVideo) {
            var nextIndex = currentIndex + 1;
            nextIndex = (nextIndex === videoList.length) ? 0 : nextIndex;
            player._nextIndex = nextIndex;
            player._nextWrapperElement = wrapperElement;
            player._nextVideoOptions = videoList[nextIndex];
        }
        else {
            if (player._fullScreenControl && player._fullScreenControl._element) {
                var videoDivs = player._fullScreenControl._element.getElementsByClassName("mediaPlaybackInputHandler");
                if (videoDivs && videoDivs.length > 0) {
                    return; //already have a video displayed, so skip
                }
            }
        }
        player.load()
            .then(function fullscreenPlaybackLoadComplete() {
                if (videoOptions && videoOptions.getVideoData && WinJS.Promise.is(videoOptions.getVideoData(videoOptions))) {
                    player._resetToBlack();
                    return videoOptions.getVideoData(videoOptions).then(
                        function getVideoDataSuccess(newVideoOptions) {
                            BingApps.UI.MediaAppControls.MediaPlayback.setPlayerVideoOptions(player, newVideoOptions);
                        });
                }
                else {
                    BingApps.UI.MediaAppControls.MediaPlayback.setPlayerVideoOptions(player, videoOptions);
                    return WinJS.Promise.wrap();
                }
            })
            .done(function fullScreenPlayerPlayVideo() {
                if (document && (!document.msHidden)) {
                    player.play();
                } else {
                    player._resumePlay = true;
                }

            });
    },

    inlinePlayback: function (wrapperElement, currentIndex, videoList, playNextVideo) {

        if (!wrapperElement) {
            return;
        }

        var videoDivs = wrapperElement.getElementsByClassName("mediaPlaybackInputHandler");
        if (videoDivs && videoDivs.length > 0 && !playNextVideo) {
            return; //already have a video displayed, so skip
        }

        if (!videoList || currentIndex >= videoList.length) {
            return;
        }

        var videoOptions = videoList[currentIndex];
        if (!videoOptions) {
            return;
        }

        var player = BingApps.UI.MediaAppControls.MediaPlayback.inlineInstance;
        if (!player) {
            player._fireVideoError("failed to get video control inlineInstance singleton, something goes wrong");
            return;
        }

        player._wrapperElement = wrapperElement;
        player._currentIndex = currentIndex;
        player._videoList = videoList;

        // Set VideoOptions of next video
        player._shouldContinueNextVideo = player._enableContinuousVideoPlayback && window.navigator.onLine && videoList && videoList.length > 1;
        if (player._shouldContinueNextVideo) {
            var nextIndex = currentIndex + 1;
            nextIndex = (nextIndex === videoList.length) ? 0 : nextIndex;
            player._nextIndex = nextIndex;
            player._nextWrapperElement = wrapperElement;
            player._nextVideoOptions = videoList[nextIndex];
            player._videoList = videoList;
        }

        if (!playNextVideo) {

            var containerEle = document.createElement("div");
            containerEle.style.width = "100%";
            containerEle.style.height = "100%";
            WinJS.Utilities.addClass(containerEle, "mediaPlaybackContainer");

            //replace original child DOM in cluster item div with Video DOM
            if (wrapperElement.children && wrapperElement.children[0]) {
                Utilities.addClass(wrapperElement.children[0], "platformHide");
            }

            player._containerElement.style.width = "100%";
            player._containerElement.style.height = "100%";

            //remove it from previous parent
            var parent = player._containerElement.parentNode;
            if (parent) {
                parent.removeChild(player._containerElement);
                //restore original placeholder content in the div
                if (parent.children && parent.children[0]) {
                    Utilities.removeClass(parent.children[0], "platformHide");
                }
            }

            wrapperElement.appendChild(player._containerElement);
        }
        player.load()
            .then(function inlinePlaybackLoadComplete(event) {
                if (videoOptions && videoOptions.getVideoData && WinJS.Promise.is(videoOptions.getVideoData(videoOptions))) {
                    player._resetToBlack();
                    return videoOptions.getVideoData(videoOptions).then(
                        function getVideoDataSuccess(newVideoOptions) {
                            BingApps.UI.MediaAppControls.MediaPlayback.setPlayerVideoOptions(player, newVideoOptions);
                        });
                }
                else {
                    BingApps.UI.MediaAppControls.MediaPlayback.setPlayerVideoOptions(player, videoOptions);
                    return WinJS.Promise.wrap();
                }
            })
            .done(function playerPlayVideo() {
                if (document && (!document.msHidden)) {
                    player.play();
                } else {
                    player._resumePlay = true;
                }
            });
    },

    setPlayerVideoOptions: function (player, videoOptions) {
        if (videoOptions.thumbnail) {
            player.posterSrc = videoOptions.thumbnail;
        }
        else {
            player.posterSrc = "";
        }

        if (videoOptions.source) {
            player.attributionSrc = videoOptions.source;
        }
        else {
            player.attributionSrc = "";
        }

        if (videoOptions.sourceImageUrl) {
            player.logoSrc = videoOptions.sourceImageUrl;
            Utilities.removeClass(player._topBarLogo, "platformHide");
        }
        else {
            player.logoSrc = "";
        }

        if (videoOptions.title) {
            player.titleSrc = player._replaceHTMLEncodedChars(videoOptions.title);
        }
        else {
            player.titleSrc = "";
        }

        if (videoOptions.videoSource) {
            player.src = videoOptions.videoSource;
        }
        else {
            player.titleSrc = "";
        }
    },

})
    });

    WinJS.Class.mix(BingApps.UI.MediaAppControls.MediaPlayback,
        BingApps.Utilities.DOMEventMixinWithBubbling,
        WinJS.Utilities.createEventProperties("videoplay"),
        WinJS.Utilities.createEventProperties("videoerror"),
        WinJS.Utilities.createEventProperties("videofullscreentoggle"));

    // Helpers extending animations.js's animations to suit our needs (intervals, and static key frame cssrule)
    Animation.snapHorizontal = function (target, posX, callback) {
        var transitionEnd = function () {
            target.removeEventListener("MSTransitionEnd", transitionEnd, false);
            target.style.msTransitionProperty = "";
            target.style.msTransitionDelay = "";
            target.style.msTransitionDuration = "";
            target.style.msTransitionTimingFunction = "";
            if (callback) {
                callback();
            }
        };
        target.addEventListener("MSTransitionEnd", transitionEnd, false);
        target.style.msTransitionProperty = "-ms-transform";
        target.style.msTransitionDelay = "0ms";
        target.style.msTransitionDuration = "300ms";
        target.style.msTransitionTimingFunction = "ease-in-out";
        target.style.msTransform = "translate(" + posX + "px,0px)";
    };

    Utilities.waitOnce = function (target, eventName) {
        return new WinJS.Promise(function (complete) {
            var eventHandler = function () {
                target.removeEventListener(eventName, eventHandler, false);
                complete();
            };
            target.addEventListener(eventName, eventHandler, false);
        });
    };

    Utilities.addRemovableEventListener = function (object, eventName, eventHandler, capture) {
        /// <param name="capture" optional="true"/>
        if (!object) {
            return;
        }

        if (!object.events) {
            object.events = {};
        }

        if (object.events[eventName]) {
            Utilities.removeEventListener(object, eventName, capture);
        }

        object.events[eventName] = eventHandler;
        if (object.addEventListener) {
            object.addEventListener(eventName, eventHandler, capture);
        } else {
            if (object.addListener) {
                object.addListener(eventName, eventHandler);
            }
        }
    };

    Utilities.removeEventListener = function (object, eventName, capture) {
        /// <param name="capture" optional="true"/>
        if ((!object) || (!object.events)) {
            return;
        }

        var eventHandler = object.events[eventName];
        if (eventHandler) {
            if (object.removeEventListener) {
                object.removeEventListener(eventName, eventHandler, capture);
            } else {
                if (object.removeListener) {
                    object.removeListener(eventName, eventHandler);
                }
            }
            object.events[eventName] = null;
        }
    };
})(WinJS);


(function appexCommonControlsMediaAppControlsInit(WinJS) {
    "use strict";

    var Animation = WinJS.UI.Animation;
    var Utilities = WinJS.Utilities;
    var Promise = WinJS.Promise;

    var MediaAppControls = WinJS.Namespace.define("BingApps.UI.MediaAppControls", {
        MediaContentType: {
            VideoContent: "videoContent",
        },

        //after video complete, Video Control will set state back to InitialState
        MediaSequencerStates: {
            InitialState: "InitialState",
            ContentPlayback_Playing: "ContentPlayback_Playing",
            ContentPlayback_Paused: "ContentPlayback_Paused",
        },

        VideoPlaybackEvents: {
            PlayStart: "PLAY_START",
            PlayEnd: "PLAY_END",
            PlayContinue: "PLAY_CONTINUE"
        },

        MediaSequencer: WinJS.Class.define(function (mediaPlayer) {
            this._mediaPlayer = mediaPlayer;
            this._contentVideoElement = mediaPlayer._currentMediaElement;
            this._currentState = BingApps.UI.MediaAppControls.MediaSequencerStates.InitialState;
        },
        {
            _contentVideoObject: null,
            _isAdElementVisible: false,

            // Private methods
            _assignContentVideo: function (contentObject) {
                this._contentVideoObject = contentObject;
                this._currentState = BingApps.UI.MediaAppControls.MediaSequencerStates.InitialState;
                this._mediaPlayer._assignContentVideo(contentObject);
            },

            _fireVideoPlayEvents: function (pingType) {
                var currentVideoObject, currentVideoTime;

                switch (this._currentState) {
                    case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Playing:
                    case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Paused:
                        currentVideoObject = this._contentVideoObject;
                        currentVideoTime = this._contentVideoElement.currentTime;
                        break;

                    case BingApps.UI.MediaAppControls.MediaSequencerStates.InitialState:
                        break;
                    default:
                        break;
                }

                switch (pingType) {
                    case BingApps.UI.MediaAppControls.VideoPlaybackEvents.PlayStart:
                        //reset all instumentaion states at start
                        if (this._mediaPlayer._currentMediaElement.src.indexOf(this._mediaPlayer._resetVidSrc) >= 0) {
                            this._mediaPlayer.videoStartDone = true;
                            this._mediaPlayer.video25Done = true;
                            this._mediaPlayer.video50Done = true;
                            this._mediaPlayer.video75Done = true;
                            this._mediaPlayer.videoCompleteDone = true;
                        }
                        else {
                            this._mediaPlayer.videoStartDone = false;
                            this._mediaPlayer.video25Done = false;
                            this._mediaPlayer.video50Done = false;
                            this._mediaPlayer.video75Done = false;
                            this._mediaPlayer.videoCompleteDone = false;
                        }

                        this._mediaPlayer.video25Time = this.Duration * 0.25;
                        this._mediaPlayer.video50Time = this.Duration * 0.50;
                        this._mediaPlayer.video75Time = this.Duration * 0.75;

                        //fire start event
                        if (!this._mediaPlayer.videoStartDone) {
                            this._mediaPlayer._fireVideoPlay(0);
                            this._mediaPlayer.videoStartDone = true;
                        }
                        break;

                    case BingApps.UI.MediaAppControls.VideoPlaybackEvents.PlayEnd:
                        //fire completion event
                        if (!this._mediaPlayer.videoCompleteDone) {
                            this._mediaPlayer._fireVideoPlay(100);
                            this._mediaPlayer.videoCompleteDone = true;
                        }
                        break;

                    case BingApps.UI.MediaAppControls.VideoPlaybackEvents.PlayContinue:
                        //fire playing events
                        if (this._mediaPlayer.video25Time && (this.CurrentTime > this._mediaPlayer.video25Time) && !this._mediaPlayer.video25Done) {
                            this._mediaPlayer.video25Done = true;
                            this._mediaPlayer._fireVideoPlay(25);
                        }
                        if (this._mediaPlayer.video50Time && (this.CurrentTime > this._mediaPlayer.video50Time) && !this._mediaPlayer.video50Done) {
                            this._mediaPlayer.video50Done = true;
                            this._mediaPlayer._fireVideoPlay(50);
                        }
                        if (this._mediaPlayer.video75Time && (this.CurrentTime > this._mediaPlayer.video75Time) && !this._mediaPlayer.video75Done) {
                            this._mediaPlayer.video75Done = true;
                            this._mediaPlayer._fireVideoPlay(75);
                        }

                        break;
                }
            },

            _updateScrubber: function (videoObject) {

                if (videoObject) {
                    if (videoObject.CanScrubVideo) {
                        this._mediaPlayer._enableScrubbing();
                    } else {
                        this._mediaPlayer._disableScrubbing();
                    }
                }
            },

            // Event handlers - update the sequencer state and call the media playback
            // object's event handler. 

            _onEnded: function (event) {
                this._fireVideoPlayEvents(BingApps.UI.MediaAppControls.VideoPlaybackEvents.PlayEnd);

                switch (this._currentState) {
                    // Content completed: reset state to not require another preroll
                    case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Playing:
                        //in order to trigger onplaying event(which will set the _currentState correctly) when playing the video again after ending, 
                        //we have to explicitly call the system pause() before we call system play().
                        //this.Pause() only works when _currentState === playing, so we need first call it and then reset _currentState.
                        this.Pause();
                        this._currentState = BingApps.UI.MediaAppControls.MediaSequencerStates.InitialState;

                        this._mediaPlayer._onEnded(event);
                        break;

                    default:
                        break;
                }
            },

            _onError: function (event) {
                this._mediaPlayer._onError(event);
            },


            _setPausedState: function () {

                switch (this._currentState) {
                    case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Playing:
                        this._currentState = BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Paused;
                        break;
                }
            },


            _onEnteredFullScreen: function (event) {
                if (event.detail && (event.detail.winControl !== this._mediaPlayer)) {
                    return;
                }

                this._setPausedState();
                this._mediaPlayer._onEnteredFullScreen();
            },


            _onExitedFullScreen: function (event) {
                if (event.detail && (event.detail.winControl !== this._mediaPlayer)) {
                    return;
                }

                this._setPausedState();
                this._mediaPlayer._onExitedFullScreen();
            },


            _onMetaDataLoaded: function (event) {
                // The ad may have loaded when the content errored out - we're not
                // ready to play yet.
                if (!this._contentVideoObject) {
                    return;
                }

                this._updateScrubber(this._contentVideoObject);

                this._mediaPlayer._onReadyForInteraction();
                this._mediaPlayer._onMetaDataLoaded(event);
            },


            _onPause: function (event) {
                switch (this._currentState) {
                    case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Playing:
                        this._currentState = BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Paused;
                        break;

                    default:
                        break;
                }

                this._mediaPlayer._onPause(event);
            },


            _onPlaying: function (event) {

                var videoObject;
                var videoDuration;

                switch (this._currentState) {
                    case BingApps.UI.MediaAppControls.MediaSequencerStates.InitialState:
                    case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Paused:
                        this._currentState = BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Playing;

                        var contentElement = this._contentVideoElement;
                        videoObject = this._contentVideoObject;
                        videoDuration = contentElement.duration;

                        break;

                    default:
                        break;
                }

                this._fireVideoPlayEvents(BingApps.UI.MediaAppControls.VideoPlaybackEvents.PlayStart);

                this._updateScrubber(videoObject);
                this._mediaPlayer._onPlaying(event);

                this._mediaPlayer._showPauseButton();
                this._mediaPlayer._showControls();

                //See bug 337079, enable interaction once video starts playing, instead of metadata loaded
                if (!this._mediaPlayer._onPlayingEventFired) {
                    this._mediaPlayer._onPlayingEventFired = true;
                    this._mediaPlayer._thumbElement.focus(); //focus set to thumbElement (invisible) by default

                } else {
                    //keyboard access for setting focus to backbutton/playbutton
                    if (document.activeElement === this._mediaPlayer._fullScreenToggleButton || (document.activeElement && document.activeElement.children &&
                        document.activeElement.children[0] && document.activeElement.children[0] === this._mediaPlayer._fullScreenToggleButton)) {
                        this._mediaPlayer._fullScreenToggleButton.focus();
                    } else {
                        this._mediaPlayer._thumbElement.focus();
                    }
                }
            },

            _onPosterLoad: function (event) {
                this._mediaPlayer._onPosterLoad(event);
            },

            _onRateChange: function (event) {
                this._mediaPlayer._onRateChange(event);
            },

            _onSeeked: function (event) {
                this._mediaPlayer._onSeeked(event);
            },


            _onTimeUpdate: function (event) {
                this._mediaPlayer._onTimeUpdate(event);
                this._fireVideoPlayEvents(BingApps.UI.MediaAppControls.VideoPlaybackEvents.PlayContinue);
            },

            // Public methods
            AddContent: function (contentObject) {
                switch (contentObject.ContentType) {
                    case BingApps.UI.MediaAppControls.MediaContentType.VideoContent:
                        this._assignContentVideo(contentObject);
                        break;
                    default:
                        break;
                }
            },

            CurrentTime: {
                get: function () {
                    var videoElement;

                    switch (this._currentState) {
                        case BingApps.UI.MediaAppControls.MediaSequencerStates.InitialState:
                        case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Paused:
                        case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Playing:
                            videoElement = this._contentVideoElement;
                            break;
                    }

                    if (videoElement) {
                        return videoElement.currentTime;
                    } else {
                        return 0;
                    }
                },
                set: function (newTime) {
                    var videoElement;

                    switch (this._currentState) {
                        case BingApps.UI.MediaAppControls.MediaSequencerStates.InitialState:
                        case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Paused:
                        case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Playing:
                            videoElement = this._contentVideoElement;
                            break;
                    }

                    if (videoElement) {
                        videoElement.currentTime = newTime;
                    }
                },
            },

            Duration: {
                get: function () {
                    var videoElement;

                    switch (this._currentState) {
                        case BingApps.UI.MediaAppControls.MediaSequencerStates.InitialState:
                        case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Paused:
                        case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Playing:
                            videoElement = this._contentVideoElement;
                            break;
                    }

                    if (videoElement) {
                        return videoElement.duration;
                    } else {
                        return 0;
                    }
                },
            },

            HasEnded: function () {
                return ((this._currentState === BingApps.UI.MediaAppControls.MediaSequencerStates.InitialState) && this._contentVideoElement.ended);
            },

            IsPaused: function () {
                switch (this._currentState) {
                    case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Playing:
                        return false;
                }

                return true;
            },

            Pause: function () {
                switch (this._currentState) {
                    // Play Content
                    case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Playing:
                        this._contentVideoElement.pause();
                        break;

                    default:
                        break;
                }
            },

            Play: function () {

                var videoObject, videoDuration;
                var mediaPlayer = this._mediaPlayer;

                /// <disable>JS2051.DoNotFallThroughInSwitchStatements</disable>
                switch (this._currentState) {
                    case BingApps.UI.MediaAppControls.MediaSequencerStates.InitialState:
                        if (this._contentVideoElement.ended) {
                            this._contentVideoElement.pause();
                            this._contentVideoElement.currentTime = 0;
                        }

                        mediaPlayer._showContentVideoElement();

                        // Fall through - start playing the content

                    case BingApps.UI.MediaAppControls.MediaSequencerStates.ContentPlayback_Paused:
                        this._contentVideoElement.play();
                        break;

                    default:
                        break;
                }
                /// <enable>JS2051.DoNotFallThroughInSwitchStatements</enable>
            },

            Reset: function () {
                this._currentState = BingApps.UI.MediaAppControls.MediaSequencerStates.InitialState;
                this._contentVideoObject = null;
            },
        })
    });
})(WinJS);
/********************************************************
* *
* � Microsoft. All rights reserved. *
* *
*********************************************************/
(function appexPlatformControlsVideoWrapperInit() {
    "use strict";

    var NS = WinJS.Namespace.define("BingApps.UI",
    {
        /// <summary>
        /// videoWrapper control
        /// when user click, replace with a global inlineplayback video element
        /// </summary>
        VideoWrapper: WinJS.Class.define(function VideoWrapper_ctor(element, options) {
            element.winControl = this;
            this._element = element;

            if (options) {
                if (options.fullscreenOnly === true || options.fullscreenOnly === false) {
                    this.fullscreenOnly = options.fullscreenOnly;
                }
                if (options.enableContinuousPlayback === true || options.enableContinuousPlayback === false) {
                    this.enableContinuousPlayback = options.enableContinuousPlayback;
                }
                if (!isNaN(options.countdownForNextVideo)) {
                    this.countdownForNextVideo = options.countdownForNextVideo;
                }
                if (options.videoList) {
                    this.videoList = options.videoList;
                }
                this.currentIndex = options.currentIndex;

                if (options.subElement) {
                    this._subElement = options.subElement;
                }
                else{
                    this._subElement = this._defaultSubElement();
                }
                this._element.appendChild(this._subElement);
            }

            this._clickBinding = this._onClick.bind(this);
            this._keyUpBinding = this._onKeyUp.bind(this);

            this._element.addEventListener("click", this._clickBinding);
            this._element.addEventListener("keyup", this._keyUpBinding);
        }, {
            // PRIVATE

            _element: null,

            _subElement: null,

            _currentIndex: 0,

            _fullscreenOnly: true,

            _videoList: [],

            _clickBinding: null,

            _keyUpBinding: null,

            _enableContinuousVideoPlayback: true,
            
            _countdownForNextVideo: 5,
            
            _isVideoPlaying: false,

            _onClick: function (e) {
                //currently, if we do not mannually setAttribute("data-disableclick", true) in VideoWrapper,
                //the default click handler will still be triggerred
                var evt = e ? e : window.event;
                if (evt.stopPropagation) {
                    evt.stopPropagation();
                }
                if (evt.cancelBubble !== null) {
                    evt.cancelBubble = true;
                }

                this._launchVideo(false);
            },

            _onKeyUp: function (event) {
                var keyCode = event.keyCode;

                if (WinJS.Utilities.Key.enter === keyCode || WinJS.Utilities.Key.space === keyCode) {
                    this._launchVideo(false);
                }
            },

            _launchVideo: function (reload) {
                if (this._fullscreenOnly) {
                    BingApps.UI.MediaAppControls.MediaPlayback.fullscreenPlayback(this._element, this._currentIndex, this._videoList);
                }
                else {
                    BingApps.UI.MediaAppControls.MediaPlayback.inlinePlayback(this._element, this._currentIndex, this._videoList, reload);
                }
                this._isVideoPlaying = true;
            },

            _defaultSubElement: function () {
                var defaultSubElement = document.createElement("div");
                defaultSubElement.className = "defaultSubElementContainer";
                var playIconElement = document.createElement("div");
                playIconElement.classList.add("win-commandring");
                playIconElement.classList.add("win-commandicon");
                playIconElement.classList.add("iconPlay");
                defaultSubElement.appendChild(playIconElement);
                return defaultSubElement;
            },

            /// <field type="HTMLElement" domElement="true" locid="BingApps.UI.VideoWrapper.element" helpKeyword="BingApps.UI.VideoWrapper.element">
            /// Gets the DOM element that hosts the VideoWrapper.
            /// </field>
            element: {
                get: function () {
                    return this._element;
                }
            },

            /// <field type="HTMLElement" domElement="true" locid="BingApps.UI.VideoWrapper.subElement" helpKeyword="BingApps.UI.VideoWrapper.subElement">
            /// Gets the child DOM element of the VideoWrapper that is shown when video is not playing.
            /// </field>
            subElement: {
                get: function () {
                    return this._subElement;
                }
            },

            /// <field type="Number" integer="true" locid="BingApps.UI.VideoWrapper.currentIndex" helpKeyword="BingApps.UI.VideoWrapper.currentIndex">
            /// Gets or sets the index of the video in the videoList to be played.
            /// </field>
            currentIndex: {
                get: function () {
                    return this._currentIndex;
                },
                set: function (newCurrentIndex) {
                    if (this._videoList && (newCurrentIndex < this.videoList.length)) {
                        this._currentIndex = newCurrentIndex;
                        if (this._isVideoPlaying) {
                            this.reload();
                        }
                    }
                }
            },

            /// <field type="Boolean" default="true" locid="BingApps.UI.VideoWrapper.fullscreenOnly" helpKeyword="BingApps.UI.VideoWrapper.fullscreenOnly">
            /// Gets or sets if the video should be played in fullscreen only.
            /// </field>
            fullscreenOnly: {
                get: function () {
                    return this._fullscreenOnly;
                },
                set: function (newFullscreenOnly) {
                    this._fullscreenOnly = newFullscreenOnly;
                }
            },

            /// <field type="Boolean" default="true" locid="BingApps.UI.VideoWrapper.enableContinuousPlayback" helpKeyword="BingApps.UI.VideoWrapper.enableContinuousPlayback">
            /// Gets or sets if the next video should be automatically played.
            /// </field>
            enableContinuousPlayback: {
                get: function () {
                    return this._enableContinuousVideoPlayback;
                },
                set: function (newEnableContinuousPlayback) {
                    if (this._fullscreenOnly) {
                        BingApps.UI.MediaAppControls.MediaPlayback.instance._enableContinuousVideoPlayback = newEnableContinuousPlayback;
                    }
                    else {
                        BingApps.UI.MediaAppControls.MediaPlayback.inlineInstance._enableContinuousVideoPlayback = newEnableContinuousPlayback;
                    }
                    this._enableContinuousVideoPlayback = newEnableContinuousPlayback;
                }
            },

            /// <field type="Number" integer="true" locid="BingApps.UI.VideoWrapper.countdownForNextVideo" helpKeyword="BingApps.UI.VideoWrapper.countdownForNextVideo">
            /// Gets or sets the number of seconds to wait before playing next video.
            /// </field>
            countdownForNextVideo: {
                get: function () {
                    return this._countdownForNextVideo;
                },
                set: function (newCountdownForNextVideo) {
                    if (this._fullscreenOnly) {
                        BingApps.UI.MediaAppControls.MediaPlayback.instance._countdownForNextVideo = newCountdownForNextVideo;
                    }
                    else {
                        BingApps.UI.MediaAppControls.MediaPlayback.inlineInstance._countdownForNextVideo = newCountdownForNextVideo;
                    }
                    this._countdownForNextVideo = newCountdownForNextVideo;
                }
            },

            /// <field type="List" locid="BingApps.UI.VideoWrapper.videoList" helpKeyword="BingApps.UI.VideoWrapper.videoList">
            /// Gets or sets the list of videos being played.
            /// </field>
            videoList: {
                get: function () {
                    return this._videoList;
                },
                set: function (newVideoList) {
                    this._videoList = newVideoList;
                }
            },

            /// <field type="Number" locid="BingApps.UI.VideoWrapper.numVideos" helpKeyword="BingApps.UI.VideoWrapper.numVideos">
            /// Gets number of videos in the list.
            /// </field>
            numVideos: {
                get: function () {
                    return this._videoList.length;
                }
            },

            /// <signature helpKeyword="BingApps.UI.VideoWrapper.reload">
            /// <summary locid="BingApps.UI.VideoWrapper.reload">
            /// Reloads the current video and starts playing from beginning.
            /// </summary>
            /// </signature>
            reload: function () {
                this._launchVideo(this._isVideoPlaying);
            },

            /// <signature helpKeyword="BingApps.UI.VideoWrapper.play">
            /// <summary locid="BingApps.UI.VideoWrapper.play">
            /// Plays the current video if paused.
            /// </summary>
            /// </signature>
            play: function () {
                if (!this._isVideoPlaying) {
                    this.reload();
                    return;
                }
                if (this._fullscreenOnly) {
                    BingApps.UI.MediaAppControls.MediaPlayback.instance.play();
                }
                else {
                    BingApps.UI.MediaAppControls.MediaPlayback.inlineInstance.play();
                }
            },

            /// <signature helpKeyword="BingApps.UI.VideoWrapper.pause">
            /// <summary locid="BingApps.UI.VideoWrapper.pause">
            /// Pauses the current video if playing.
            /// </summary>
            /// </signature>
            pause: function () {
                if (!this._isVideoPlaying) {
                    return;
                }
                if (this._fullscreenOnly) {
                    BingApps.UI.MediaAppControls.MediaPlayback.instance.pause();
                }
                else {
                    BingApps.UI.MediaAppControls.MediaPlayback.inlineInstance.pause();
                }
            },

            /// <signature helpKeyword="BingApps.UI.VideoWrapper.toggleScreenSize">
            /// <summary locid="BingApps.UI.VideoWrapper.toggleScreenSize">
            /// Toggles screen size between 100% and 50%;
            /// </summary>
            /// </signature>
            toggleScreenSize: function () {
                if (!this._isVideoPlaying) {
                    return;
                }
                if (this._fullscreenOnly) {
                    BingApps.UI.MediaAppControls.MediaPlayback.instance._toggleScreenSize();
                }
                else {
                    BingApps.UI.MediaAppControls.MediaPlayback.inlineInstance._toggleScreenSize();
                }
            },

            /// <signature helpKeyword="BingApps.UI.VideoWrapper.toggleFullscreen">
            /// <summary locid="BingApps.UI.VideoWrapper.toggleFullscreen">
            /// Toggles between fullscreen and inline mode.
            /// </summary>
            /// </signature>
            toggleFullscreen: function () {
                if (!this._isVideoPlaying) {
                    return;
                }
                if (this._fullscreenOnly) {
                    return;
                }
                else {
                    BingApps.UI.MediaAppControls.MediaPlayback.inlineInstance._toggleFullScreen();
                }
            },

            /// <signature helpKeyword="BingApps.UI.VideoWrapper.dispose">
            /// <summary locid="BingApps.UI.VideoWrapper.dispose">
            /// Disposes the control.
            /// </summary>
            /// </signature>
            dispose: function () {
                this._element.removeEventListener("click", this._clickBinding);
                this._element.removeEventListener("keyup", this._keyUpBinding);
            }
        })
    });
})();
(function appexPlatformControlsFullScreenInit() {
    "use strict";

    var FullScreenImpl = WinJS.Class.mix(WinJS.Class.define(
            function fullScreenImpl_ctor() {

                // Ensure there is only one full screen element per page. 
                this._element = document.getElementById("fullScreenContainer");

                if (!this._element) {
                    this._element = document.createElement("div");
                    WinJS.Utilities.addClass(this._element, "platformFullScreenContainer");
                    this._element.id = "fullScreenContainer";

                    var fsContainerElement = document.body;

                    fsContainerElement.appendChild(this._element);
                    this._element.winControl = this;

                    var that = this;
                    //do not directly leave fullscreen, wait for user to cleanup (e.g. adControl cleanup) and manually exit
                    //WinJS.Navigation.addEventListener("navigating", function fullScreenImpl_onNavigating() { that.onNavigating(); });
                }
            },
            {
                _fullScreenContentElement: null,

                canEnterFullScreen: function () {
                    return !this._fullScreenContentElement;
                },

                tryEnterFullScreen: function (fullScreenContentElement) {
                    if (this._fullScreenContentElement) {
                        return false;
                    }

                    this._fullScreenContentElement = fullScreenContentElement;
                    fullScreenContentElement.inlineParentElement = fullScreenContentElement.parentElement;
                    fullScreenContentElement.parentElement.removeChild(fullScreenContentElement);
                    this._element.appendChild(fullScreenContentElement);

                    this._element.style.display = "block";

                    this.dispatchEvent("FullScreenEnter", this._fullScreenContentElement);
                    WinJS.UI.Animation.fadeIn(this._fullScreenContentElement);
                    return true;
                },

                tryLeaveFullScreen: function () {
                    if (!this._fullScreenContentElement) {
                        return false;
                    }

                    var that = this;
                    WinJS.UI.Animation.fadeOut(this._fullScreenContentElement).done(function afterFullScreenFadeOut() {
                        //When navigating back at the same time as video ends, we call tryLeaveFullScreen for twice
                        //the first done promise will set _fullScreenContentElement = null,
                        //thus, we need check null here for the following done promise
                        if (that._fullScreenContentElement) {
                            that._element.removeChild(that._fullScreenContentElement);

                            that._fullScreenContentElement.inlineParentElement.appendChild(that._fullScreenContentElement);
                            that._fullScreenContentElement.inlineParentElement = null;

                            var eventProperties = that._fullScreenContentElement;
                            that._element.style.display = "none";
                            that._fullScreenContentElement = null;

                            that.dispatchEvent("FullScreenExit", eventProperties);
                        }
                    });
                    return true;
                },

            }
        ),
        WinJS.Utilities.eventMixin);

    var _instance = null;

    WinJS.Namespace.define("BingApps.UI", {
        FullScreen: {
            get: function () {
                if (!_instance) {
                    _instance = new FullScreenImpl();
                }

                return _instance;
            }
        }
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/


(function () {
    "use strict";
    var News = WinJS.Namespace.define("BingApps.UI",
    {
        LayoutGenerator: WinJS.Class.define(function (options) {
            // ctor
            this._options = options;
            this._layout = {
                itemList: [],
                adList: []
            };
            var rowCount = this._layout.rowCount = this._rowCount = Math.floor(options.screenHeight / BingApps.UI.LayoutGenerator.RowHeight);
            this._minColumnWidth = options.unitWidth;
            this._minRowHeight = options.unitHeight;

            this._setupRules();
            if (rowCount > 0) {
                this._cells = [];
                for (var i = 0; i < rowCount; i++) {
                    var cell = {
                        row: i,
                        column: 0,
                        width: 0,
                        height: 0,
                        isAvailable: true,
                        isMargin: false
                    };
                    this._cells.push([cell]);
                }
                this._currentExpandCell = null;
                this._nextExpandCell = this._cells[0][0];
                this._stopArranging = false;
            }
        },
        {
            // declare null aliases for auto-complete to work
            _options: null,
            _rowCount: null,
            _layout: null,
            _minColumnWidth: null,
            _minRowHeight: null,
            _cells: null,
            _currentExpandCell: null,
            _nextExpandCell: null,
            _stopArranging: null,
            _rulesList: null,
            _ruleExecutorList: null,
            _columnCount: 0,
            _marginCount: 0,
            _subclusterAdCount: 0,
            _lastMargin: 0,

            generateLayout: function (templateData) {
                if (this._rowCount > 0) {
                    for (var i = 0, leni = templateData.length; i < leni; i++) {
                        if (this._stopArranging || !templateData[i]) {
                            this._layout.itemList.push(null);
                        }
                        else {
                            this._arrangeItem(templateData[i], i);
                        }
                    }
                }
                this._layout.columnCount = this._columnCount;
                this._enrichItemLayoutInfo();
                return this._layout;
            },
            _enrichItemLayoutInfo: function () {
                for (var i = 0, leni = this._layout.itemList.length; i < leni; i++) {
                    var item = this._layout.itemList[i];
                    if (item) {
                        this._checkBottomRow(item);
                        this._checkTopRow(item);
                        this._checkLeftColumn(item);
                        this._checkRightColumn(item);
                    }
                }
            },
            _checkTopRow: function (item) {
                if (item.row === 1) {
                    item.clusterLocation += " topRow";
                }
            },
            _checkBottomRow: function (item) {
                var cells = this._cells;
                if (cells.length > 0) {
                    var newY = item.row + item.rowSpan - 1;
                    if (newY >= cells.length) {
                        item.clusterLocation += " bottomRow";
                        return;
                    }
                    var c = cells[newY][item.column];
                    if (c && c.isAvailable) {
                        item.clusterLocation += " bottomRow";
                        return;
                    }
                }
            },
            _checkLeftColumn: function (item) {
                if (item.column === 1) {
                    item.clusterLocation += " leftColumn";
                    return;
                }
                var cells = this._cells;
                if (cells.length > 0) {
                    var newX = item.column - 3;
                    var c = cells[item.row][newX];
                    if (c && (c.isAvailable || c.isMargin)) {
                        item.clusterLocation += " leftColumn";
                        return;
                    }
                }
            },
            _checkRightColumn: function (item) {
                var cells = this._cells;
                if (cells.length > 0) {
                    var newX = item.column + item.columnSpan;
                    if (newX >= cells[0].length) {
                        item.clusterLocation += " rightColumn";
                        return;
                    }
                    var c = cells[item.row][newX];
                    if (c && (c.isAvailable || c.isMargin)) {
                        item.clusterLocation += " rightColumn";
                        return;
                    }
                }
            },
            _arrangeItem: function (templateList, itemIndex) {
                if (this._options.marginDistance && this._options.marginWidth) {
                    var c = this._getNextAvailableCellRange();
                    if (this._nextExpandCell.column - this._lastMargin >= this._options.marginDistance && this._options.marginWidth > 2 && c.row === 0) {
                        this._marginCount++;
                        this._tryCreateSubclusterAd();
                        var margin = {
                            row: 0,
                            column: this._nextExpandCell.column,
                            width: 0,
                            height: 0,
                            isAvailable: true,
                            isMargin: false
                        };
                        var templateInfo = {
                            classID: "Margin",
                            height: this._rowCount,
                            width: this._options.marginWidth - 2
                        };
                        this._updateCells(margin, templateInfo, true);
                        this._lastMargin = this._nextExpandCell.column;
                        this._clearRuleData({ height: 0, width: this._options.marginWidth }, margin);
                    }
                }

                var arranged = this._tryArrangeItem(templateList, itemIndex);

                if (!arranged && !this._stopArranging) {
                    var oldExpandCell = this._currentExpandCell;
                    this._currentExpandCell = this._nextExpandCell;
                    var addedSpace = false;
                    if (this._options.marginDistance && this._options.marginWidth && this._currentExpandCell && this._currentExpandCell.row === 0) {
                        if (this._currentExpandCell.column - this._lastMargin >= this._options.marginDistance && this._options.marginWidth > 2) {
                            this._marginCount++;
                            var addedAd = this._tryCreateSubclusterAd();
                            var column = addedAd ? this._nextExpandCell.column : this._currentExpandCell.column;
                            var margin2 = {
                                row: 0,
                                column: column,
                                width: 0,
                                height: 0,
                                isAvailable: true,
                                isMargin: false
                            };
                            var templateInfo2 = {
                                classID: "Margin",
                                height: this._rowCount,
                                width: this._options.marginWidth - 2
                            };
                            this._updateCells(margin2, templateInfo2, true);
                            this._lastMargin = this._currentExpandCell.column;
                            this._clearRuleData({ height: 0, width: this._options.marginWidth }, margin2);
                            addedSpace = true;
                        }
                    }

                    arranged = this._tryArrangeItem(templateList, itemIndex);
                    if (!arranged && !addedSpace) {
                        this._currentExpandCell = oldExpandCell;
                    }
                }
                if (!arranged) {
                    this._layout.itemList.push(null);
                }
            },
            _tryArrangeItem: function (templateList, itemIndex) {
                var arranged = false;

                var cellRange = this._getNextAvailableCellRange();

                if (cellRange && !this._stopArranging) {
                    var availableWidth = (cellRange.column === 0 ? cellRange.width : cellRange.width - BingApps.UI.LayoutGenerator.ColumnMargin);
                    var availableHeight = (cellRange.row === 0 ? cellRange.height : cellRange.height - BingApps.UI.LayoutGenerator.RowMargin);

                    var satisfiedList = [];

                    for (var i = 0, leni = templateList.length; i < leni; i++) {
                        var current = templateList[i];
                        if (current && current.height <= availableHeight && current.width <= availableWidth) {
                            var satisfiedRules = true;
                            for (var j = 0, lenj = this._ruleExecutorList.length; j < lenj; j++) {
                                var executor = this._ruleExecutorList[j];
                                satisfiedRules = satisfiedRules && this._adhereToRules(executor, current, cellRange);
                                if (!satisfiedRules) {
                                    break;
                                }
                            }
                            if (satisfiedRules) {
                                var weight = current.weight || 1;
                                for (var k = 0; k < weight; k++) {
                                    satisfiedList.push(current);
                                }
                            }
                        }
                    }

                    var chosen;
                    var itemLayout;
                    //HACK: Slideshow + Video leading item is the largest template
                    if (itemIndex === 0 && this._options.leadingItemIsLarge) {
                        chosen = this._tryArrangeLeadingItemIsLarge(satisfiedList);
                        if (chosen) {
                            arranged = true;
                            this._updateCells(cellRange, chosen, false);
                            itemLayout = {
                                classID: chosen.classID,
                                row: cellRange.row + 1 + (cellRange.row === 0 ? 0 : BingApps.UI.LayoutGenerator.RowMargin),
                                column: cellRange.column + 1 + (cellRange.column === 0 ? 0 : BingApps.UI.LayoutGenerator.ColumnMargin),
                                rowSpan: chosen.height,
                                columnSpan: chosen.width,
                                thumbnailModifier: chosen.thumbnailModifier,
                                clusterLocation: ""
                            };
                            this._layout.itemList.push(itemLayout);
                            this._updateRuleData(chosen, cellRange);

                            if (this._columnCount < chosen.width + cellRange.column) {
                                this._columnCount = chosen.width + cellRange.column;
                            }
                        }
                    }
                    else {
                        while (satisfiedList.length > 0) {
                            var index = Math.floor(Math.random() * satisfiedList.length);
                            chosen = satisfiedList[index];
                            if (chosen.lastResort) {
                                if (satisfiedList.length === 1) {
                                    arranged = true;
                                }
                            }
                            else {
                                arranged = true;
                            }
                            if (arranged) {
                                this._updateCells(cellRange, chosen, false);
                                itemLayout = {
                                    classID: chosen.classID,
                                    row: cellRange.row + 1 + (cellRange.row === 0 ? 0 : BingApps.UI.LayoutGenerator.RowMargin),
                                    column: cellRange.column + 1 + (cellRange.column === 0 ? 0 : BingApps.UI.LayoutGenerator.ColumnMargin),
                                    rowSpan: chosen.height,
                                    columnSpan: chosen.width,
                                    thumbnailModifier: chosen.thumbnailModifier,
                                    clusterLocation: ""
                                };
                                this._layout.itemList.push(itemLayout);
                                this._updateRuleData(chosen, cellRange);
                                if (this._columnCount < chosen.width + cellRange.column) {
                                    this._columnCount = chosen.width + cellRange.column;
                                }
                                break;
                            }
                            else {
                                satisfiedList.splice(index, 1);
                            }
                        }
                    }
                }

                return arranged;
            },
            _tryArrangeLeadingItemIsLarge: function (satisfiedList) {
                var chosen;
                var currentLargestArea = 0;
                for (var i = 0, leni = satisfiedList.length; i < leni; i++) {
                    var item = satisfiedList[i];
                    var area = item.width * item.height;
                    if (area > currentLargestArea) {
                        chosen = item;
                        currentLargestArea = area;
                    }
                }
                return chosen;
            },
            _updateCells: function (cellRange, templateInfo, isMargin) {
                var row = cellRange.row;
                var column = cellRange.column;
                var cell = this._cells[row][column];
                var width = templateInfo.width;
                var height = templateInfo.height;
                var leni, lenj, i, j;

                if (this._cellsAreEqual(cell, this._nextExpandCell)) {
                    this._currentExpandCell = this._nextExpandCell;
                    leni = this._rowCount;
                    lenj = this._currentExpandCell.column + width + 1 + (column === 0 ? 0 : BingApps.UI.LayoutGenerator.ColumnMargin);
                    var startColumn = this._currentExpandCell.column + 1;
                    for (i = 0; i < leni; i++) {
                        for (j = startColumn; j < lenj; j++) {
                            var newCell = {
                                row: i,
                                column: j,
                                width: 0,
                                height: 0,
                                isAvailable: true,
                                isMargin: false
                            };
                            this._cells[i].push(newCell);
                        }
                    }

                    this._nextExpandCell = this._cells[0][this._currentExpandCell.column + width + (column === 0 ? 0 : BingApps.UI.LayoutGenerator.ColumnMargin)];
                }

                leni = (row === 0 ? row + height : row + height + BingApps.UI.LayoutGenerator.RowMargin);
                lenj = (column === 0 ? column + width : column + width + BingApps.UI.LayoutGenerator.ColumnMargin);

                for (i = row; i < leni; i++) {
                    for (j = column; j < lenj; j++) {
                        this._cells[i][j].isAvailable = false;
                        this._cells[i][j].width = width;
                        this._cells[i][j].height = height;
                        this._cells[i][j].isMargin = isMargin;
                    }
                }
            },
            _getNextAvailableCellRange: function () {
                var nextCell = null;
                var cellRange = null;
                var i, j;
                if (this._currentExpandCell) {
                    for (i = 0; i < this._rowCount; i++) {
                        for (j = this._currentExpandCell.column; j < this._nextExpandCell.column; j++) {
                            var cell = this._cells[i][j];
                            if (cell.isAvailable) {
                                nextCell = cell;
                                break;
                            }
                        }

                        if (nextCell) {
                            break;
                        }
                    }
                }

                if (nextCell) {
                    var width = 0;
                    var cellRow = this._cells[nextCell.row];
                    var previousRow = this._cells[nextCell.row - 1];

                    for (i = nextCell.column; i < this._nextExpandCell.column; i++) {
                        if (cellRow[i].isAvailable && !previousRow[i].isAvailable) {
                            width++;
                        }
                        else {
                            break;
                        }
                    }

                    var height = this._rowCount - nextCell.row;

                    cellRange = {
                        row: nextCell.row,
                        column: nextCell.column,
                        width: width,
                        height: height,
                        isAvailable: true,
                        isMargin: false
                    };
                }
                else if (this._nextExpandCell) {
                    var availableWidth = this._options.maxWidth ? this._options.maxWidth - this._nextExpandCell.column : Number.MAX_VALUE;
                    if (availableWidth <= 0) {
                        this._stopArranging = true;
                    }
                    cellRange = {
                        row: 0,
                        column: this._nextExpandCell.column,
                        width: availableWidth,
                        height: this._rowCount,
                        isAvailable: true,
                        isMargin: false
                    };
                }

                return cellRange;
            },
            _tryCreateSubclusterAd: function () {
                var options = this._options;
                if (options.subclusterAdFrequency) {
                    if ((this._marginCount % options.subclusterAdFrequency) === 0) {
                        if (options.subclusterAdMax) {
                            if (this.subclusterAdCount < options.subclusterAdMax) {
                                this._createSubclusterAd();
                                return true;
                            }
                        }
                        else {
                            this._createSubclusterAd();
                            return true;
                        }
                    }
                }
                return false;
            },
            _createSubclusterAd: function () {
                if (this._options.maxWidth) {
                    this._options.maxWidth += 31;
                }
                var ad = {
                    row: 0,
                    column: this._nextExpandCell.column,
                    width: 0,
                    height: 0,
                    isAvailable: true,
                    isMargin: false
                };
                var itemLayout = {
                    classID: "SubclusterAd",
                    row: 1,
                    column: this._nextExpandCell.column + 1 + (this._nextExpandCell.column === 0 ? 0 : BingApps.UI.LayoutGenerator.ColumnMargin),
                    rowSpan: this._rowCount,
                    columnSpan: 30,
                    thumbnailModifier: "",
                    clusterLocation: ""
                };
                var templateInfo = {
                    classID: "Ad",
                    height: this._rowCount,
                    width: 30
                };
                this._layout.adList.push(itemLayout);
                this._updateCells(ad, templateInfo, true);
                if (this._columnCount < 30 + ad.column) {
                    this._columnCount = 30 + ad.column;
                }
                this._subclusterAdCount++;
            },
            _setupRules: function () {
                var rules = this._rulesList = this._options.rulesList;
                this._ruleExecutorList = [];
                for (var i = 0, leni = rules.length; i < leni; i++) {
                    var rule = rules[i];
                    var executor = this._createRuleExecutor(rule);
                    if (executor) {
                        this._ruleExecutorList.push(executor);
                    }
                }
            },
            _clearRuleData: function (templateInfo, cellRange) {
                for (var i = 0, leni = this._ruleExecutorList.length; i < leni; i++) {
                    var executor = this._ruleExecutorList[i];
                    this._clearIndividualRuleData(executor, templateInfo, cellRange);
                }
            },
            _updateRuleData: function (templateInfo, cellRange) {
                for (var i = 0, leni = this._ruleExecutorList.length; i < leni; i++) {
                    var executor = this._ruleExecutorList[i];
                    this._updateIndividualRuleData(executor, templateInfo, cellRange);
                }
            },
            _createRuleExecutor: function (rule) {
                if (!rule) {
                    return null;
                }
                switch (rule.type) {
                    case "Frequency":
                        return {
                            type: rule.type,
                            rule: rule,
                            totalTemplates: 0,
                            realZero: 0
                        };
                    case "Position":
                        return {
                            type: rule.type,
                            rule: rule,
                            realZero: 0
                        };
                    default:
                        return null;
                }
            },
            _clearIndividualRuleData: function (executor, templateInfo, cellRange) {
                switch (executor.type) {
                    case "Frequency":
                        executor.totalTemplates = 0;
                        executor.realZero = cellRange.column + templateInfo.width;
                        return;
                    case "Position":
                        executor.realZero = cellRange.column + templateInfo.width;
                        return;
                    default:
                        return;
                }
            },
            _updateIndividualRuleData: function (executor, templateInfo, cellRange) {
                switch (executor.type) {
                    case "Frequency":
                        var columns = Math.floor((cellRange.column - executor.realZero + 1) / this.minColumnWidth);
                        var rule = executor.rule;
                        if (rule.columns > 0) {
                            if (cellRange.row === 0 && columns >= rule.columns) {
                                executor.totalTemplates = 0;
                                executor.realZero = cellRange.column;
                            }
                        }
                        for (var i = 0; i < rule.templateList.length; i++) {
                            var current = rule.templateList[i];
                            if (current === templateInfo.classID) {
                                executor.totalTemplates++;
                            }
                        }
                        return;
                    case "Position":
                        return;
                    default:
                        return;
                }
            },
            _adhereToRules: function (executor, templateInfo, cellRange) {
                switch (executor.type) {
                    case "Frequency":
                        return this._adhereFrequencyRule(executor, templateInfo, cellRange);
                    case "Position":
                        return this._adherePositionRule(executor, templateInfo, cellRange);
                    default:
                        return true;
                }
            },
            _adhereFrequencyRule: function (executor, templateInfo, cellRange) {
                var rule = executor.rule;
                for (var i = 0, leni = rule.templateList.length; i < leni; i++) {
                    var current = rule.templateList[i];
                    if (current === templateInfo.classID) {
                        if (executor.totalTemplates + 1 <= rule.count) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                }
                return true;
            },
            _adherePositionRule: function (executor, templateInfo, cellRange) {
                var rule = executor.rule;
                for (var i = 0, leni = rule.templateList.length; i < leni; i++) {
                    var current = rule.templateList[i];
                    if (current === templateInfo.classID) {
                        var column = Math.floor((cellRange.column - executor.realZero + 1) / this.minColumnWidth);
                        var row = Math.floor((cellRange.row + 1) / this._minRowHeight);
                        if (row >= rule.minY && row <= rule.maxY && column >= rule.minY && column <= rule.maxX) {
                            return false;
                        }
                    }
                }
                return true;
            },
            _cellsAreEqual: function (x, y) {
                if (!x || !y) {
                    return false;
                }
                return (x.row === y.row) && (x.column === y.column) && (x.width === y.width) && (x.height === y.height) && (x.isAvailable === y.isAvailable);
            }
        }, {
            RowMargin: 1,
            ColumnMargin: 1,
            RowHeight: 10,
            ColumnWidth: 10
            // end static type definition
        })
    });

})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/


(function () {
    "use strict";

    WinJS.Namespace.define("BingApps.UI", {
        /// <summary locid="BingApps.UI.EntityCluster">
        /// Displays multiple entities of variable sizes within a cluster
        /// </summary>
        EntityCluster: WinJS.Class.define(function (element, options) {
            /// <signature helpKeyword="BingApps.UI.EntityCluster.EntityCluster">
            /// <summary locid="BingApps.UI.EntityCluster.constructor">
            /// Creates a new EntityCluster.
            /// </summary>
            /// <param name="element">
            /// The DOM element that hosts the EntityCluster control.
            /// </param>
            /// <param name="options">
            /// An object that contains one or more property/value pairs to apply to the new control.
            /// Each property of the options object corresponds to one of the control's properties or events.
            /// Event names must begin with "on". For example, to provide a handler for the itemInvoked event,
            /// add a property named "onItemInvoked" to the options object and set its value to the event handler.
            /// - itemDataSource: Data source that provides items for the EntityCluster.
            /// - maxColumnCount: Maximum columns for the EntityCluster.
            /// - marginDistance: Number of EntityCluster columns between margins.
            /// - marginWidth: Width of the margins between EntityCluster columns.
            /// - onItemInvoked: Method to be invoked when an entity of EntityCluster is invoked.
            /// </param>
            /// <returns type="BingApps.UI.EntityCluster">
            /// The new EntityCluster.
            /// </returns>
            /// </signature>
            msWriteProfilerMark("BingApps.UI.EntityCluster:constructor,StartTM");
            element = element || document.createElement("div");
            options = options || {};

            element.winControl = this;
            this._element = element;
            this._uniqueID = null;
            this._navigableViewOrchestrator = null;
            this._getLayoutPromises = [];
            this._renderingPromise = WinJS.Promise.wrap(null);
            this._relayoutTimer = false;
            this._leadingItemIsLarge = false;
            this._templateClassMap = BingApps.UI.EntityClusterConfig.DefaultConfig.TemplateClassMap;
            this._templateDefinitions = BingApps.UI.EntityClusterConfig.DefaultConfig.TemplateDefinitions;
            this._rulesList = BingApps.UI.EntityClusterConfig.DefaultConfig.RulesList || {};
            this._entityWrappers = null;
            this._videoList = null;

            this._dataSource = null;
            this._marginWidth = 0;
            this._marginDistance = 0;
            this._maxColumnCount = Number.MAX_VALUE;
            this._maxWidth = Number.MAX_VALUE;
            this._currentHeight = 0;
            this._currentWidth = 0;
            this._adMetadata = null;
            this._subclusterAdFrequency = null;

            var that = this;
            // [BEGIN]
            // register iteminvoked event on each entity
            BingApps.Utilities.registerItemClickProxy(element,
                // predicate
                function (element) {
                    return WinJS.Utilities.hasClass(element, "entityCluster");
                },
                // completion
                function (element) {
                    var index = element.getAttribute("data-index");
                    var entityWrapper = that._entityWrappers[index];
                    var item = Object.create(entityWrapper.item);
                    var templateClassType = that._getTemplateClassType(entityWrapper.templateClass);
                    if (that._isValidVideo(item) && that._isVideoClass(templateClassType)) {
                        item.videoOptions = Object.create(item.thumbnail.videoOptions);
                        item.videoOptions.videoList = that._videoList;
                        item.videoOptions.currentIndex = item.thumbnail.videoOptions.index;
                    }
                    that.dispatchEvent("iteminvoked", { item: item });
                });
            // [END]

            this.oniteminvoked = BingApps.UI.EntityCluster.itemClickHandler;
            this._adsWrapperControlList = [];

            var wrapper = this._containerWrapper = document.createElement("div");
            wrapper.className = "entityClusterGridWrapper";

            this._container = document.createElement("div");
            this._container.className = "entityClusterGrid";
            this._container.id = BingApps.UI.NavigableView.createItemId();

            //Create layout cache if it is not already created.
            if (!BingApps.UI.EntityCluster.layoutCache) {
                BingApps.UI.EntityCluster.layoutCache = new BingApps.Utilities.MemoryCache(BingApps.UI.EntityCluster.memoryCacheSize);
            }

            // set options
            WinJS.UI.setOptions(this, options);

            this.forceLayout();
        },
        {
            /// <field type="HTMLElement" domElement="true" hidden="true" locid="BingApps.UI.EntityCluster.element" helpKeyword="BingApps.UI.EntityCluster.element">
            /// Gets the DOM element that hosts the EntityCluster.
            /// </field>
            element: {
                get: function () { return this._element; }
            },

            /// <field type="Object" locid="BingApps.UI.EntityCluster.itemDataSource" helpKeyword="BingApps.UI.EntityCluster.itemDataSource">
            /// Gets or sets the data source that provides items for the EntityCluster.
            /// </field>
            itemDataSource: {
                get: function () {
                    return this._dataSource;
                },
                set: function (newData) {
                    msWriteProfilerMark("BingApps.UI.EntityCluster:set_itemDataSource,info");
                    this._dataSource = newData;
                    this.forceLayout();
                }
            },

            /// <field type="Object" locid="BingApps.UI.EntityCluster.adMetadata" helpKeyword="BingApps.UI.EntityCluster.adMetadata">
            /// Gets or sets the ad metadata that provides Ads for the EntityCluster.It should contain controlType and controlOptions for Ads
            /// </field>
            adMetadata: {
                get: function () {
                    return this._adMetadata;
                },
                set: function (newData) {
                    msWriteProfilerMark("BingApps.UI.EntityCluster:set_adMetadata,info");
                    this._adMetadata = newData;
                    this.forceLayout();
                }
            },

            /// <field type="Number" integet="true" locid="BingApps.UI.EntityCluster.maxColumnCount" helpKeyword="BingApps.UI.EntityCluster.maxColumnCount">
            /// Gets or sets the maximum columns for the EntityCluster
            /// </field>
            maxColumnCount: {
                get: function () {
                    return this._maxColumnCount;
                },
                set: function (newMaxColumnCount) {
                    msWriteProfilerMark("BingApps.UI.EntityCluster:set_maxColumnCount,info");
                    if (newMaxColumnCount >= 0) {
                        this._maxColumnCount = newMaxColumnCount;
                    }
                    this._calculateMaxWidth();
                    this.forceLayout();
                }
            },

            /// <field type="Number" integet="true" locid="BingApps.UI.EntityCluster.marginDistance" helpKeyword="BingApps.UI.EntityCluster.marginDistance">
            /// Gets or sets the number of EntityCluster columns between margins. For example, if you have
            /// 10 columns, you may want to have a margin after every 2 or 3 columns for better look. This value
            /// is called marginDistance.
            /// </field>
            marginDistance: {
                get: function () {
                    return this._marginDistance;
                },
                set: function (newMarginDistance) {
                    msWriteProfilerMark("BingApps.UI.EntityCluster:set_marginDistance,info");
                    this._marginDistance = this._marginDistanceInPixels = 0;
                    if (newMarginDistance >= 0) {
                        this._marginDistance = newMarginDistance;
                        this._marginDistanceInPixels = newMarginDistance * BingApps.UI.EntityCluster.unitWidth - 1;
                    }
                    this._calculateMaxWidth();
                    this.forceLayout();
                }
            },

            /// <field type="Number" integet="true" locid="BingApps.UI.EntityCluster.marginWidth" helpKeyword="BingApps.UI.EntityCluster.marginWidth">
            /// Gets or sets the margin width for EntityCluster. You can have optional margin width between every
            /// 'x' columns of entity cluster.
            /// </field>
            marginWidth: {
                get: function () {
                    return this._marginWidth;
                },
                set: function (newMarginWidth) {
                    msWriteProfilerMark("BingApps.UI.EntityCluster:set_marginWidth,info");
                    if (newMarginWidth >= 0) {
                        this._marginWidth = Math.floor(newMarginWidth / BingApps.UI.EntityCluster.unitWidth);
                    }
                    this._calculateMaxWidth();
                    this.forceLayout();
                }
            },

            /// <field type="Number" integet="true" locid="BingApps.UI.EntityCluster.subclusterAdFrequency" helpKeyword="BingApps.UI.EntityCluster.subclusterAdFrequency">
            /// Gets or sets how often Ads show in the EntityCluster. If this value is x, that means it will show Ads every X margins. 
            /// For example, if your marginDistance is 2, and subclusterAdFrequency is 1, then it will show Ads every 2 columns. 
            /// if subclusterAdFrequency is 2, then it will show Ads every 4 columns. 
            /// This value is called subclusterAdFrequency.
            /// </field>
            subclusterAdFrequency: {
                get: function () {
                    return this._subclusterAdFrequency;
                },
                set: function (newSubclusterAdFrequency) {
                    msWriteProfilerMark("BingApps.UI.EntityCluster:set_subclusterAdFrequency,info");
                    this._subclusterAdFrequency = newSubclusterAdFrequency;
                    this.forceLayout();
                }
            },

            /// <field type="Object" integet="true" locid="BingApps.UI.EntityCluster.renderPromise" helpKeyword="BingApps.UI.EntityCluster.renderPromise">
            /// Gets the render promise for EntityCluster. You can use it to schedule stuff to happen after the render is complete.
            /// </field>
            renderPromise: {
                get: function () {
                    return this._renderingPromise;
                }
            },

            /// <signature helpKeyword="BingApps.UI.EntityCluster.forceLayout">
            /// <summary locid="BingApps.UI.EntityCluster.forceLayout">
            /// Forces the EntityCluster to update its layout. Use this function whenever you want to re-render the layout after some property change.
            /// In case of a windows resize also you should call this method.
            /// </summary>
            /// <param name="cancelRenderingPromise">
            /// If set to true, an attempt will be made to cancel the renderPromise associated with the previously scheduled render that is either waiting or is in progress.
            /// This flag is useful when you have multiple entity clusters on a page and on a resize or orientation change you want to relayout all of them again and
            /// cancel the yet to be rendered entity clusters.
            /// </param>
            /// </signature>
            forceLayout: function (cancelRenderingPromise) {
                this._uniqueID = performance.now();
                var that = this;

                if (cancelRenderingPromise) {
                    this._cancelRenderingPromise();
                }

                if (!that._relayoutTimer) {
                    that._relayoutTimer = true;
                    var currentRenderingPromise = that._renderingPromise;
                    msWriteProfilerMark("BingApps.UI.EntityCluster:forceLayout:" + this._uniqueID + ":s");
                    that._renderingPromise = WinJS.Promise.timeout(0).then(function () {
                        return currentRenderingPromise.then(function () {
                            return that._renderImpl();
                        });
                    });
                }
                return that._renderingPromise;
            },

            dispose: function () {
                /// <signature helpKeyword="BingApps.UI.EntityCluster.dispose">
                /// <summary locid="BingApps.UI.EntityCluster.dispose">
                /// Manual trigger of dispose for EntityCluster control.
                /// </summary>
                /// </signature>
                this._clearAdControls();
                if (this._navigableViewOrchestrator) {
                    this._navigableViewOrchestrator.dispose();
                    this._navigableViewOrchestrator = null;
                }

            },

            _calculateMaxWidth: function () {
                if (this._maxColumnCount === Number.MAX_VALUE) {
                    this._maxWidth = Number.MAX_VALUE;
                } else if (this._maxColumnCount > 0) {
                    this._maxWidth = this._maxColumnCount * BingApps.UI.EntityCluster.unitWidth - 1;
                    if (this._marginDistance > 0 && this._marginWidth > 0) {
                        var marginOccurances = Math.floor(this._maxColumnCount / this._marginDistance);
                        this._maxWidth += (marginOccurances * this._marginWidth);
                    }
                } else {
                    this._maxWidth = 0;
                }
            },

            _renderImpl: function () {
                msWriteProfilerMark("BingApps.UI.EntityCluster:_renderImpl:" + this._uniqueID + ":s");
                var that = this;
                that._relayoutTimer = false;

                var oldHeight = that._currentHeight;
                var oldWidth = that._currentWidth;

                that._currentHeight = that._element.offsetHeight ? that._element.offsetHeight : 0;
                that._currentWidth = that._element.offsetWidth ? that._element.offsetWidth : 0;

                var renderImplPromise = that._render().then(function () {
                    if (oldHeight !== that._currentHeight || oldWidth !== that._currentWidth) {
                        if (that._navigableViewOrchestrator) {
                            that._navigableViewOrchestrator.onWindowResize(event);
                        }
                    }
                });
                msWriteProfilerMark("BingApps.UI.EntityCluster:_renderImpl:" + this._uniqueID + ":e");
                return renderImplPromise;
            },

            _render: function () {
                msWriteProfilerMark("BingApps.UI.EntityCluster:_render:" + this._uniqueID + ":s");
                var that = this;
                var element = that._element;
                var entitiesDataSource = that._dataSource;

                var videoList, layout;
                var renderPromise = that._createEntityWrappers(entitiesDataSource)
                .then(function (entityWrappers) {
                    that._entityWrappers = entityWrappers;
                    that._videoList = videoList = that._createVideoList(entityWrappers); // Extract Video info to support continuous video playback
                    return that._layoutGeneration(entityWrappers);
                }).then(function (layoutValue) {
                    layout = layoutValue;
                    return that._computeItemsToRender(layout, that._entityWrappers, videoList);
                }).then(function () {
                    return that._renderClasses(layout);
                }).then(function () {
                    var visibleEntityWrappers = that._entityWrappers;
                    var visibleEntities = visibleEntityWrappers.map(function (entityWrapper) {
                        return Object.create(entityWrapper.item);
                    });
                    var eventProperties = { item: visibleEntities };
                    that.dispatchEvent("itemsrendered", eventProperties);
                });
                msWriteProfilerMark("BingApps.UI.EntityCluster:_render:" + this._uniqueID + ":e");
                return renderPromise;
            },

            _computeItemsToRender: function (layout, entityWrappers, videoList) {
                var itemCount = this._computeNumberOfItems(layout);
                return this._renderDOM(entityWrappers.slice(0, itemCount + 1), videoList);
            },

            _computeNumberOfItems: function (layout) {
                var list = layout.itemList;
                for (var i = list.length - 1; i > 0; i--) {
                    var item = list[i];
                    if (item) {
                        break;
                    }
                }
                return i;
            },

            _layoutGeneration: function (entityWrappers) {
                var templateValues = this._createTemplateSelectorOutput(entityWrappers);
                msWriteProfilerMark("BingApps.UI.EntityCluster:_layoutGeneration:" + this._uniqueID + ":s");
                return this._getLayout(templateValues);
            },

            _getLayout: function (templateValues) {
                var that = this;
                msWriteProfilerMark("BingApps.UI.EntityCluster:_getLayout:" + this._uniqueID + ":s");

                var dataCacheId = that._generateLayoutCacheKey(that._entityWrappers);
                var cachedLayout = BingApps.UI.EntityCluster.layoutCache.getItem(dataCacheId);

                var getLayoutPromise = null;
                if (cachedLayout) {
                    getLayoutPromise = WinJS.Promise.as(cachedLayout);
                }
                else {
                    getLayoutPromise = that._createLayout(templateValues)
                                .then(function (newLayout) {
                                    if (that._currentHeight > 0 && that._entityWrappers.length > 0) {
                                        BingApps.UI.EntityCluster.layoutCache.addItem(dataCacheId, newLayout);
                                    }
                                    return newLayout;
                                });
                }
                msWriteProfilerMark("BingApps.UI.EntityCluster:_getLayout:" + that._uniqueID + ":e");
                return getLayoutPromise;
            },

            _createLayout: function (templateValues) {
                msWriteProfilerMark("BingApps.UI.EntityCluster:_createLayout:" + this._uniqueID + ":s");
                var layoutOptions = {};
                layoutOptions.leadingItemIsLarge = this._leadingItemIsLarge;
                layoutOptions.screenHeight = this._currentHeight;
                layoutOptions.unitWidth = BingApps.UI.EntityCluster.unitWidth;
                layoutOptions.unitHeight = BingApps.UI.EntityCluster.unitHeight;
                layoutOptions.rulesList = this._rulesList;
                if (this._maxWidth > 0 && this._maxWidth !== Number.MAX_VALUE) {
                    layoutOptions.maxWidth = this._maxWidth;
                }

                if (this._marginDistanceInPixels > 0 && this._marginWidth > 0) {
                    layoutOptions.marginDistance = this._marginDistanceInPixels;
                    layoutOptions.marginWidth = this._marginWidth;
                    if (this.subclusterAdFrequency) {
                        layoutOptions.subclusterAdFrequency = this.subclusterAdFrequency;
                    }
                }
                var layoutGenerator = new BingApps.UI.LayoutGenerator(layoutOptions);
                var layout = layoutGenerator.generateLayout(templateValues);
                msWriteProfilerMark("BingApps.UI.EntityCluster:_createLayout:" + this._uniqueID + ":e");
                return WinJS.Promise.wrap(layout);
            },

            _renderDOM: function (entityWrappers, videoList) {
                var that = this;
                return new WinJS.Promise(function (complete, error, progress) {
                    try {
                        msWriteProfilerMark("BingApps.UI.EntityCluster:_renderDom:" + that._uniqueID + ":s");
                        var container = that._container;
                        var wrapper = that._containerWrapper;
                        var element = that._element;

                        if (!wrapper.parentElement) {
                            element.appendChild(wrapper);
                        }

                        if (container.parentElement) {
                            wrapper.removeChild(container);
                        }

                        container.innerHTML = "";

                        for (var i = 0, leni = entityWrappers.length; i < leni; i++) {
                            progress(entityWrappers[i]);
                            entityWrappers[i].index = i;
                            var entityEl = that._createHTML(entityWrappers[i], videoList);
                            that._getLayoutPromises.push(entityEl);
                            container.appendChild(entityEl);
                        }
                        msWriteProfilerMark("BingApps.UI.EntityCluster:_renderDom:" + that._uniqueID + ":e");
                        complete();
                    }
                    catch (e) {
                        error(e);
                    }
                });
            },

            _isVideoClass: function (classType) {
                var classTypeLower = classType ? classType.toLowerCase() : "";
                return (classTypeLower === BingApps.UI.EntityCluster.videoTemplate || classTypeLower === BingApps.UI.EntityCluster.videoClusterTemplate);
            },

            _isSlideshowClass: function (classType) {
                var classTypeLower = classType ? classType.toLowerCase() : "";
                return classTypeLower === BingApps.UI.EntityCluster.slideShowTemplate;
            },

            _updateClasses: function (layout) {
                msWriteProfilerMark("BingApps.UI.EntityCluster:_updateClasses:" + this._uniqueID + ":s");
                var itemList = layout.itemList;
                var container = this._container;

                var children = container.childNodes;
                var itemsLength = itemList.length;
                var entityClusterCSS = [];
                entityClusterCSS.push(["#", container.id, " {width:", (layout.columnCount + 1) * 10, "px; height:", layout.rowCount * 10, "px;} "].join(""));
                for (var i = 0, leni = children.length; i < leni; i++) {
                    var cluster = children[i];
                    var className = [];
                    var id = BingApps.UI.NavigableView.createItemId();
                    cluster.id = id;
                    className.push("entityCluster");
                    if (i < itemsLength) {
                        var itemInfo = itemList[i];
                        if (itemInfo) {
                            itemInfo.id = id;
                            className.push(itemInfo.classID);
                            var clusterLocation = itemInfo.clusterLocation.trim().split(" ");
                            className.push(clusterLocation.join(" "));
                            if (itemInfo.thumbnailModifier !== "") {
                                className.push(itemInfo.thumbnailModifier);
                            }
                            entityClusterCSS.push(["#", id, " {-ms-grid-row:", itemInfo.row, "; -ms-grid-column:", itemInfo.column, ";} "].join(""));
                        }
                        else {
                            className.push("entityClusterHide");
                        }
                    }
                    else {
                        className.push("entityClusterHide");
                    }
                    cluster.className = className.join(" ");
                }

                var adsStyleString = this._renderAds(layout);
                var styleString = [entityClusterCSS.join(""), adsStyleString];
                var styleElement = this._styleElement = document.createElement("style");
                styleElement.type = "text/css";
                styleElement.styleSheet.cssText = styleString.join("");
                container.appendChild(styleElement);
                msWriteProfilerMark("BingApps.UI.EntityCluster:_updateClasses:" + this._uniqueID + ":e");
            },

            _renderClasses: function (layout) {
                var that = this;
                msWriteProfilerMark("BingApps.UI.EntityCluster:_renderClasses" + this._uniqueID + ":s");
                return new WinJS.Promise(function (complete, error, progress) {
                    try {
                        that._updateClasses(layout);

                        var container = that._container;
                        if (!container.parentElement) {
                            that._containerWrapper.appendChild(container);
                        }

                        if (that._navigableViewOrchestrator === null) {
                            that._createNavigableView();
                        }
                        msWriteProfilerMark("BingApps.UI.EntityCluster:_renderClasses:" + that._uniqueID + ":e");

                        complete();
                    }
                    catch (e) {
                        error(e);
                    }
                });
            },

            _createNavigableView: function () {
                this._navigableViewOrchestrator = new BingApps.UI.NavigableView.NavigableViewOrchestrator(this._element, this._getLayoutPromises);
            },
            _clearAdControls: function () {
                var list = this._adsWrapperControlList;
                for (var i = 0, leni = list.length; i < leni; i++) {
                    var ad = list[i];
                    if (ad && ad.dispose) {
                        ad.dispose();
                    }
                }
                this._adsWrapperControlList = [];
            },
            _renderAds: function (layout) {
                if (!this.subclusterAdFrequency) {
                    return "";
                }
                msWriteProfilerMark("BingApps.UI.EntityCluster:_renderAds" + this._uniqueID + ":s");
                this._clearAdControls();
                var container = this._container;
                var adList = layout.adList;
                var adListLength = adList.length;
                var adCount = adListLength;
                var entityClusterCSS = [];
                for (var i = 0, leni = adCount; i < leni; i++) {
                    var adElement = document.createElement("div");
                    var id = BingApps.UI.NavigableView.createItemId();
                    var className = ["SubclusterAd"];
                    adElement.id = id;
                    var otherAdOptions = null;

                    var adContainer = new BingApps.UI.AdContainer(adElement, {
                        controlOptions: this.adMetadata.controlOptions,
                        controlType: this.adMetadata.controlType,
                    });
                    this._adsWrapperControlList.push(adContainer);
                    adContainer.instantiateAd();
                    container.appendChild(adElement);

                    if (i < adListLength) {
                        var adInfo = adList[i];
                        if (adInfo) {
                            entityClusterCSS.push(["#", id, " {-ms-grid-row:", adInfo.row, "; -ms-grid-column:", adInfo.column, "; -ms-grid-column-span:", adInfo.columnSpan, "; -ms-grid-row-span:", 60, ";} "].join(""));
                        }
                        else {
                            className.push("entityClusterHide");
                        }
                    }
                    else {
                        className.push("entityClusterHide");
                    }
                    WinJS.Utilities.addClass(adElement, className.join(" "));
                }
                msWriteProfilerMark("BingApps.UI.EntityCluster:_renderAds" + this._uniqueID + ":e");
                return entityClusterCSS.join("");
            },
            _createEntityWrappers: function (entitiesDataSource) {
                var that = this;
                msWriteProfilerMark("BingApps.UI.EntityCluster:_createEntityWrappers" + this._uniqueID + ":s");
                if (!entitiesDataSource || typeof entitiesDataSource.getCount !== "function") {
                    msWriteProfilerMark("BingApps.UI.EntityCluster:_createEntityWrappers" + this._uniqueID + ":e");
                    return WinJS.Promise.wrap([]);
                }

                var entityWrappersPromise = entitiesDataSource.getCount();

                entityWrappersPromise = entityWrappersPromise.then(function (numberOfEntities) {
                    var entityPromises = [];
                    var i;
                    for (i = 0; i < numberOfEntities; i++) {
                        entityPromises.push(entitiesDataSource.itemFromIndex(i));
                    }
                    return WinJS.Promise.join(entityPromises);
                }).then(function (entities) {
                    var entityWrappers = entities.map(function (entity) {
                        var templateClassName, templateClassLower;
                        if (entity.data) {
                            templateClassName = entity.data.templateClass;
                            templateClassLower = templateClassName ? templateClassName.toLowerCase() : null;
                        }
                        var wrapper = {
                            item: entity.data,
                            templateClass: templateClassLower
                        };
                        return wrapper;
                    });
                    msWriteProfilerMark("BingApps.UI.EntityCluster:_createEntityWrappers" + that._uniqueID + ":e");
                    return entityWrappers;
                });
                return entityWrappersPromise;
            },

            _createHTML: function (entityWrapper, videoList) {
                var templateClass = entityWrapper.templateClass;
                var classType = this._getTemplateClassType(templateClass);
                if (classType) {
                    if (this._isSlideshowClass(classType)) {
                        return this._createSlideshowHtml(entityWrapper);
                    }
                    else if (this._isVideoClass(classType)) {
                        return this._createVideoHtml(entityWrapper, videoList);
                    }
                    else {
                        return this._createNormalHtml(entityWrapper);
                    }
                }
                else {
                    return this._createNormalHtml(entityWrapper);
                }
            },

            _createVideoList: function (entityWrappers) {
                var videoList = [];
                var index = 0;
                var entityWrapper, templateClass, classType, item;
                for (var i = 0, leni = entityWrappers.length; i < leni; i++) {
                    entityWrapper = entityWrappers[i];
                    templateClass = entityWrapper.templateClass;
                    classType = this._getTemplateClassType(templateClass);
                    item = entityWrapper.item;
                    if (this._isValidVideo(item)) {
                        if (!this._isVideoClass(classType)) {
                            entityWrapper.templateClass = BingApps.UI.EntityCluster.videoTemplate;
                        }
                        item.thumbnail.videoOptions.index = index++;
                        videoList.push(item.thumbnail.videoOptions);
                    }
                }
                return videoList;
            },

            _isValidVideo: function (item) {
                return (item && item.thumbnail && item.thumbnail.videoOptions && item.thumbnail.videoOptions.videoSource);
            },

            _createSlideshowHtml: function (entityWrapper) {
                var item = entityWrapper.item;
                var cluster = document.createElement("div");
                cluster.setAttribute("data-index", entityWrapper.index);
                var grid = document.createElement("div");
                grid.className = "grid";

                var thumbnail = document.createElement("div");
                thumbnail.className = "thumbnail anchorTop";

                var thumbnailData = item.thumbnail;
                if (thumbnailData) {
                    var imageSource;
                    var lowRes = item.thumbnailLowRes;

                    if (lowRes) {
                        imageSource = {
                            lowResolutionUrl: lowRes.url,
                            highResolutionUrl: thumbnailData.url
                        };
                    } else {
                        imageSource = {
                            url: thumbnailData.url
                        };
                    }

                    var thumbnailImage = new BingApps.UI.ImageCard(thumbnail, {
                        alternateText: thumbnailData.altText || "",
                        classification: "small",
                        noIdentifier: 1,
                        imageSource: imageSource
                    });
                }
                grid.appendChild(thumbnail);

                var icon = document.createElement("div");
                icon.className = "icon win-command";
                var iconRing = document.createElement("div");
                iconRing.className = "iconRing win-commandring win-commandicon";
                var iconImage = document.createElement("div");
                iconImage.className = "iconImage win-commandimage";
                iconRing.appendChild(iconImage);
                icon.appendChild(iconRing);
                grid.appendChild(icon);

                var headline = document.createElement("div");
                headline.className = "headline";
                headline.innerHTML = toStaticHTML(item.title) || "";

                var strippedTitle = headline.innerText;
                var dir = BingApps.Utilities.getTextDirection(strippedTitle);

                headline.setAttribute("dir", dir);
                grid.appendChild(headline);

                var kicker = document.createElement("div");
                WinJS.Utilities.addClass(kicker, "kicker");
                kicker.innerText = item.kicker || "";
                kicker.setAttribute("dir", dir);
                grid.appendChild(kicker);

                var source = document.createElement("div");
                source.className = "source";
                source.innerText = item.source || "";
                grid.appendChild(source);

                var publishTime = document.createElement("div");
                var publishClassName = "publishTime";
                if (!item.source) {
                    publishClassName += " noSource";
                }
                publishTime.className = publishClassName;
                publishTime.innerText = item.publishTime || "";
                grid.appendChild(publishTime);

                var snippet = document.createElement("div");
                snippet.className = "snippet";
                snippet.innerHTML = toStaticHTML(item.snippet) || "";
                snippet.setAttribute("dir", dir);
                grid.appendChild(snippet);

                cluster.appendChild(grid);
                BingApps.Utilities.enablePointerUpDownAnimations(cluster);
                cluster.setAttribute("role", "option");
                cluster.setAttribute("tabindex", 0);

                return cluster;
            },

            _createVideoHtml: function (entityWrapper, videoList) {
                var item = entityWrapper.item;
                var cluster = document.createElement("div");
                cluster.setAttribute("data-index", entityWrapper.index);
                var grid = document.createElement("div");
                grid.className = "grid";

                var thumbnail = document.createElement("div");
                thumbnail.className = "thumbnail anchorTop";

                var thumbnailData = item.thumbnail;
                if (thumbnailData) {
                    var imageSource;
                    var lowRes = item.thumbnailLowRes;

                    if (lowRes) {
                        imageSource = {
                            lowResolutionUrl: lowRes.url,
                            highResolutionUrl: thumbnailData.url
                        };
                    } else {
                        imageSource = {
                            url: thumbnailData.url
                        };
                    }

                    var thumbnailImage = new BingApps.UI.ImageCard(thumbnail, {
                        alternateText: thumbnailData.altText || "",
                        classification: "small",
                        noIdentifier: 1,
                        imageSource: imageSource
                    });
                }
                grid.appendChild(thumbnail);

                var gradient = document.createElement("div");
                gradient.className = "gradient";
                grid.appendChild(gradient);

                var icon = document.createElement("div");
                icon.className = "icon win-command";
                var iconRing = document.createElement("div");
                iconRing.className = "iconRing win-commandring win-commandicon";
                var iconImage = document.createElement("div");
                iconImage.className = "iconImage win-commandimage";
                iconRing.appendChild(iconImage);
                icon.appendChild(iconRing);
                grid.appendChild(icon);

                var headline = document.createElement("div");
                headline.className = "headline";
                headline.innerHTML = toStaticHTML(item.title) || "";

                var strippedTitle = headline.innerText;
                var dir = BingApps.Utilities.getTextDirection(strippedTitle);

                headline.setAttribute("dir", dir);
                grid.appendChild(headline);

                var kicker = document.createElement("div");
                kicker.className = "kicker";
                kicker.innerText = item.kicker || "";
                kicker.setAttribute("dir", dir);
                grid.appendChild(kicker);



                var source = document.createElement("div");
                source.className = "source";
                source.innerText = item.source || "";
                grid.appendChild(source);

                var publishTime = document.createElement("div");
                var publishClassName = "publishTime";
                if (!item.source) {
                    publishClassName += " noSource";
                }
                publishTime.className = publishClassName;
                publishTime.innerText = item.publishTime || "";
                grid.appendChild(publishTime);

                var snippet = document.createElement("div");
                snippet.className = "snippet";
                snippet.innerHTML = toStaticHTML(item.snippet) || "";
                snippet.setAttribute("dir", dir);
                grid.appendChild(snippet);

                cluster.appendChild(grid);
                cluster.setAttribute("role", "option");
                cluster.setAttribute("tabindex", 0);
                BingApps.Utilities.enablePointerUpDownAnimations(cluster);

                return cluster;
            },

            _createNormalHtml: function (entityWrapper) {
                var item = entityWrapper.item;

                var cluster = document.createElement("div");
                cluster.setAttribute("data-index", entityWrapper.index);
                var grid = document.createElement("div");
                grid.className = "grid";

                var thumbnail = document.createElement("div");
                thumbnail.className = "thumbnail anchorTop";
                var thumbnailData = item.thumbnail;
                if (thumbnailData) {
                    var imageSource;
                    var lowRes = item.thumbnailLowRes;
                    if (lowRes) {
                        imageSource = {
                            lowResolutionUrl: lowRes.url,
                            highResolutionUrl: thumbnailData.url
                        };
                    } else {
                        imageSource = {
                            url: thumbnailData.url
                        };
                    }

                    var thumbnailImage = new BingApps.UI.ImageCard(thumbnail, {
                        alternateText: thumbnailData.altText || "",
                        classification: "small",
                        noIdentifier: 1,
                        imageSource: imageSource
                    });
                }
                grid.appendChild(thumbnail);

                var gradient = document.createElement("div");
                gradient.className = "gradient";
                grid.appendChild(gradient);

                var headline = document.createElement("div");
                headline.className = "headline";

                var strippedTitle;

                if (item.isLocked) {
                    var headlineSpan = document.createElement("span");
                    if (BingApps.Utilities.containsHTML(item.title)) {
                        headlineSpan.className = "payWallLockedHTML";
                    }
                    else {
                        headlineSpan.className = "payWallLockedNormal";
                    }
                    headlineSpan.innerHTML = toStaticHTML(item.title) || "";
                    strippedTitle = headlineSpan.innerText;
                    headline.appendChild(headlineSpan);
                }
                else {
                    headline.innerHTML = toStaticHTML(item.title) || "";
                    strippedTitle = headline.innerText;
                }
                grid.appendChild(headline);

                var dir = BingApps.Utilities.getTextDirection(strippedTitle);
                headline.setAttribute("dir", dir);

                var imageAttribution = document.createElement("div");
                imageAttribution.className = "imageAttribution";
                imageAttribution.innerText = item.imageAttribution || "";
                imageAttribution.setAttribute("dir", dir);
                grid.appendChild(imageAttribution);

                var kicker = document.createElement("div");
                kicker.className = "kicker";
                kicker.innerText = item.kicker || "";
                kicker.setAttribute("dir", dir);
                grid.appendChild(kicker);

                var sourceImage = document.createElement("div");
                sourceImage.className = "sourceImage fitBoth";
                var sourceImageUrl = item.sourceImageUrl;
                if (sourceImageUrl) {
                    var sourceImageImage = new BingApps.UI.ImageCard(sourceImage, {
                        alternateText: item.source || "",
                        classification: "tiny",
                        noIdentifier: 1,
                        imageSource: {
                            url: sourceImageUrl
                        }
                    });
                }
                else {
                    sourceImage.style.display = "none";
                }
                grid.appendChild(sourceImage);

                var source = document.createElement("div");
                source.className = "source";
                if (!sourceImageUrl) {
                    WinJS.Utilities.addClass(source, "noSourceImage");
                }
                source.innerText = item.source || "";
                grid.appendChild(source);

                var publishTime = document.createElement("div");
                publishTime.className = "publishTime";
                if (!sourceImageUrl) {
                    WinJS.Utilities.addClass(publishTime, "noSourceImage");
                }
                publishTime.innerText = item.publishTime || "";
                grid.appendChild(publishTime);

                var snippet = document.createElement("div");
                snippet.className = "snippet";
                snippet.innerHTML = toStaticHTML(item.snippet) || "";
                snippet.setAttribute("dir", dir);
                grid.appendChild(snippet);

                cluster.appendChild(grid);
                cluster.setAttribute("role", "option");
                cluster.setAttribute("tabindex", 0);
                BingApps.Utilities.enablePointerUpDownAnimations(cluster);

                return cluster;
            },

            _createTemplateSelectorOutput: function (entityWrappers) {
                var templateSelectorOutput = [];
                for (var i = 0, leni = entityWrappers.length; i < leni; i++) {
                    var entityWrapper = entityWrappers[i];
                    templateSelectorOutput.push(this._templateSelector(entityWrapper));
                }
                if (this._checkLeadingVideoOrSlideshow(entityWrappers)) {
                    this._leadingItemIsLarge = true;
                }
                return templateSelectorOutput;
            },

            _templateSelector: function (entityWrapper) {
                var hasValidTemplateClass = this._sanitizeTemplateClass(entityWrapper);
                if (!hasValidTemplateClass) {
                    this._generateTemplateClass(entityWrapper);
                }
                return this._getTemplatesForItem(entityWrapper);
            },

            _checkLeadingVideoOrSlideshow: function (entityWrappers) {
                var isLeadingItemVideoOrSlideshow = false;
                if (entityWrappers && entityWrappers.length > 0) {
                    var classType = this._getTemplateClassType(entityWrappers[0].templateClass);
                    if (this._isVideoClass(classType) || this._isSlideshowClass(classType)) {
                        isLeadingItemVideoOrSlideshow = true;
                    }
                }
                return isLeadingItemVideoOrSlideshow;
            },

            _sanitizeTemplateClass: function (itemWrapper, templateClassName) {
                var templateClassValid = false;
                var item, templateClass;
                if (itemWrapper) {
                    item = itemWrapper.item;

                    if (!templateClassName) {
                        templateClassName = itemWrapper.templateClass;
                    }
                    if (templateClassName) {
                        var classMap = this._templateClassMap;
                        templateClass = classMap[templateClassName];
                    }
                }

                if (item && templateClass) {
                    var thumbnail = item ? item.thumbnail : null;
                    var validThumbnail = (thumbnail && thumbnail.height > 0 && thumbnail.width > 0);

                    var aspectRatioMin = templateClass.aspectRatioMin;
                    var aspectRatioMax = templateClass.aspectRatioMax;

                    if (!aspectRatioMin || !aspectRatioMax) {
                        templateClassValid = true;
                    } else {
                        if (!validThumbnail) {
                            templateClassValid = false;
                        }
                        else {
                            var aspectRatio = thumbnail.width / thumbnail.height;
                            if (aspectRatio < aspectRatioMax && aspectRatio >= aspectRatioMin) {
                                templateClassValid = true;
                            } else {
                                templateClassValid = false;
                            }
                        }
                    }
                }
                return templateClassValid;
            },

            _generateTemplateClass: function (itemWrapper) {
                var classMap = this._templateClassMap;
                var defaultTemplateClass;
                for (var key in classMap) {
                    var current = classMap[key];
                    if (current.isDefault) {
                        defaultTemplateClass = current;
                        continue;
                    }
                    if (current.type !== "News" || !this._sanitizeTemplateClass(itemWrapper, key)) {
                        continue;
                    }
                    itemWrapper.templateClass = current.classID;
                    return;
                }
                itemWrapper.templateClass = defaultTemplateClass.classID;
            },

            _validateSnippetLength: function (item, templateDefinition) {
                var isSnippetValid = false;
                var minSnippetLength = templateDefinition.minSnippetLength || 0;
                var snippet = item ? item.snippet : null;
                var length = 0;
                if (snippet) {
                    var strippedSnippet = BingApps.Utilities.stripHTML(snippet);
                    length = strippedSnippet.length;
                }
                if (length >= minSnippetLength) {
                    isSnippetValid = true;
                }
                return isSnippetValid;
            },

            _validateThumbnailSize: function (item, extendedTemplateInfo) {
                var isValidThumbnail = false;
                var thumbnailHeight = extendedTemplateInfo.thumbnailHeight;
                var thumbnailWidth = extendedTemplateInfo.thumbnailWidth;
                var thumbnail = item ? item.thumbnail : null;

                if (!thumbnailHeight || !thumbnailWidth) {
                    isValidThumbnail = true;
                }
                else if (thumbnail && thumbnail.height && thumbnail.width) {
                    var actualThumbnailHeight = thumbnail.height;
                    var actualThumbnailWidth = thumbnail.width;
                    if (actualThumbnailHeight >= thumbnailHeight && actualThumbnailWidth > thumbnailWidth) {
                        isValidThumbnail = true;
                        var aspectRatio = thumbnailWidth / thumbnailHeight;
                        var actualAspectRatio = actualThumbnailWidth / actualThumbnailHeight;

                        if (actualAspectRatio < aspectRatio) {
                            extendedTemplateInfo.thumbnailModifier = "fitWidth";
                        }
                        else {
                            extendedTemplateInfo.thumbnailModifier = "fitHeight";
                        }
                    }
                }
                return isValidThumbnail;
            },

            _validateHeadlineLength: function (item, templateDefinition) {
                var isValidHeadline = false;
                var minHeadlineLength = templateDefinition.minHeadlineLength || 0;
                var headline = item ? item.title : null;
                var length = 0;
                if (!headline) {
                    var strippedHeadline = BingApps.Utilities.stripHTML(item.title);
                    length = strippedHeadline.length;
                }
                if (length >= minHeadlineLength) {
                    isValidHeadline = true;
                }
                return isValidHeadline;
            },

            _getTemplatesForItem: function (itemWrapper) {
                var outputTemplates = [];
                var itemTemplateClass = itemWrapper.templateClass;
                var classMap = this._templateClassMap[itemTemplateClass];
                if (!itemTemplateClass || !classMap) {
                    return null;
                }
                var item = itemWrapper.item;
                var templateList = classMap.templateList;
                var templateName, templateDefinition, extendedTemplateInfo;
                for (var i = 0, ilen = templateList.length; i < ilen; i++) {
                    templateName = templateList[i];
                    templateDefinition = this._templateDefinitions[templateName];
                    if (!this._validateHeadlineLength(item, templateDefinition) || !this._validateSnippetLength(item, templateDefinition)) {
                        continue;
                    }
                    //Create a copy of template definition
                    extendedTemplateInfo = Object.create(templateDefinition);
                    if (!this._validateThumbnailSize(item, extendedTemplateInfo)) {
                        continue;
                    }
                    outputTemplates.push(extendedTemplateInfo);
                }
                return outputTemplates;
            },

            _createTemplateInfo: function (template) {
                //Helper method for testing that lets us get individual template
                var templateDims = this._templateDefinitions;
                var templateDim = templateDims[template];
                var height = templateDim.height;
                var width = templateDim.width;
                var templateInfo = {
                    classID: template,
                    height: height,
                    width: width,
                    thumbnailModifier: "fitBoth",
                    lastResort: false,
                };
                return templateInfo;
            },

            _generateLayoutCacheKey: function (entityWrappers) {
                msWriteProfilerMark("CommonControls:EntityCluster:_generateLayoutCacheKey:s");
                var hash = this._computeDataSetHash(entityWrappers);
                var key = hash;
                var maxColumnCount = this._maxColumnCount;
                if (maxColumnCount === Number.MAX_VALUE) {
                    key = key + "_Max";
                } else {
                    key = key + "_" + this._maxColumnCount;
                }
                key = key + "_" + this._marginWidth;
                key = key + "_" + this._marginDistance;
                key = key + "_" + this._currentHeight;

                msWriteProfilerMark("CommonControls:EntityCluster:_generateLayoutCacheKey:e");
                return key;
            },

            _computeDataSetHash: function (entityWrappers) {
                var entityWrapper = null;
                var entitiesLength = entityWrappers ? entityWrappers.length : 0;
                var stringForHash = "";
                var item = null;
                var thumbnail = null;
                var entityHash = "";
                for (var i = 0; i < entitiesLength; i++) {
                    entityWrapper = entityWrappers[i];
                    item = entityWrapper.item;
                    entityHash = "";
                    if (item) {
                        thumbnail = item.thumbnail;
                        if (item.title) {
                            entityHash += item.title;
                        }
                        if (thumbnail && thumbnail.url) {
                            entityHash += thumbnail.url;
                        }
                        if (entityHash === "") {
                            for (var prop in item) {
                                entityHash += String(item[prop]);
                                break;
                            }
                        }
                        stringForHash += entityHash;
                    }
                }
                if (stringForHash === "") {
                    stringForHash = "emptyDataSet";
                }
                return BingApps.Utilities.computeStringHash(stringForHash);
            },

            _getTemplateClassType: function (templateClassName) {
                var classMap = this._templateClassMap;
                var templateClassObj;
                if (classMap) {
                    templateClassObj = classMap[templateClassName];
                }
                var templateClassType = templateClassObj ? templateClassObj.type : null;
                return templateClassType;
            },

            _cancelRenderingPromise: function () {
                try {
                    this._renderingPromise.cancel();
                } catch (e) {

                } finally {
                    this._renderingPromise = WinJS.Promise.wrap();
                    this._relayoutTimer = false;
                }

            }
        }, {
            // Template Class Types
            videoTemplate: "video",
            videoClusterTemplate: "videocluster",
            slideShowTemplate: "slideshow",

            // Constants
            memoryCacheSize: 50,
            unitHeight: 15,
            unitWidth: 31,

            //Static method to handle the 'oniteminvoked' event on the entities.
            itemClickHandler: function (evt) {
                if (evt && evt.item) {
                    var item = evt.item;
                    var url = item.link;
                    if (url) {
                        var internal = /^\//;
                        if (internal.test(url)) {
                            WinJS.Navigation.navigate(url, { item: item });
                        }
                        else {
                            var uri = new Windows.Foundation.Uri(url);
                            Windows.System.Launcher.launchUriAsync(uri).then();
                        }
                    } else if (item.videoOptions) {
                        var videoOptions = item.videoOptions;
                        videoOptions.fullScreenOnly = true;
                        var videoWrapper = new BingApps.UI.VideoWrapper(evt.srcElement, videoOptions);
                        videoWrapper.play();
                        videoWrapper.dispose();
                    }
                }
            }
            // end static type definition
        })
    });

    WinJS.Class.mix(BingApps.UI.EntityCluster,
        BingApps.Utilities.DOMEventMixinWithBubbling,
        WinJS.Utilities.createEventProperties("iteminvoked"),
        WinJS.Utilities.createEventProperties("itemsrendered")
    );
})();
(function () {
    "use strict";

    WinJS.Namespace.define("BingApps.UI.EntityClusterConfig.DefaultConfig",
    {
        TemplateClassMap:
        {
            landscape_image: {
                classID: "landscape_image",
                aspectRatioMin: 1.3,
                aspectRatioMax: 1.9,
                isDefault: false,
                type: "News",
                templateList: [
                    "Large_Landscape_2col_3row",
                    "Large_Landscape_2col_4row",
                    "Medium_Landscape_1col_4row",
                    "Medium_Landscape_1col_3row",
                    "Medium_Landscape_LongHeadline_1col_3row",
                    "None_1col_1row"
                ]
            },
            portrait_image: {
                classID: "portrait_image",
                aspectRatioMin: 0.5,
                aspectRatioMax: 0.9,
                isDefault: false,
                type: "News",
                templateList: [
                    "Medium_Portrait_1col_4row",
                    "None_LongHeadline_1col_3row",
                    "None_1col_2row",
                    "None_1col_1row"
                ]
            },
            square_image: {
                classID: "square_image",
                aspectRatioMin: 0.9,
                aspectRatioMax: 1.3,
                isDefault: false,
                type: "News",
                templateList: [
                    "Large_Square_2col_4row",
                    "Medium_Square_1col_4row",
                    "Medium_Square_1col_3row",
                    "Small_Square_1col_2row",
                    "Small_Square_2col_2row",
                    "None_LongHeadline_1col_3row",
                    "None_1col_1row"
                ]
            },
            no_image: {
                classID: "no_image",
                aspectRatioMin: 0,
                aspectRatioMax: 0,
                isDefault: true,
                type: "News",
                templateList: [
                    "None_LongHeadline_1col_3row",
                    "None_1col_2row",
                    "None_1col_1row",
                    "None_1col_4row"
                ]
            },
            slideshow: {
                classID: "slideshow",
                aspectRatioMin: 0,
                aspectRatioMax: 0,
                isDefault: false,
                type: "Slideshow",
                templateList: [
                    "Large_Slideshow_2col_4row",
                    "Medium_Slideshow_1col_2row",
                    "Small_Slideshow_1col_1row"
                ]
            },
            video: {
                classID: "video",
                aspectRatioMin: 0,
                aspectRatioMax: 0,
                isDefault: false,
                type: "Video",
                templateList: [
                    "Large_Video_2col_4row",
                    "Medium_Video_1col_2row",
                    "Small_Video_1col_1row"
                ]
            },
            video_cluster: {
                classID: "video_cluster",
                aspectRatioMin: 0,
                aspectRatioMax: 0,
                isDefault: false,
                type: "VideoCluster",
                templateList: [
                    "Large_videoCluster",
                    "Medium_videoCluster",
                    "Small_videoCluster"
                ]
            },
        },
        TemplateDefinitions:
        {
            Large_Square_2col_4row: {
                classID: "Large_Square_2col_4row",
                thumbnailHeight: 590,
                thumbnailWidth: 590,
                height: 59,
                width: 61,
                lastResort: false,
                minHeadlineLength: 0,
                maxHeadlineLength: 51,
                minSnippetLength: 0
            },
            Large_Landscape_2col_3row: {
                classID: "Large_Landscape_2col_3row",
                thumbnailHeight: 393,
                thumbnailWidth: 590,
                height: 44,
                width: 61,
                lastResort: false,
                minHeadlineLength: 0,
                maxHeadlineLength: 51,
                minSnippetLength: 0
            },
            Large_Landscape_2col_4row: {
                classID: "Large_Landscape_2col_4row",
                thumbnailHeight: 393,
                thumbnailWidth: 590,
                height: 59,
                width: 61,
                lastResort: false,
                weight: 3,
                minHeadlineLength: 0,
                maxHeadlineLength: 77,
                minSnippetLength: 60
            },
            Medium_Square_1col_4row: {
                classID: "Medium_Square_1col_4row",
                thumbnailHeight: 280,
                thumbnailWidth: 280,
                height: 59,
                width: 30,
                lastResort: false,
                weight: 2,
                minHeadlineLength: 0,
                maxHeadlineLength: 77,
                minSnippetLength: 250
            },
            Medium_Square_1col_3row: {
                classID: "Medium_Square_1col_3row",
                thumbnailHeight: 280,
                thumbnailWidth: 280,
                height: 44,
                width: 30,
                lastResort: false,
                weight: 2,
                minHeadlineLength: 0,
                maxHeadlineLength: 58,
                minSnippetLength: 0
            },
            Medium_Landscape_1col_4row: {
                classID: "Medium_Landscape_1col_4row",
                thumbnailHeight: 187,
                thumbnailWidth: 280,
                height: 59,
                width: 30,
                lastResort: false,
                weight: 2,
                minHeadlineLength: 0,
                maxHeadlineLength: 77,
                minSnippetLength: 300
            },
            Medium_Landscape_1col_3row: {
                classID: "Medium_Landscape_1col_3row",
                thumbnailHeight: 187,
                thumbnailWidth: 280,
                height: 44,
                width: 30,
                lastResort: false,
                minHeadlineLength: 0,
                maxHeadlineLength: 77,
                minSnippetLength: 80
            },
            Medium_Landscape_LongHeadline_1col_3row: {
                classID: "Medium_Landscape_LongHeadline_1col_3row",
                thumbnailHeight: 187,
                thumbnailWidth: 280,
                height: 44,
                width: 30,
                lastResort: false,
                minHeadlineLength: 77,
                minSnippetLength: 0
            },
            Medium_Portrait_1col_4row: {
                classID: "Medium_Portrait_1col_4row",
                thumbnailHeight: 420,
                thumbnailWidth: 280,
                height: 59,
                width: 30,
                lastResort: false,
                weight: 6,
                minHeadlineLength: 0,
                maxHeadlineLength: 58,
                minSnippetLength: 0
            },
            Small_Square_2col_2row: {
                classID: "Small_Square_2col_2row",
                thumbnailHeight: 100,
                thumbnailWidth: 100,
                height: 29,
                width: 61,
                lastResort: false,
                minSnippetLength: 200
            },
            Small_Square_1col_2row: {
                classID: "Small_Square_1col_2row",
                thumbnailHeight: 100,
                thumbnailWidth: 100,
                height: 29,
                width: 30,
                lastResort: false,
                minHeadlineLength: 0,
                maxHeadlineLength: 58,
                minSnippetLength: 40
            },
            None_1col_1row: {
                classID: "None_1col_1row",
                thumbnailHeight: 0,
                thumbnailWidth: 0,
                height: 14,
                width: 30,
                lastResort: true,
                minSnippetLength: 0
            },
            None_1col_2row: {
                classID: "None_1col_2row",
                thumbnailHeight: 0,
                thumbnailWidth: 0,
                height: 29,
                width: 30,
                lastResort: false,
                minHeadlineLength: 0,
                maxHeadlineLength: 77,
                minSnippetLength: 110
            },
            None_LongHeadline_1col_3row: {
                classID: "None_LongHeadline_1col_3row",
                thumbnailHeight: 0,
                thumbnailWidth: 0,
                height: 44,
                width: 30,
                lastResort: false,
                minHeadlineLength: 77,
                minSnippetLength: 100
            },
            None_1col_4row: {
                classID: "None_1col_4row",
                thumbnailHeight: 0,
                thumbnailWidth: 0,
                height: 59,
                width: 30,
                lastResort: false,
                minHeadlineLength: 0,
                maxHeadlineLength: 77,
                minSnippetLength: 700
            },
            Large_Slideshow_2col_4row: {
                classID: "Large_Slideshow_2col_4row",
                thumbnailHeight: 393,
                thumbnailWidth: 590,
                height: 59,
                width: 61,
                lastResort: false,
                weight: 2,
                minSnippetLength: 0
            },
            Medium_Slideshow_1col_2row: {
                classID: "Medium_Slideshow_1col_2row",
                thumbnailHeight: 151,
                thumbnailWidth: 280,
                height: 29,
                width: 30,
                lastResort: false,
                minSnippetLength: 0
            },
            Small_Slideshow_1col_1row: {
                classID: "Small_Slideshow_1col_1row",
                thumbnailHeight: 0,
                thumbnailWidth: 0,
                height: 14,
                width: 30,
                lastResort: true,
                minSnippetLength: 0
            },
            Large_Video_2col_4row: {
                classID: "Large_Video_2col_4row",
                thumbnailHeight: 382,
                thumbnailWidth: 590,
                height: 59,
                width: 61,
                lastResort: false,
                weight: 2,
                minSnippetLength: 110
            },
            Medium_Video_1col_2row: {
                classID: "Medium_Video_1col_2row",
                thumbnailHeight: 151,
                thumbnailWidth: 280,
                height: 29,
                width: 30,
                lastResort: false,
                minSnippetLength: 0
            },
            Small_Video_1col_1row: {
                classID: "Small_Video_1col_1row",
                thumbnailHeight: 0,
                thumbnailWidth: 0,
                height: 14,
                width: 30,
                lastResort: true,
                minSnippetLength: 0
            },
            Large_videoCluster: {
                classID: "Large_videoCluster",
                thumbnailHeight: 440,
                thumbnailWidth: 680,
                height: 44,
                width: 68,
                lastResort: false,
                weight: 2
            },
            Medium_videoCluster: {
                classID: "Medium_videoCluster",
                thumbnailHeight: 290,
                thumbnailWidth: 450,
                height: 29,
                width: 45,
                lastResort: false
            },
            Small_videoCluster: {
                classID: "Small_videoCluster",
                thumbnailHeight: 140,
                thumbnailWidth: 220,
                height: 14,
                width: 22,
                lastResort: true
            },
        },
        RulesList:
        [
            {
                type: "Frequency",
                count: 1,
                columns: 0,
                templateList: [
                    "Large_Square_2col_4row"
                ]
            },
            {
                type: "Frequency",
                count: 1,
                columns: 0,
                templateList: [
                    "Large_Landscape_2col_3row"
                ]
            },
            {
                type: "Frequency",
                count: 1,
                columns: 0,
                templateList: [
                    "Large_Landscape_2col_4row"
                ]
            },
            {
                type: "Frequency",
                count: 2,
                columns: 3,
                templateList: [
                    "None_LongHeadline_1col_3row"
                ]
            },
            {
                type: "Frequency",
                count: 1,
                columns: 4,
                templateList: [
                    "Large_Landscape_2col_4row"
                ]
            },
            {
                type: "Frequency",
                count: 5,
                columns: 4,
                templateList: [
                    "Medium_Landscape_1col_3row"
                ]
            },
            {
                type: "Frequency",
                count: 1,
                columns: 4,
                templateList: [
                    "Large_Square_2col_4row",
                    "Large_Landscape_2col_3row",
                    "Large_Landscape_2col_4row",
                    "Large_Slideshow_2col_4row",
                    "Large_Video_2col_4row"
                ]
            },
            {
                type: "Frequency",
                count: 1,
                columns: 4,
                templateList: [
                    "Small_Square_2col_2row"
                ]
            },
            {
                type: "Frequency",
                count: 1,
                columns: 4,
                templateList: [
                    "Medium_Portrait_1col_4row"
                ]
            },
            {
                type: "Frequency",
                count: 1,
                columns: 4,
                templateList: [
                    "Medium_Portrait_1col_4row",
                    "Large_Square_2col_4row"
                ]
            },
            {
                type: "Frequency",
                count: 1,
                columns: 4,
                templateList: [
                    "Large_videoCluster"
                ]
            },
            {
                type: "Position",
                minX: 0,
                minY: 1,
                maxX: 100,
                maxY: 100,
                templateList: [
                    "Large_Square_2col_4row",
                    "Large_Landscape_2col_3row",
                    "Large_Landscape_2col_4row",
                    "Large_Slideshow_2col_4row",
                    "Large_Video_2col_4row"
                ]
            }
        ]
    });
})();
(function () {

    "use strict";

    function createDomObjectFromXMLHTMLString(input, inputType) {
        if (!input || !inputType) return null;

        var domObject = null;
        switch (inputType) {
            case BingApps.Data.InputType.html:
                input = window.toStaticHTML(input);
                //switch case fall through here
            case BingApps.Data.InputType.xml:
                var textType = "text/" + inputType;
                var parser = new DOMParser();
                domObject = parser.parseFromString(input, textType);
                break;

            case BingApps.Data.InputType.plain:
                domObject = input;
                break;
            default: // return null
        }

        return domObject;
    }

    function DataConversionException(message) {
        this.name = "DataConversionException";
        this.message = message;
    }

    WinJS.Namespace.define("BingApps.Utilities", {
        createDomObjectFromXMLHTMLString: createDomObjectFromXMLHTMLString,
        DataConversionException: DataConversionException
    });

    function CssSelector(elementSelector, attributeName) {
        /// <signature helpKeyword="BingApps.Data.CssSelector">
        /// <summary locid="BingApps.Data.CssSelector">
        /// Constructor to create a CssSelector object
        /// </summary>
        /// <param name="elementSelector">Css Selector pattern to select the element(s)</param>
        /// <param name="attributeName">optional: Provide the attribute name if its value is the data needed</param>
        /// </signature>
        this.elementSelector = elementSelector;
        this.attributeName = attributeName;
    }

    WinJS.Namespace.define("BingApps.Data", {
        CssSelector: CssSelector,
        /// <field type="Object" locid="BingApps.Data.InputType" helpKeyword="BingApps.Data.InputType">
        /// Possible Input Types of Data conversion APIs
        /// </field>
        InputType: {
            xml: 'xml',
            html: 'html',
            plain: 'plain'
        }
    });

})();
(function () {

    "use strict";

    var sdk = BingApps.Data;
    var utils = BingApps.Utilities;

    var arConfigProperties = {
        AUTHOR: 'author',
        BYLINE: 'byline',
        HEADLINE: 'headline',
        KICKER: 'kicker',
        PUBLISHED_DATE: 'publishedDate',
        LAST_UPDATED_DATE: 'lastUpdatedDate',
        PUBLISHER: 'publisher',
        PUBLISHER_FAVICON: 'publisherFavicon',
        TITLE_IMAGE: 'titleImage',
        CONTENT: 'content'   // content will include both content and image
    };

    function convertToArticleReaderFormat(input, inputType, configObj) {
        /// <signature helpKeyword="BingApps.Data.convertToArticleReaderFormat">
        /// <summary locid="BingApps.Data.convertToArticleReaderFormat">
        /// Converts an XML/HTML/Plain string to a JSON object that the Article Reader expects
        /// </summary>
        /// <param name="input">The input string</param>
        /// <param name="inputType">Input Type should be one of BingApps.Data.InputType</param>
        /// <param name="configObj">The article reader configuration object that provides mapping</param>
        /// </signature>
        if (!input || !inputType || !configObj) return null;

        try {
            var domObject = utils.createDomObjectFromXMLHTMLString(input, inputType);
            var article = parseInputForArticleReader(inputType, domObject, configObj);
            var result = getArticleReaderData(article);
            return result;
        }
        catch (e) {
            Console.log(e.name + ":" + e.message);
        }
    }

    function parseInputForArticleReader(inputType, domObject, configObj) {
        if (!domObject || !configObj) {
            throw new utils.DataConversionException("Invalid Input in fn:parseInputForArticleReader");
        }

        var entity = null;
        switch (inputType) {
            case BingApps.Data.InputType.html:
            case BingApps.Data.InputType.xml:
                entity = parseXmlHtmlForArticleReader(domObject, configObj);
                break;
            case BingApps.Data.InputType.plain:
                entity = parsePlainText(domObject, configObj);
                break;
            default:
                throw new utils.DataConversionException("Invalid InputType in fn:parseInputForArticleReader");
        }

        return entity;
    }

    function parsePlainText(plainText, configObj) {

        var xmlDocument = null;

        /* The config object should contain only String if the input is plaintext */

        var article = {
            author: getAuthorForArticle(xmlDocument, configObj),
            byline: getBylineForArticle(xmlDocument, configObj),
            headline: getHeadlineForArticle(xmlDocument, configObj),
            kicker: getKickerForArticle(xmlDocument, configObj),
            date: getPublishedDateForArticle(xmlDocument, configObj),
            lastUpdatedDate: getLastUpdatedDateForArticle(xmlDocument, configObj),
            publisher: getPublisherForArticle(xmlDocument, configObj),
            titleImage: getTitleImageForArticle(xmlDocument, configObj),
            content: [convertToARBlock(plainText, 'Content')]  // convert the whole plain text to a content block
        }

        return article;
    }

    function parseXmlHtmlForArticleReader(xmlDocument, configObj) {

        var article = {
            author: getAuthorForArticle(xmlDocument, configObj),
            byline: getBylineForArticle(xmlDocument, configObj),
            headline: getHeadlineForArticle(xmlDocument, configObj),
            kicker: getKickerForArticle(xmlDocument, configObj),
            date: getPublishedDateForArticle(xmlDocument, configObj),
            lastUpdatedDate: getLastUpdatedDateForArticle(xmlDocument, configObj),
            publisher: getPublisherForArticle(xmlDocument, configObj),
            titleImage: getTitleImageForArticle(xmlDocument, configObj),
            content: getContentForArticle(xmlDocument, configObj),
        }

        return article;
    }

    function getAuthorForArticle(xmlDocument, configObj) {

        return getDataForArticle(xmlDocument, configObj, arConfigProperties.AUTHOR);
    }

    function getBylineForArticle(xmlDocument, configObj) {

        return getDataForArticle(xmlDocument, configObj, arConfigProperties.BYLINE);
    }

    function getHeadlineForArticle(xmlDocument, configObj) {

        return getDataForArticle(xmlDocument, configObj, arConfigProperties.HEADLINE);
    }

    function getKickerForArticle(xmlDocument, configObj) {

        return getDataForArticle(xmlDocument, configObj, arConfigProperties.KICKER);
    }

    function getPublishedDateForArticle(xmlDocument, configObj) {

        return getDataForArticle(xmlDocument, configObj, arConfigProperties.PUBLISHED_DATE);
    }

    function getLastUpdatedDateForArticle(xmlDocument, configObj) {

        return getDataForArticle(xmlDocument, configObj, arConfigProperties.LAST_UPDATED_DATE);
    }

    function getPublisherForArticle(xmlDocument, configObj) {
        var publisherName = getDataForArticle(xmlDocument, configObj, arConfigProperties.PUBLISHER);
        var publisherFavicon = getPublisherFaviconForArticle(xmlDocument, arConfigProperties.PUBLISHER_FAVICON);

        var publisher = {
            favicon: publisherFavicon,
            name: publisherName
        };

        return publisher;
    }

    function getPublisherFaviconForArticle(xmlDocument, configObj) {
        if (!configObj.hasOwnProperty(arConfigProperties.PUBLISHER_FAVICON)) {
            return null;
        }

        var publisherFavicon = null;
        var publisherFaviconSelector = configObj[arConfigProperties.PUBLISHER_FAVICON];

        switch (publisherFaviconSelector.constructor) {
            case sdk.CssSelector:
                var publisherFaviconNode = xmlDocument.querySelector(publisherFaviconSelector.elementSelector);
                if (publisherFaviconNode) {
                    publisherFavicon = createImageBlock(publisherFaviconNode);
                    publisherFavicon.name = "original";
                }
                break;

            case String:
                publisherFavicon = {
                    name: "original",
                    url: publisherFaviconSelector
                }
                break;

            default:  // return null
        }

        return publisherFavicon;
    }

    function getTitleImageForArticle(xmlDocument, configObj) {
        var titleImage = null;
        var titleImageNodes = getAllDataNodesForArticle(xmlDocument, configObj, arConfigProperties.TITLE_IMAGE);
        if (titleImageNodes) {
            titleImage = getTitleImageFromNodes(titleImageNodes);
        }

        return titleImage;
    }

    function getContentForArticle(xmlDocument, configObj) {
        var content = null;

        var streamContent = getAllDataNodesForArticle(xmlDocument, configObj, arConfigProperties.CONTENT);
        if (streamContent) {
            content = getContentBlocks(streamContent);
        }

        return content;
    }

    function getDataForArticle(xmlDocument, configObj, property) {
        if (!configObj.hasOwnProperty(property)) {
            return null;
        }
        var data = null;
        var dataSelector = configObj[property];

        switch (dataSelector.constructor) {
            case sdk.CssSelector:
                var dataNode = xmlDocument.querySelector(dataSelector.elementSelector);
                if (dataNode) {
                    if (dataSelector.attributeName) {
                        data = dataNode.getAttribute(dataSelector.attributeName);
                    }
                    else {
                        data = dataNode.textContent;
                    }
                }
                break;

            case String:
                data = dataSelector;
                break;

            default:  // return null
        }
        return data;
    }

    function getAllDataNodesForArticle(xmlDocument, configObj, property) {
        if (!configObj.hasOwnProperty(property)) {
            return null;
        }
        var data = null;
        var dataSelector = configObj[property];

        switch (dataSelector.constructor) {
            case sdk.CssSelector:
                data = xmlDocument.querySelectorAll(dataSelector.elementSelector);
                break;

            case String:
                data = dataSelector;
                break;

            default:  // return null
        }

        return data;
    }

    function getTitleImageFromNodes(titleImageNodes) {
        var titleImage = null;
        var maxWidth = 0;
        var originalImage = null;
        var lowResImage = null;
        for (var i = 0 ; i < titleImageNodes.length ; i++) {
            var curImage = createImageBlock(titleImageNodes[i]);
            if (curImage.width > maxWidth) {
                lowResImage = originalImage;
                originalImage = curImage;
            }
        }

        if (originalImage) {
            originalImage.name = "original";

            titleImage = {
                image: {
                    altText: originalImage.caption,
                    attribution: "",
                    caption: originalImage.caption,
                    images: [originalImage]
                },
                locationHint: "",
                sizeHint: 2,
                type: "TitleImage"
            }

            if (lowResImage) {
                lowResImage.name = "lowRes";
                titleImage.image.images.push(lowResImage);
            }
        }

        return titleImage;
    }

    function getContentBlocks(contentNode) {
        var contentBlocks = [];

        if (!contentNode || contentNode.length === 0) {
            contentBlocks.push(convertToARBlock("", "Content"));
        }
        else if (contentNode[0].hasChildNodes() &&
            contentNode[0].firstChild.nodeType === Node.CDATA_SECTION_NODE) { // For XML RSS feed containing Data
            var richTextString = contentNode[0].firstChild.nodeValue;
            contentBlocks = parseRichText(richTextString);
        }
        else {  // content blocks and image blocks
            for (var i = 0; i < contentNode.length; i++) {
                if (contentNode[i].nodeName === "IMG") {
                    contentBlocks.push(convertToARBlock(contentNode[i], "InlineImage"));
                }
                else {
                    contentBlocks.push(convertToARBlock(contentNode[i].outerHTML, "Content"));
                }
            }
        }

        return contentBlocks;
    }

    /* creating Content and image blocks from a mixed data */

    function parseRichText(richTextString) {
        var htmlString = "<body>" + richTextString + "</body>";

        var parser = new DOMParser();
        var htmlDoc = parser.parseFromString(htmlString, "text/html");
        var body = htmlDoc.body;
        var contentBlocks = [];

        var imageList = htmlDoc.getElementsByTagName("IMG");
        if (imageList.length === 0) {
            return contentBlocks.push(convertToARBlock(body.innerHTML, "Content"))
        }

        var newNode = body.cloneNode(false);
        var contentNode = newNode;
        var curNode = body.firstChild;
        var imgEncountered = false;

        // Navigate through the entire DOM Tree to create blocks 

        while (curNode) {
            if (curNode.nodeType === htmlDoc.ELEMENT_NODE && curNode.nodeName === "IMG") {
                contentBlocks.push(convertToARBlock(contentNode.innerHTML, "Content"));

                // if image has no resolution, drop the image

                var imgBlock = convertToARBlock(curNode, "InlineImage");
                if (imgBlock && imgBlock.image.images.length > 0
                    && imgBlock.image.images[0].width > 0) {
                    contentBlocks.push(imgBlock);
                }

                var pNode = curNode.parentNode;
                contentNode = newNode = pNode.cloneNode(false);
                while (pNode.nodeName !== "BODY") {
                    pNode = pNode.parentNode;
                    var dupNode = pNode.cloneNode(false);
                    dupNode.appendChild(contentNode);
                    contentNode = dupNode;
                }
                imgEncountered = true;
            }
            else {

                //append the current element to the tree we are building

                var newChildNode = curNode.cloneNode(false);
                newNode.appendChild(newChildNode);
                newNode = newChildNode;
                imgEncountered = false;
            }

            if (curNode.hasChildNodes()) {
                curNode = curNode.firstChild;
            }
            else if (curNode.nextSibling) {
                curNode = curNode.nextSibling;
                if (!imgEncountered) {
                    newNode = newNode.parentNode;
                }
            }
            else {

                // check for parent's sibling until the parent is the BODY Element

                var nodeFound = false;
                while (curNode.parentNode.nodeName !== "BODY") {
                    if (curNode.parentNode.nextSibling) {
                        curNode = curNode.parentNode.nextSibling;
                        newNode = newNode.parentNode;
                        if (!imgEncountered)
                            newNode = newNode.parentNode;
                        nodeFound = true;
                        break;
                    }
                    else {
                        curNode = curNode.parentNode;
                        newNode = newNode.parentNode;
                    }
                }
                if (!nodeFound)
                    curNode = null;
            }
        }
        if (contentNode.hasChildNodes()) {
            contentBlocks.push(convertToARBlock(contentNode.innerHTML, "Content"));
        }
        return contentBlocks;
    }

    function convertToARBlock(content, type) {
        var block = {
            type: type
        };

        switch (type) {

            case 'Content':
                block.attributes = { content: content };
                break;

            case 'InlineImage':

                block.attributes = {
                    image: {
                        altText: content.getAttribute("alt") || "",
                        attribution: "",
                        caption: "",
                        images: [
                             {
                                 name: "original",
                                 url: content.getAttribute("src") || null,
                                 height: parseInt(content.getAttribute("height")) || 0,
                                 width: parseInt(content.getAttribute("width")) || 0
                             }
                        ],
                        locationHint: "",
                        sizeHint: 2
                    }
                }
                break;

            default: //do nothing

        }
        return block;
    }

    function createImageBlock(image) {
        if (!image) return null;

        var imageBlock = {
            url: image.getAttribute("src") || null,
            height: parseInt(image.getAttribute("height")) || 0,
            width: parseInt(image.getAttribute("width")) || 0,
            caption: image.getAttribute("alt")
        };

        return imageBlock;
    }

    function getArticleReaderData(article) {
        if (!article) return null;

        var arData = {
            title: {
                allowAds: true,
                author: article.author,
                byline: article.byline,
                date: article.date,
                headline: article.headline,
                kicker: article.kicker,
                lastUpdatedDate: article.lastUpdatedDate,
                publisher: article.publisher,
                titleImage: article.titleImage,
                style: 2
            },
            blocks: article.content,
        }

        return arData;
    }

    WinJS.Namespace.define("BingApps.Data", {
        convertToArticleReaderFormat: convertToArticleReaderFormat,
    });
})();
(function () {
    "use strict";

    var sdk = BingApps.Data;
    var utils = BingApps.Utilities;

    // This gives mapping between EntityCluster properties and EntityCluster Config Object properties

    var ecConfigProperties = {
        ITEM: 'item',
        ITEM_INFO: 'itemInfo',
        GUID: 'guid',
        TITLE: 'title',
        PUBLISH_TIME: 'publishDate',
        ARTICLE_URL: 'link',
        SNIPPET: 'snippet',
        SOURCE: 'source',
        SOURCE_IMAGE_URL: 'sourceImageUrl',
        IMAGE_ATTRIBUTION: 'imageAttribution',
        THUMBNAIL: 'thumbnail',
        VIDEO: 'video'
    };

    function convertToEntityClusterFormat(input, inputType, configObj) {
        /// <signature helpKeyword="BingApps.Data.convertToEntityClusterFormat">
        /// <summary locid="BingApps.Data.convertToEntityClusterFormat">
        /// Converts an Xml or html string to an array of entities to act as entity cluster data source
        /// </summary>
        /// <param name="input">The input string</param>
        /// <param name="inputType">Input Type should be BingApps.Data.InputType.xml or BingApps.Data.InputType.html</param>
        /// <param name="configObj">The entity cluster configuration object that provides mapping</param>
        /// </signature>
        if (!input || !inputType || !configObj) return null;

        try {
            var domObject = utils.createDomObjectFromXMLHTMLString(input, inputType);
            var result = parseInputForEntityCluster(inputType, domObject, configObj);
            return result;
        }
        catch (e) {
            Console.log(e.name + ":" + e.message);
        }
    }

    function parseInputForEntityCluster(inputType, domObject, configObj) {
        if (!domObject || !configObj) {
            throw new utils.DataConversionException("Invalid Input in fn:parseInputForEntityCluster");
        }

        var entity = null;
        switch (inputType) {
            case BingApps.Data.InputType.xml:
            case BingApps.Data.InputType.html:
                entity = parseXmlHtmlForEntityCluster(domObject, configObj);
                break;
            default:
                throw new utils.DataConversionException("Invalid InputType in fn:parseInputForEntityCluster");
        }

        return entity;
    }

    function parseXmlHtmlForEntityCluster(xmlDocument, configObj) {
        var results = [];
        var entityRecord = null;

        if (!configObj.hasOwnProperty(ecConfigProperties.ITEM) ||
            !configObj.hasOwnProperty(ecConfigProperties.ITEM_INFO)) {
            throw new utils.DataConversionException("Invalid configObject in fn:parseXmlHtmlForEntityCluster");
        }

        var items = getItemsForEntityCluster(xmlDocument, configObj);
        configObj = configObj[ecConfigProperties.ITEM_INFO];

        for (var i = 0, len = items.length; i < len; i++) {
            var current = items[i];
            entityRecord = {
                item: current,
                guid: getGuidForEntity(current, configObj),
                title: getTitleForEntity(current, configObj),
                source: getSourceForEntity(current, configObj),
                publishTime: getPublishTimeForEntity(current, configObj),
                link: getArticleUrlForEntity(current, configObj),
                snippet: getSnippetForEntity(current, configObj),
                sourceImageUrl: getSourceImageUrlForEntity(current, configObj),
                imageAttribution: getImageAttributionForEntity(current, configObj),
                thumbnail: getThumbnailForEntity(current, configObj)
            }
            if (entityRecord.thumbnail && entityRecord.thumbnail.videoOptions) {
                entityRecord.templateClass = 'Video';
            }

            results.push(entityRecord);
        }

        return results;
    }

    function getItemsForEntityCluster(xmlDocument, configObj) {

        return getAllData(xmlDocument, configObj, ecConfigProperties.ITEM);
    }

    function getGuidForEntity(xmlElement, configObj) {

        return getDataForEntity(xmlElement, configObj, ecConfigProperties.GUID);
    }

    function getTitleForEntity(xmlElement, configObj) {

        return getDataForEntity(xmlElement, configObj, ecConfigProperties.TITLE);
    }

    function getSourceForEntity(xmlElement, configObj) {

        return getDataForEntity(xmlElement, configObj, ecConfigProperties.SOURCE);
    }

    function getPublishTimeForEntity(xmlElement, configObj) {

        return getDataForEntity(xmlElement, configObj, ecConfigProperties.PUBLISH_TIME);
    }

    function getArticleUrlForEntity(xmlElement, configObj) {

        return getDataForEntity(xmlElement, configObj, ecConfigProperties.ARTICLE_URL);
    }

    function getSnippetForEntity(xmlElement, configObj) {

        return getDataForEntity(xmlElement, configObj, ecConfigProperties.SNIPPET);
    }

    function getSourceImageUrlForEntity(xmlElement, configObj) {

        return getDataForEntity(xmlElement, configObj, ecConfigProperties.SOURCE_IMAGE_URL);
    }

    function getImageAttributionForEntity(xmlElement, configObj) {

        return getDataForEntity(xmlElement, configObj, ecConfigProperties.IMAGE_ATTRIBUTION);
    }

    function getThumbnailForEntity(xmlElement, configObj) {
        var thumbnail = null;
        var thumbnailNode = getAllData(xmlElement, configObj, ecConfigProperties.THUMBNAIL)
        if (thumbnailNode) {
            thumbnail = createThumbnailFromNodes(thumbnailNode);
            if (thumbnail) {
                thumbnail.videoOptions = getVideoForThumbnail(xmlElement, configObj);
            }
        }

        return thumbnail;
    }

    function getVideoForThumbnail(xmlElement, configObj) {
        var video = null;
        var videoNode = getAllData(xmlElement, configObj, ecConfigProperties.VIDEO);
        if (videoNode) {
            video = createVideoOptionsFromNodes(videoNode);
        }

        return video;
    }

    function createVideoOptionsFromNodes(videoNode) {
        if (!videoNode) return null;
        var videoOptions = null;

        for (var i = 0, len = videoNode.length ; i < len ; i++) {
            var videoType = videoNode[i].getAttribute("type") || null;
            if (videoType === "video/mp4") {
                videoOptions = {
                    videoSource: videoNode[i].getAttribute('url') || null,
                    source: "",
                    sourceImageUrl: "",
                    title: ""
                }
                break;
            }
        }

        return videoOptions;
    }

    function createThumbnailFromNodes(thumbnailNode) {
        if (!thumbnailNode) return null;

        var thumbnail = null;
        var maxWidth = 0;
        for (var i = 0, len = thumbnailNode.length; i < len; i++) {
            var imageBlock = {
                url: thumbnailNode[i].getAttribute("url") || null,
                height: parseInt(thumbnailNode[i].getAttribute("height")) || 0,
                width: parseInt(thumbnailNode[i].getAttribute("width")) || 0,
            };

            if (imageBlock.width > maxWidth) {
                thumbnail = imageBlock;
                maxWidth = imageBlock.width;
            }
        }

        return thumbnail;
    }

    function getAllData(xmlDocument, configObj, property) {
        if (!configObj.hasOwnProperty(property)) {
            return null;
        }
        var dataNode = null;
        var dataSelector = configObj[property];
        if (dataSelector.constructor === sdk.CssSelector) {
            dataNode = xmlDocument.querySelectorAll(dataSelector.elementSelector);
        }

        return dataNode;
    }

    function getDataForEntity(xmlDocument, configObj, property) {
        if (!configObj.hasOwnProperty(property)) {
            return null;
        }
        var data = null;
        var dataSelector = configObj[property];

        switch (dataSelector.constructor) {
            case sdk.CssSelector:
                var dataNode = xmlDocument.querySelector(dataSelector.elementSelector);
                if (dataNode) {
                    if (dataSelector.attributeName) {
                        data = dataNode.getAttribute(dataSelector.attributeName);
                    }
                    else {
                        data = dataNode.textContent;
                    }
                }
                break;

            case String:
                data = dataSelector;
                break;

            default:  // return null
        }

        return data;
    }

    WinJS.Namespace.define("BingApps.Data", {
        convertToEntityClusterFormat: convertToEntityClusterFormat
    });

}());
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    var leftArrowGlyph = "&#57570;";
    var rightArrowGlyph = "&#57571;";

    // PaginatedViewManager is a common helper class that owns the flip view style left and right buttons.
    // It creates the UI for next/previous buttons, handle their mouse behavior(clicks and move) and animate them in and out.
    // It exposes the following interface to its subclass: _getContainerElement(), _hasNextPage(), _hasPreviousPage(), _goNextPage() and _goPreviousPage().
    WinJS.Namespace.define("BingApps.UI.Slideshow", {
        PaginatedViewManager: WinJS.Class.define(
            function (options) {
                var eventListeners = this._eventListeners = [];

                // page buttons
                var elt = this._elt = this._getContainerElement();
                var rtl = window.getComputedStyle(elt, null).direction === "rtl";

                var nextPageButton = this._nextPageButton = document.createElement("button");
                nextPageButton.style.visibility = "hidden";
                nextPageButton.setAttribute("tabIndex", -1);
                nextPageButton.setAttribute("aria-hidden", "true");
                nextPageButton.innerHTML = rtl ? leftArrowGlyph : rightArrowGlyph;
                WinJS.Utilities.addClass(nextPageButton, "win-navbutton");
                WinJS.Utilities.addClass(nextPageButton, rtl ? "win-navleft" : "win-navright");
                elt.appendChild(nextPageButton);

                var previousPageButton = this._previousPageButton = document.createElement("button");
                previousPageButton.style.visibility = "hidden";
                previousPageButton.setAttribute("tabIndex", -1);
                previousPageButton.setAttribute("aria-hidden", "true");
                previousPageButton.innerHTML = rtl ? rightArrowGlyph : leftArrowGlyph;
                WinJS.Utilities.addClass(previousPageButton, "win-navbutton");
                WinJS.Utilities.addClass(previousPageButton, rtl ? "win-navright" : "win-navleft");
                elt.appendChild(previousPageButton);

                // events
                this._attach(nextPageButton, "click", this._onNextPageClick);
                this._attach(nextPageButton, "mouseover", this._onPageButtonMouseOver);
                this._attach(nextPageButton, "mouseout", this._onPageButtonMouseOut);
                this._attach(previousPageButton, "click", this._onPreviousPageClick);
                this._attach(previousPageButton, "mouseover", this._onPageButtonMouseOver);
                this._attach(previousPageButton, "mouseout", this._onPageButtonMouseOut);

                this._buttonFadePromise = null;
                this._nextPageButtonPromise = null;
                this._previousPageButtonPromise = null;
                this._buttonsVisible = false;
                this._touch = false;
            },
            {
                _elt: null,
                _eventListeners: null,
                _nextPageButton: null,
                _previousPageButton: null,
                _buttonFadePromise: null,
                _buttonsVisible: null,
                _nextPageButtonPromise: null,
                _previousPageButtonPromise: null,
                _pageButtonOnHover: null,
                _touch: null,

                dispose: function () {
                    try {
                        var eventListeners = this._eventListeners;
                        for (var i = 0, len = eventListeners.length; i < len; i++) {
                            var eventListener = eventListeners[i];
                            var elt = eventListener.elt;
                            var name = eventListener.name;
                            var listener = eventListener.listener;
                            elt.removeEventListener(name, listener);
                        }
                    } catch (ex) {
                        //HACK: silence exceptions
                    }

                    var buttonFadePromise = this._buttonFadePromise;
                    if (buttonFadePromise) {
                        buttonFadePromise.cancel();
                    }
                },

                _attach: function (elt, name, listener) {
                    var eventListeners = this._eventListeners;

                    var l = listener.bind(this);
                    elt.addEventListener(name, l);
                    eventListeners.push({
                        elt: elt,
                        name: name,
                        listener: l,
                    });
                },

                _pointerHoverListener: function (event) {
                    this._detectTouch(event);
                    this._maybeShowButtons(event);
                },

                _pointerMoveListener: function (event) {
                    this._detectTouch(event);
                    this._maybeShowButtons(event);
                },

                _pointerDownListener: function (event) {
                    this._detectTouch(event);

                    // block middle mouse button click
                    if ((event.buttons & 4) !== 0) {
                        event.stopPropagation();
                        event.preventDefault();
                    }
                },

                _detectTouch: function (event) {
                    if (event.pointerType === event.MSPOINTER_TYPE_TOUCH) {
                        this._fadeOutButtons(true);
                        this._touch = true;
                    }
                    else {
                        this._touch = false;
                    }
                },

                _maybeShowButtons: function (event) {
                    if (event.pointerType !== event.MSPOINTER_TYPE_TOUCH) {
                        this._showButtons();
                    }
                },

                _maybeUpdateButtons: function (event) {
                    var buttonsVisible = this._buttonsVisible;
                    if (buttonsVisible) {
                        this._showButtons();
                    }
                },

                _showButtons: function () {
                    this._fadeInButtons();
                    this._fadeOutButtons(false);
                },

                _fadeInButtons: function () {
                    var hasNextPage = this._hasNext();
                    this._animateButton("next", hasNextPage);

                    var hasPreviousPage = this._hasPrevious();
                    this._animateButton("previous", hasPreviousPage);

                    this._buttonsVisible = true;
                },

                _fadeOutButtons: function (immediate) {
                    var that = this;

                    var buttonFadePromise = this._buttonFadePromise;
                    if (buttonFadePromise) {
                        buttonFadePromise.cancel();
                        this._buttonFadePromise = null;
                    }

                    var pageButtonOnHover = this._pageButtonOnHover;

                    if (!pageButtonOnHover || (pageButtonOnHover === "next" && !this._hasNext())
                        || (pageButtonOnHover === "prev" && !this._hasPrevious())) {
                        this._buttonFadePromise = WinJS.Promise.timeout(immediate ? 0 : 3000)
                        .then(function () {
                            that._animateButton("next", false);
                            that._animateButton("previous", false);

                            that._buttonFadePromise = null;
                            that._buttonsVisible = false;
                        });
                    }
                },

                _animateButton: function (button, visible) {
                    var elt;
                    var promise;
                    switch (button) {
                        case "next":
                            elt = this._nextPageButton;
                            promise = this._nextPageButtonPromise;
                            break;
                        case "previous":
                            elt = this._previousPageButton;
                            promise = this._previousPageButtonPromise;
                            break;
                    }

                    if (elt) {
                        if (promise) {
                            promise.cancel();
                        }


                        if (visible) {
                            elt.style.visibility = "visible";
                            promise = WinJS.UI.executeTransition(
                                elt,
                                {
                                    property: "opacity",
                                    delay: 0,
                                    duration: 167,
                                    timing: "linear",
                                    to: 1
                                });
                        }
                        else {
                            promise = WinJS.UI.Animation.fadeOut(elt)
                            .then(function () {
                                elt.style.visibility = "hidden";
                            });
                        }
                    }

                    switch (button) {
                        case "next":
                            this._nextPageButtonPromise = promise;
                            break;
                        case "previous":
                            this._previousPageButtonPromise = promise;
                            break;
                    }
                },

                _stopPropagation: function (event) {
                    event.stopPropagation();
                },

                _onPageButtonMouseOver: function (event) {
                    switch (event.target) {
                        case this._nextPageButton:
                            this._pageButtonOnHover = "next";
                            break;
                        case this._previousPageButton:
                            this._pageButtonOnHover = "prev";
                            break;
                    }
                },

                _onPageButtonMouseOut: function(event) {
                    this._pageButtonOnHover = null;
                },

                _manipulationListener: function (event) {
                    this._touch = true;
                },

                _getContainerElement: function () {
                    throw "_getContainerElement() needs to be implemented by the subclass";
                },

                _hasNext: function () {
                    throw "_hasNext() needs to be implemented by the subclass";
                },

                _hasPrevious: function () {
                    throw "_hasPrevious() needs to be implemented by the subclass";
                },

                _onNextPageClick: function (event) {
                    throw "_onNextPageClick() needs to be implemented by the subclass";
                },

                _onPreviousPageClick: function (event) {
                    throw "_onPreviousPageClick() needs to be implemented by the subclass";
                },
            }),
    });
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function () {
    "use strict";

    // SlideshowPaginatedViewManager is derived from PaginatedViewManager.
    // It owns the scroll event in slideshow and implements the interface exposed from baseclass for slideshow.
    // All other events are inherited from WinJS.UI.FlipView.
    WinJS.Namespace.define("BingApps.UI.Slideshow", {
        SlideshowPaginatedViewManager: WinJS.Class.derive(BingApps.UI.Slideshow.PaginatedViewManager, function (options) {
            this._controller = options.controller;

            BingApps.UI.Slideshow.PaginatedViewManager.call(this, options);

            // events
            var panningDiv = this._controller._panningDivContainer;
            if (panningDiv) {
                this._attach(panningDiv, "scroll", this._onScroll);
                this._attach(panningDiv, "wheel", this._onWheel);
            }
        },
            {
                _controller: null,

                attachEventListeners: function (elt) {
                    this._attach(elt, "MSPointerHover", this._pointerHoverListener);
                    this._attach(elt, "MSPointerMove", this._pointerMoveListener);
                    this._attach(elt, "MSPointerDown", this._pointerDownListener);
                    this._attach(elt, "MSManipulationStateChanged", this._manipulationListener);
                },

                exclude: function (elt) {
                    var stopPropagation = this._stopPropagation.bind(this);

                    this._attach(elt, "MSPointerHover", stopPropagation);
                    this._attach(elt, "MSPointerMove", stopPropagation);
                    this._attach(elt, "MSPointerDown", stopPropagation);
                    this._attach(elt, "MSManipulationStateChanged", stopPropagation);
                },

                _getContainerElement: function () {
                    return this._controller._contentDiv;
                },

                _hasNext: function () {
                    return this._controller._hasNextContent;
                },

                _hasPrevious: function () {
                    return this._controller._hasPrevContent;
                },

                _onNextPageClick: function (event) {
                    this._controller.next();
                    this._firePageTransitionEvent();
                },

                _onPreviousPageClick: function (event) {
                    this._controller.previous();
                    this._firePageTransitionEvent();
                },

                _onScroll: function (event) {
                    this._maybeUpdateButtons();
                },

                _onWheel: function (event) {
                    if (!event.ctrlKey) {
                        if (event.deltaY > 0) {
                            this.scrollOneSlide(1);
                        }
                        else if (event.deltaY < 0) {
                            this.scrollOneSlide(2);
                        }
                    }
                },

                _firePageTransitionEvent: function () {
                    var that = this;
                    var controller = this._controller;
                    WinJS.Promise.timeout(0).then(function () {
                        return controller.count();
                    }).done(function (slideCount) {
                        var eventData = {
                            instrumentationData: {
                                currentIndex: controller.currentPage,
                                count: slideCount
                            }
                        };
                        that.dispatchEvent("pagetransition", eventData);
                    });
                },

                scrollOneSlide: function (direction) {
                    /// <summary>
                    /// Scrolls the viewport by one slide. direction = 1 means scroll next, direction = 2 means scroll previous.
                    /// </summary>
                    var that = this;
                    var panel = this._controller._panningDiv;
                    var viewport = this._controller._panningDivContainer;

                    var modifier = 0;
                    if (direction === 1) {
                        modifier = 1;
                    }
                    else if (direction === 2) {
                        modifier = -1;
                    }

                    var marketDirection = window.getComputedStyle(viewport).direction;
                    var directionModifier = marketDirection === "ltr" ? -1 : 1;

                    if ((direction === 1 && this._hasNext()) || (direction === 2 && this._hasPrevious())) {
                        var currentPage = this._controller._pageManager._currentPage;
                        var scrollLeft = currentPage.location;
                        var newScrollLeft = direction === 1 ? currentPage.next.location : currentPage.prev.location;
                        var offset = Math.abs(newScrollLeft - scrollLeft);

                        panel.style.msTransitionProperty = "transform";
                        panel.style.msTransitionDuration = "0.25s";
                        panel.style.msTransform = "translate(" + ((modifier * offset) * directionModifier) + "px, 0px)";

                        clearTimeout(this._scrollAnimationTimeout);

                        this._scrollAnimationTimeout = setTimeout(function () {
                            panel.style.msTransitionProperty = "";
                            panel.style.msTransitionDuration = "";
                            panel.style.msTransform = "";
                            viewport.scrollLeft = newScrollLeft;
                            that._firePageTransitionEvent();
                        }, 260);
                    }
                }
            })
    });

    WinJS.Class.mix(BingApps.UI.Slideshow.SlideshowPaginatedViewManager,
        WinJS.Utilities.eventMixin,
        WinJS.Utilities.createEventProperties("pagetransition"));
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function appexCommonControlsSlideshowControlInit() {
    "use strict";

    WinJS.Namespace.define("BingApps.UI.Slideshow", {
        ImageCard: WinJS.Class.define(function imageCard_ctor(element, options) {
            element = element || document.createElement("div");
            element.winControl = this;
            this._zoomInEnabled = true;
            WinJS.UI.setOptions(this, options);
            this._init(element);
            this._setImage(this._imageCardUrl);
        },
        {
            _error: false,
            _currentZoomLevel: 1,

            cropImage: {
                get: function () {
                    return this._crop;
                },
                set: function (value) {
                    this._crop = value;
                }
            },

            showErrorInfo: {
                get: function () {
                    return this._showErrorInfo;
                },
                set: function (v) {
                    this._showErrorInfo = v;
                }
            },

            fill: {
                get: function () {
                    return this._fill;
                },
                set: function (v) {
                    this._fill = v;
                }
            },

            zoomInEnabled: {
                get: function () {
                    return this._zoomInEnabled;
                },
                set: function (v) {
                    this._zoomInEnabled = v;
                }
            },

            pageIndex: {
                get: function () {
                    return this._pageIndex;
                },
                set: function (v) {
                    this._pageIndex = v;
                }
            },

            alternateText: {
                get: function () {
                    return this._alternateText;
                },
                set: function (value) {
                    this._alternateText = value;
                }
            },

            imageSource: {
                set: function (value) {
                    if (typeof value === "string") {
                        this._imageCardUrl = value;
                    } else {
                        this._imageCardUrl = value.url;
                        this._width = value.width;
                        this._height = value.height;
                    }
                }
            },

            zoomState: {
                min: 1,     // 100% of the image size
                max: 5,     // 500% of the image size
                DistancePerKeystroke: .25,
                DistancePerWheelDelta: -.4 / (document.documentElement.clientHeight * .15),
            },

            // Setting up optical zoom support
            initializeOpticalZoom: function () {
                this._imgElementDiv.addEventListener("wheel", this._handleWheel.bind(this));

                var zoomedInElement = document.querySelector(".ssZoomIn");
                if (zoomedInElement) {
                    this._ssZoomedInView = zoomedInElement.winControl;
                }
            },

            resetZoom: function () {
                if (!this.zoomInEnabled) {
                    return;
                }

                var that = this;
                setImmediate(function () {
                    var container = that._imgElementDiv;

                    // if the image was zoomed using mouse/keyboard
                    container.style["transition-property"] = "-ms-transform";
                    container.style["transform"] = "scale(1)";
                    that._currentZoomLevel = 1;

                    // if the image was zoomed-in using touch gesture
                    var zoomElement = container.parentNode;
                    if (zoomElement) {
                        zoomElement.msContentZoomFactor = 1;
                    }
                });
            },

            /// <summary>
            /// If the image is at the original size, it cannot (optical) zoom-out further.
            /// </summary>
            canZoomOut: function () {
                return !(this._currentZoomLevel <= this.zoomState.min);
            },

            handleKeyDown: function (eventObject) {
                if (!eventObject.ctrlKey) {
                    return;
                }

                // image not in view. no need to perform zooming operations.
                if (WinJS.Utilities.hasClass(this._imgElementDiv, "platformHide")) {
                    return;
                }

                // No need to perform optical zoom, if the current state is zoomed out.
                var semanticZoomControl = document.querySelector(".ssSemanticZoomDom");
                if (semanticZoomControl && semanticZoomControl.winControl && semanticZoomControl.winControl.zoomedOut) {
                    return;
                }

                if (this._ssZoomedInView && this.pageIndex !== this._ssZoomedInView.currentPage) {
                    return;
                }

                var distance;
                var Key = WinJS.Utilities.Key;
                switch (eventObject.keyCode) {
                    case Key.add:
                    case Key.equal:
                        distance = 1;
                        break;
                    case Key.subtract:
                    case Key.dash:
                        distance = -1;
                        break;
                    default:
                        return;
                }

                distance = distance * this.zoomState.DistancePerKeystroke;
                var x = 0.5 * window.innerWidth;
                var y = 0.5 * window.innerHeight;

                var processed = this._performZoom(distance, x, y);

                if (processed) {
                    eventObject.stopPropagation();
                    eventObject.preventDefault();
                    return true;
                }
            },

            _init: function (element) {
                this._domElement = element;

                if (this.alternateText) {
                    this._domElement.setAttribute("aria-label", this.alternateText);
                }

                // Create the image element
                this._imgElementDiv = document.createElement("div");
                this._imgElement = document.createElement("img");
                WinJS.Utilities.addClass(this._imgElementDiv, "platformImageCardImage platformHide");

                WinJS.Utilities.addClass(this._imgElement, "ssImage");
                this._imgElementDiv.appendChild(this._imgElement);

                if (this.zoomInEnabled) {
                    this.initializeOpticalZoom();
                }

                // placeholder image
                var placeholderElement = this._placeholderElement = document.createElement("div");

                WinJS.Utilities.addClass(placeholderElement, "platformImageCardPlaceholder");
                this._domElement.appendChild(placeholderElement);

                // icon element
                var iconElement = document.createElement("div");
                WinJS.Utilities.addClass(iconElement, "platformImageCardPlaceholderIcon platformCameraIcon");
                placeholderElement.appendChild(iconElement);
                this._iconElement = iconElement;

                // progress element
                var progressElement = document.createElement("progress");
                WinJS.Utilities.addClass(progressElement, "platformImageCardPlaceholderProgress win-ring");
                placeholderElement.appendChild(progressElement);
                this._progressElement = progressElement;
                placeholderElement.appendChild(progressElement);

                // show progress in placeholder initially
                this._showPlaceholder();

                this._domElement.appendChild(this._imgElementDiv);
                WinJS.Utilities.addClass(this._domElement, "platformPlaceHolderMedium");
            },

            _handleWheel: function (eventObject) {
                if (!eventObject.ctrlKey || eventObject.deltaY === 0) {
                    return;
                }

                var distance = eventObject.deltaY * this.zoomState.DistancePerWheelDelta;
                var x = eventObject.offsetX;
                var y = eventObject.offsetY;

                // if there are margins around the image, those need to be taken care of.
                var tempElement = eventObject.srcElement;
                while (tempElement && tempElement !== this._imgElementDiv) {
                    x += tempElement.offsetLeft;
                    y += tempElement.offsetTop;
                    tempElement = tempElement.parentNode;
                }

                this._performZoom(distance, x, y);
            },

            _performZoom: function (distance, x, y) {
                var container = this._imgElementDiv;
                var currentZoomLevel = this._currentZoomLevel;
                var minZoomLevel = this.zoomState.min;
                var maxZoomLevel = this.zoomState.max;

                if (!this.zoomInEnabled) {
                    return false;
                }

                if ((currentZoomLevel <= minZoomLevel && distance < 0) ||
                    (currentZoomLevel >= maxZoomLevel && distance > 0)) {
                    return false;
                }

                this._currentZoomLevel = currentZoomLevel = currentZoomLevel + distance;
                if (currentZoomLevel < minZoomLevel) {
                    currentZoomLevel = minZoomLevel;
                }
                else if (currentZoomLevel > maxZoomLevel) {
                    currentZoomLevel = maxZoomLevel;
                }

                var zoString = x.toFixed() + "px " + y.toFixed() + "px";

                container.style["transition-property"] = "-ms-transform";
                container.style["transition-timing-function"] = "linear";
                container.style["transform-origin"] = zoString;
                container.style["transform"] = "scale(" + currentZoomLevel + ")";

                return true;
            },

            _setImage: function (url) {
                var that = this;
                var img = that._imgElement;
                //need to do this because the ie cache doesn't get cleared. 
                //when internet connection drops and comes back, the page doesn't refresh if the same url is used
                // a random string of length 4 is generated and attached to the anchor tag to circumvent this
                if (this._error) {
                    url += "#" + Math.random().toString(36).substring(2, 6);
                }

                img.src = url;
                var container = this.container || this._domElement;

                img.addEventListener("load", this._handleOnLoad.bind(this), false);
                img.addEventListener("error", this._handleImageError.bind(this), false);
            },

            _showPlaceholder: function () {
                this._toggleProgress(true);
                this._toggleIcon(false);

                // show the placeholder
                this._togglePlaceholder(true);
            },

            _refresh: function () {
                BingApps.UI.Slideshow.Utilities.setInnerHtml(this._domElement, "");
                this._init(this._domElement);
                this._setImage(this._imageCardUrl);
            },

            _handleImageError: function (err) {
                var that = this;

                // turn off progress ring
                this._toggleProgress(false);

                // turn on the camera icon
                this._toggleIcon(true);

                // turn on the placeholder
                this._togglePlaceholder(true);
            },

            _toggleElement: function (element, show) {
                /// <summary>
                /// Shows or hides the given element.
                /// </summary>
                if (element) {
                    if (show) {
                        WinJS.Utilities.removeClass(element, "platformHide");
                    } else {
                        WinJS.Utilities.addClass(element, "platformHide");
                    }
                }
            },

            _toggleProgress: function (show) {
                /// <summary>
                /// Shows or hides the progress ring.
                /// </summary>
                this._toggleElement(this._progressElement, show);
            },

            _togglePlaceholder: function (show) {
                /// <summary>
                /// Shows or hides the entire placeholder.
                /// </summary>
                this._toggleElement(this._placeholderElement, show);
            },

            _toggleIcon: function (show) {
                var placeholderImageElement = this._placeholderElement;
                var that = this;
                /// <summary>
                /// Shows or hides the camera icon.
                /// </summary>
                if (show && that.showErrorInfo) {
                    var className = "ssError";

                    var domElement = placeholderImageElement.querySelector("." + className);
                    if (!domElement) {
                        domElement = document.createElement("div");
                        WinJS.Utilities.addClass(domElement, className);
                        placeholderImageElement.appendChild(domElement);
                        WinJS.Utilities.addClass(placeholderImageElement, className);
                        var retryFunction = WinJS.Utilities.markSupportedForProcessing(function imageCard_retryFunction(evt) {
                            that._refresh();
                        });
                        var data;

                        if (!window.navigator.onLine) {
                            data = BingApps.Utilities.Error.getErrorModuleItem(retryFunction, "450px", "100%", "BingApps/offline_noContent", "platformOfflineErrorModule");
                        } else {
                            data = BingApps.Utilities.Error.getErrorModuleItem(retryFunction, "450px", "100%");
                        }

                        var moduleInfo = data.moduleInfo;
                        // create error container
                        var container = document.createElement("div");
                        container.style.width = moduleInfo.width;
                        container.style.height = moduleInfo.height;
                        BingApps.UI.Slideshow.Utilities.setInnerHtml(domElement, "");
                        domElement.appendChild(container);

                        // render error module
                        BingApps.Utilities.loadModule(moduleInfo, data, container);
                        this._error = true;
                    }

                    this._toggleElement(this._iconElement, false);
                } else {
                    this._toggleElement(this._iconElement, show);
                }

            },

            _removePlaceholderImage: function () {

                if (this._placeholderElement.parentNode === this._domElement) {
                    this._domElement.removeChild(this._placeholderElement);
                }
                this._placeholderElement = null;
            },

            _handleOnLoad: function (e) {
                var that = this;
                this._error = false;
                WinJS.Utilities.addClass(that._imgElement, BingApps.UI.Slideshow.Constants.ssImageLoaded);
                var alt = this.alternateText ? this.alternateText : BingApps.UI.Slideshow.STRINGS.SLIDE;
                that._imgElement.setAttribute("alt", alt);
                that._showImageOnload(e.srcElement);
            },

            autoAdjustImageSize: function (img, fill) {
                var w = this._width ? this._width : img.naturalWidth,
                    h = this._height ? this._height : img.naturalHeight,
                    imgParentNode = img.parentNode,
                    container = (imgParentNode && imgParentNode.parentNode) ? imgParentNode.parentNode : null;

                // image bigger than container
                if (container && (fill || (w >= container.clientWidth || h >= container.clientHeight))) {
                    var newSize = this._calculateImageDisplaySize(w, h, container);
                    img.setAttribute("width", newSize.width);
                    img.setAttribute("height", newSize.height);
                }
                else {
                    img.setAttribute("width", w);
                    img.setAttribute("height", h);
                }
            },

            _showImageOnload: function (img) {
                var that = this;

                this.autoAdjustImageSize(img, that.fill);

                WinJS.Utilities.removeClass(img.parentNode, "platformHide");

                if (this._placeholderElement !== null) {
                    if (!WinJS.Utilities.hasClass(this._placeholderElement, "platformHide")) {
                        WinJS.UI.Animation.crossFade(img, this._placeholderElement).then(function imageCard_crossFadeComplete() {
                            that._removePlaceholderImage();
                        });
                    } else {
                        that._removePlaceholderImage();
                    }
                }
            },

            _cropImageOnload: function (img) {
                WinJS.Utilities.removeClass(img.parentNode, "platformHide");
                var loadPos = calcPos(img);
                setImagePos(img, loadPos);
                if (this._placeholderElement !== null) {
                    this._removePlaceholderImage();
                }
                function calcPos(imgElement) {
                    var container = imgElement.parentNode;
                    var cw = container.clientWidth, ch = container.clientHeight;
                    var imageW = imgElement.naturalWidth, imageH = imgElement.naturalHeight;

                    var ratio = cw / ch;
                    if (imageW / imageH < ratio) {
                        // keep width
                        var dispWidth = cw;
                        var dispHeight = imageH * (dispWidth / imageW);
                        return { left: 0, top: 0 - (dispHeight - ch) / 2, width: dispWidth, height: dispHeight };
                    } else {
                        var dispHeight1 = ch;
                        var dispWidth1 = imageW * (dispHeight1 / imageH);
                        return { left: 0 - (dispWidth1 - cw) / 2, top: 0, width: dispWidth1, height: dispHeight1 };
                    }
                }

                function setImagePos(imageElement, pos) {
                    imageElement.style.position = "relative";
                    imageElement.setAttribute("width", pos.width);
                    imageElement.setAttribute("height", pos.height);
                    imageElement.style.top = pos.top + "px";
                    imageElement.style.left = pos.left + "px";
                }
            },

            _calculateImageDisplaySize: function (imageWidth, imageHeight, mainContainer) {
                if (imageWidth && imageHeight && mainContainer) {
                    var width = 0;
                    var height = 0;

                    var containerWidth = mainContainer.clientWidth;
                    var containerHeight = mainContainer.clientHeight;
                    containerWidth = containerWidth > 0 ? containerWidth : 160;
                    containerHeight = containerHeight > 0 ? containerHeight : 160;

                    var imageRatio = imageWidth / imageHeight;
                    var containerRatio = containerWidth / containerHeight;

                    if (imageRatio > containerRatio) {
                        width = containerWidth;
                        height = width / imageRatio;
                    } else {
                        height = containerHeight;
                        width = height * imageRatio;
                    }

                    if (width === 190) {
                        debugger;
                    }
                    return { width: width + "px", height: height + "px" };
                }
                return { width: "auto", height: "auto" };
            }
        },
        {
            // Static methods
            relayoutSlides: function () {
                var that = this;
                var images = document.querySelectorAll(".ssImage");

                for (var i = 0; i < images.length; i++) {
                    var img = images[i];

                    if (img.parentNode && img.parentNode.parentNode) {
                        var container = img.parentNode.parentNode;
                        var imageCard = container.winControl;
                        if (imageCard) {
                            imageCard.autoAdjustImageSize(img, imageCard.fill);
                        }
                    }
                }
            },
        }),

        // utilities and constants for slideshow control

        Constants: {
            ssImageLoaded: "ssImageLoaded",
        },

        Mode: {
            clean: 0,
            info: 1
        },

        STRINGS: {
            SLIDESHOW: WinJS.Resources.getString("BingApps/Slideshow").value || "Slideshow",
            SLIDE: WinJS.Resources.getString("BingApps/Slide").value || "Image"
        },

        MediaBlockPosition: {
            topLeft: 0,
            topRight: 1,
            bottomLeft: 2,
            bottomRight: 3
        },

        MediaBlockColumnSpan: {
            one: 0,
            two: 1
        },

        Utilities: {

            getColumns: function () {
                var state = Windows.UI.ViewManagement.ApplicationView.value;
                if (state === Windows.UI.ViewManagement.ApplicationViewState.snapped) {
                    return 1;
                } else if (state === Windows.UI.ViewManagement.ApplicationViewState.fullScreenPortrait) {
                    return 2;
                } else {
                    return 4;
                }
            },

            setInnerHtml: function (elem, html) {
                if (html) {
                    WinJS.Utilities.setInnerHTML(elem, toStaticHTML(html));
                } else {
                    elem.innerText = "";
                }
            },

            clickInfoArea: function (evt) {
                // Do not toggle info block if retry button is clicked
                if (evt.srcElement && WinJS.Utilities.hasClass(evt.srcElement, "platformRetryButton")) {
                    return true;
                }

                var hitTargets = document.msElementsFromPoint(evt.clientX, evt.clientY);
                if (hitTargets) {
                    // get elements from point
                    for (var i = 0, len = hitTargets.length; i < len; i++) {
                        var item = hitTargets[i];
                        if (WinJS.Utilities.hasClass(item, "win-navbutton") ||
                            WinJS.Utilities.hasClass(item, "ssMediaOverlay") ||
                            WinJS.Utilities.hasClass(item, "win-semanticzoom-button") ||
                            WinJS.Utilities.hasClass(item, "ssAttribution")) {
                            return true;
                        }
                    }
                }
                return false;
            },
        },

    });
})();


/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function appexCommonControlsSlideshowControlInit() {
    "use strict";

    WinJS.Namespace.define("BingApps.UI", {
        SlideshowControlBase: WinJS.Class.define(function slideshowControlBase_ctor(element, options) {
            options = options || {};
            this._domElement = element;
            this._domElement.winControl = this;
            this._crop = true,
            this._changeHandled = false;
            WinJS.UI.setOptions(this, options);

            this._domElement.onresize = this._onLayoutUpdated.bind(this);
            this._pageTransitionListener = this._pageTransition.bind(this);
            this._eventListeners = [];
        },
        {
            // PRIVATE VARIABLES - SET TO DEFAULT VALUES

            _mode: BingApps.UI.Slideshow.Mode.info,
            _currentPage: 0,
            _slideCount: 0,
            _backButton: null,
            _smDataSource: null,
            _overlayTemplate: null,
            _isZoomedOut: null,
            _triggerZoom: null,
            _lastZoomFactor: 1,
            _selectedIndex: null,
            _autoPlay: false,
            _slideInterval: 5000,
            _flipViewControl: null,
            _mediaBlockPosition: BingApps.UI.Slideshow.MediaBlockPosition.bottomRight,
            _mediaColumnSpan: BingApps.UI.Slideshow.MediaBlockColumnSpan.one,

            //PUBLIC PROPERTIES

            element: {
                get: function () {
                    return this._domElement;
                }
            },

            currentPage: {
                get: function () {
                    if (this._flipViewControl) {
                        this._currentPage = this._flipViewControl.currentPage;
                    }
                    return this._currentPage;
                },
                set: function (value) {
                    this._currentPage = value;
                }
            },

            smDataSource: {
                get: function () {
                    return this._smDS;
                },
                set: function (value) {
                    this._smDS = value;
                }
            },

            overlayTemplate: {
                get: function () {
                    return this._overlayTemplate;
                },
                set: function (value) {
                    this._overlayTemplate = value;
                }
            },

            // Total slides - needed for AutoPlay
            slideCount: {
                get: function () {
                    return this._slideCount;
                },
                set: function (value) {
                    this._slideCount = value;
                }
            },

            // Back button for navigating to the page that launched the slideshow
            backButton: {
                get: function () {
                    return this._backButton;
                },
                set: function (value) {
                    this._backButton = value;
                }
            },

            animations: {
                get: function () {
                    return this._animations;
                },
                set: function (value) {
                    this._animations = value;
                    if (this._flipViewControl) {
                        this._flipViewControl.setCustomAnimations(this._animations);
                    }
                }
            },

            indexOfFirstVisible: {
                set: function (v) {
                    // when selection happen, stop playback first.
                    if (this._flipViewControl.currentPage !== v && this.autoPlay) {
                        this._stopAutoPlay();
                    }
                    return this._flipViewControl.currentPage = v;
                },
                get: function () {
                    return this._flipViewControl.currentPage;
                },
            },


            // PUBLIC METHODS

            dispose: function () {
                try {
                    var that = this;
                    var eventListeners = this._eventListeners;
                    if (eventListeners) {
                        eventListeners.forEach(function (evtListener) {
                            that._removeEventListener(evtListener.object, evtListener.eventName, evtListener.listener);
                            evtListener.object = null;
                        });
                    }
                } catch (ex) {
                    //Continue on exception
                }
            },

            /// <field>Show the current entity</field>
            showEntityForIndex: function (index) {
                if (!this._changeHandled) {
                    // when selection happen, stop playback first.
                    if (this._flipViewControl.currentPage !== index && this.autoPlay) {
                        this._stopAutoPlay();
                    }
                    this._flipViewControl.currentPage = index;
                }
                this._changeHandled = false;
            },

            render: function () {
                var that = this;
                this._reset();
                this._canvas = document.createElement("div");
                this._canvas.setAttribute("aria-label", BingApps.UI.Slideshow.STRINGS.SLIDESHOW);
                this._domElement.appendChild(this._canvas);
                //this sets the focus on div containing the flipview so that keyboard navigation works
                this._canvas.focus();
                this._canvas.className = "flipContainer";
                this._createFlipControl(this._canvas);
                this._createMediaContainer(this._domElement);
                // final step
                this._hookupEvents();
            },

            zoomableView: {
                get: function () {
                    return this;
                }
            },

            // IZoomable begins
            beginZoom: function () {
                this._selectedIndex = this._flipViewControl.currentPage;
            },

            configureForZoom: function (isZoomedOut, isCurrentView, triggerZoom, prefectchedPages) {
                this._isZoomedOut = isZoomedOut;
                this._triggerZoom = triggerZoom;
            },

            endZoom: function (isCurrentView, setFocus) {
                var selectedIndex = this._selectedIndex;
                if (selectedIndex) {
                    this._flipViewControl.currentPage = (selectedIndex);
                }
            },

            getCurrentItem: function () {
                // zoom out start - force backbutton to be shown
                if (this._backButton) {
                    this.backButton.style.visibility = "visible";
                }

                var dataSource = this.smDataSource.dataSource;
                var binding = dataSource.createListBinding();
                return binding.fromIndex(this._flipViewControl.currentPage)
                    .then(function slideshowControlBase_getCurrentItemFromIndexComplete(listItem) {
                        return WinJS.Promise.wrap({
                            item: listItem,
                            position: {
                                left: 0,
                                top: 0,
                                width: 100,
                                height: 100
                            }
                        });
                    });
            },

            setCurrentItem: function (x, y) {

            },

            getPanAxis: function () { return "horizontal"; },

            handlePointer: function (pointerId) {
                this._flipViewControl._panningDivContainer.msSetPointerCapture(pointerId);
            },

            positionItem: function (listItem, position) {
                // zoom in start
                // Back button is made visible in the semantic zoom view. Hide it now if the mode is clean
                if (this._mode === BingApps.UI.Slideshow.Mode.clean) {
                    this.backButton.style.visibility = "hidden";
                }
                var index = listItem.firstItemIndexHint;
                this._flipViewControl.currentPage = index;
                this._selectedIndex = index;

                return WinJS.Promise.wrap({
                    x: 0,
                    y: 0
                });
            },
            // IZoomable ends

            startAutoPlay: function (slideInterval) {
                var that = this;
                this._clearAutoPlay();
                this._autoPlay = true;
                if (slideInterval) {
                    this._slideInterval = slideInterval;
                }

                this._playPromise = WinJS.Promise.wrap(null);
                var len = this._slideCount - this._flipViewControl.currentPage - 1;

                for (var i = 0; i < len ; i++) {
                    this._playPromise = this._playPromise.then(
                        function playPromisePreviousComplete() {
                            return WinJS.Promise.timeout(that._slideInterval);
                        }).then(
                        function playPromiseTimeoutComplete() {
                            return that._flipViewControl.next();
                        });
                }
            },

            stopAutoPlay: function () {
                this._autoPlay = false;
                this._clearAutoPlay();
            },

            // PRIVATE METHODS

            _addEventListener: function (object, eventName, listener, capture) {
                var eventListeners = this._eventListeners;
                object.addEventListener(eventName, listener, capture);
                eventListeners.push({
                    object: object,
                    eventName: eventName,
                    listener: listener
                });
            },

            _removeEventListener: function (object, eventName, listener) {
                object.removeEventListener(eventName, listener);
            },

            _reset: function () {
                this._flipViewControl = null;
                BingApps.UI.Slideshow.Utilities.setInnerHtml(this._domElement, "");
            },

            _createFlipControl: function (container) {
                var that = this;
                function renderer(itemPromise, element) {
                    var d = element;
                    if (!d) {
                        d = document.createElement("div");
                        WinJS.Utilities.addClass(d, "flipItem");
                        WinJS.Utilities.addClass(d, "zoomElement");                        
                        that._addEventListener(d, "MSContentZoom", that._onMSContentZoom.bind(that));
                        that._addEventListener(d, "wheel", that._onMouseWheel.bind(that), true);
                    }
                    return {
                        element: d,
                        renderComplete:
                     itemPromise.then(function slideshowControlBase_itemPromiseComplete(item) {
                         var itemData = item.data.data;
                         var imageObj = itemData.image;

                         d.setAttribute("aria-label", BingApps.UI.Slideshow.STRINGS.SLIDE + " " + item.index);                         
                         if (imageObj && imageObj.url) {
                             var imageCard = new BingApps.UI.Slideshow.ImageCard(d, {
                                 imageSource: {
                                     url: imageObj.url,
                                     width: imageObj.width,
                                     height: imageObj.height
                                 },
                                 showErrorInfo: true,
                                 alternateText: itemData.altText,
                                 zoomInEnabled: true,
                                 pageIndex: item.index
                             });
                         }
                     })
                    };
                };

                var options = {};
                options.itemDataSource = this.smDataSource.dataSource;
                options.currentPage = this.currentPage;
                options.itemTemplate = renderer;
                options.itemSpacing = 40;

                // Create the zoomed in list view
                this._flipViewControl = new WinJS.UI.FlipView(container, options);                
                // Replace the default prev/next page buttons with our customizable page buttons.
                this._flipViewControl._nextButton.style.display = "none";
                this._flipViewControl._prevButton.style.display = "none";
                var paginatedViewManager = this._paginatedViewManager = new BingApps.UI.Slideshow.SlideshowPaginatedViewManager({
                    controller: this._flipViewControl,
                });

                this._registerEvents();

                if (this.animations) {
                    this._flipViewControl.setCustomAnimations(this.animations);
                } else {
                    var animation = {
                        next: null,
                        previous: null,
                        jump: null
                    };
                    this._flipViewControl.setCustomAnimations(animation);
                }
            },

            _hookupEvents: function () {
                var that = this;
                this._addEventListener(this._flipViewControl,"pagevisibilitychanged", updateMediaBlock, false);
                function scheduleFlip(eventInfo) {
                    if (that.autoPlay) {
                        var image = eventInfo.srcElement.querySelector(".ssImage");

                        var onload = function onload(e) {
                            var img = e.srcElement;
                            that.startAutoPlay();
                        };

                        if (!WinJS.Utilities.hasClass(BingApps.UI.Slideshow.Constants.ssImageLoaded)) {
                            that._addEventListener(image,"load", onload, false);
                        }
                        var readyImage = eventInfo.srcElement.querySelector("." + BingApps.UI.Slideshow.Constants.ssImageLoaded);
                        if (readyImage) {
                            that.startAutoPlay();
                        }
                    }
                }

                // This event is triggered when the user interaction results in a tap gesture.                
                this._addEventListener(this._flipViewControl, "click", touchListener, false);
                this._addEventListener(this._flipViewControl,"keyup", keyupListener, false);

                this._addEventListener(this._mediaContainer, "click", touchListener, false);
                this._addEventListener(this._mediaContainer, "keyup", keyupListener, false);

                function touchListener(evt) {

                    // reset swipe if it's a simple touch/click
                    if (that.swipeStart) {
                        that.swipeStart = false;
                    }
                    if (!BingApps.UI.Slideshow.Utilities.clickInfoArea(evt)) {
                        that._toggleInfoBlock();
                    }
                }

                function keyupListener(event) {
                    switch (event.keyCode) {
                        case 32: onSpacebarUp(event); break;
                        case 13: onEnterKeyUp(event); break;
                        default: break;
                    }
                }

                function onSpacebarUp(event) {
                    that._toggleInfoBlock();
                }

                function onEnterKeyUp(event) {
                    return;
                }

                // Initialize the currentImageCard variable with the first imagecard.
                var currentImageCard = null;
                var firstImageCardElement = document.querySelector(".ssZoomIn .flipItem");
                if (firstImageCardElement && firstImageCardElement.winControl) {
                    currentImageCard = firstImageCardElement.winControl;
                }

                // imgCard_keydownHandler had to be added to the parent of semantic zoom control. 
                // because, semantic zoom control eats up ctrl+ and ctrl- events after processing those. 
                // so, these events never reach to the image card level. Inside currentImageCard.handleKeyDown,
                // if we process  ctrl+ or ctrl- to zoom-in or out the image, then we stop its propagation, so that
                // semantic zoom control doesnt zoom out, when the user is trying to perform optical zoom-out.
                var semanticZoomDom = document.querySelector(".ssSemanticZoomDom");
                if (semanticZoomDom && semanticZoomDom.parentNode) {
                    that._addEventListener(semanticZoomDom.parentNode,"keydown", imgCard_keydownHandler, true);
                }

                function imgCard_keydownHandler(ev) {
                    if (currentImageCard) {
                        var zoomed = currentImageCard.handleKeyDown(ev);
                        if (zoomed && that._autoPlay) {
                            that.stopAutoPlay();
                        }
                    }
                };

                function updateMediaBlock(e) {
                    if (that._mediaBox && that._flipViewControl && !e.detail.visible) {
                        BingApps.UI.Slideshow.Utilities.setInnerHtml(that._mediaBox, "");
                        var index = that._flipViewControl.currentPage;
                        var binding = that.smDataSource.dataSource.createListBinding();
                        binding.fromIndex(index).then(function slideshowControlBase_updateMediaBlockFromIndexComplete(item) {
                            that._setMediaContent(item);
                        });
                    }

                    // reset zoom level
                    if (e.target && e.target.winControl && e.detail.visible) {
                        var imgCardElement = e.target;
                        currentImageCard = imgCardElement.winControl;
                        currentImageCard.resetZoom();
                    }
                }
            },

            _toggleInfoBlock: function () {
                if (this._mode === BingApps.UI.Slideshow.Mode.clean) {
                    this._mode = BingApps.UI.Slideshow.Mode.info;
                    this._mediaBox.style.display = "block";
                    this._attributionButton.currentState = "on";
                    this._backButton.style.visibility = "visible";
                } else {
                    this._mode = BingApps.UI.Slideshow.Mode.clean;
                    this._mediaBox.style.display = "none";
                    this._attributionButton.currentState = "off";
                    this._backButton.style.visibility = "hidden";
                }
            },

            _createMediaContainer: function (container) {
                this._mediaContainer = document.createElement("div");
                WinJS.Utilities.addClass(this._mediaContainer, "ssMediaContainer");
                this._mediaColumns = BingApps.UI.Slideshow.Utilities.getColumns();
                this._determineMediaContainerColumnDefinition();
                container.appendChild(this._mediaContainer);
                this._createMediaBox(this._mediaContainer);
                this._createAttribution();
            },

            _createMediaBox: function (container) {
                var that = this;
                var pos = this._mediaBlockPosition;
                var span = this._mediaBlockColumnSpan;
                this._mediaBox = this._createMediaOverlay(pos, span);
                container.appendChild(this._mediaBox);

                var binding = this.smDataSource.dataSource.createListBinding();
                binding.fromIndex(this.currentPage).then(function slideshowControlBase_createMediaBoxFromIndexComplete(item) {
                    that._setMediaContent(item);
                });
                this._addEventListener(this._mediaBox, "wheel", this._mediaBoxOnWheel.bind(this), false);
            },

            _createMediaOverlay: function (pos, span) {
                var box = document.createElement("div");
                WinJS.Utilities.addClass(box, "ssMediaOverlay");
                WinJS.Utilities.addClass(box, "ssMediaPos" + pos);
                box.setAttribute("tabIndex", 0);
                this._setMediaOverlayPosition(box, span);
                return box;
            },

            _setMediaOverlayPosition: function (box, span) {
                box.style.msGridRow = 2;
                box.style.msGridColumn = this._mediaColumns - this._mediaBlockColumnSpan;
                box.style.msGridColumnSpan = this._mediaBlockColumnSpan + 1;
            },

            _setMediaContent: function (item) {
                if (item && item.data && item.data.data) {
                    this._curData = item.data.data.overlayData;
                }
                if (this._curData && this._overlayTemplate) {
                    this._overlayTemplate.winControl.render(this._curData, this._mediaBox);
                    this._mediaBox.style.visibility = "visible";
                }
                else {
                    this._mediaBox.style.visibility = "hidden";
                }
            },

            _onLayoutUpdated: function () {
                if (this._mediaContainer) {
                    BingApps.UI.Slideshow.ImageCard.relayoutSlides();
                    this._mediaColumns = BingApps.UI.Slideshow.Utilities.getColumns();
                    this._determineMediaContainerColumnDefinition();
                    this._updateMediaOverlay();
                }
            },

            _determineMediaContainerColumnDefinition: function () {
                if (this._mediaContainer) {
                    var columDefinition = "(1fr)[" + this._mediaColumns + "]";
                    this._mediaContainer.style.msGridColumns = columDefinition;
                }
            },

            _updateMediaOverlay: function () {
                var box = document.querySelector(".ssMediaOverlay");
                if (box) {
                    this._setMediaOverlayPosition(box, this._mediaBlockColumnSpan);
                }
            },

            _mediaBoxOnWheel: function (event) {
                var newEvent = document.createEvent("WheelEvent");
                newEvent.initWheelEvent("wheel", true, true, null, 0, 0, 0, 0, 0, 0, null, null, 0, event.deltaY, 0, 0);
                this._flipViewControl._panningDiv.dispatchEvent(newEvent);
            },

            _createAttribution: function () {
                var that = this;
                this.attrBox = document.createElement("div");
                WinJS.Utilities.addClass(this.attrBox, "ssAttribution");
                this._domElement.appendChild(this.attrBox);

                // attribution button
                var title = WinJS.Resources.getString("BingApps/imageAttribution") || "Image attribution";
                var attributionButton = this._attributionButton = new BingApps.UI.Button(null, {
                    icon: "platformInfoButton",
                    title: "title",
                    states: [
                        {
                            id: "on",
                            title: "title",
                            iconRemove: "platformInfoButtonOff",
                            iconAdd: "platformInfoButtonOn",
                        },
                        {
                            id: "off",
                            title: "title",
                            iconRemove: "platformInfoButtonOn",
                            iconAdd: "platformInfoButtonOff",
                        }
                    ]
                });
                attributionButton.onclick = this._toggleInfoBlock.bind(this);
                attributionButton.currentState = that._infoShown ? "on" : "off";
                WinJS.Utilities.addClass(attributionButton.element, "platformAttributionButton");

                this.attrBox.appendChild(attributionButton.element);
            },

            // user trying to pinch. image cannot scale down below 100%. initiate zoom-out.
            _onMSContentZoom: function (event) {
                if (event && event.target) {
                    if (this.autoPlay) {
                        this._stopAutoPlay();
                    }
                    if (this._lastZoomFactor === 1 && event.target.msContentZoomFactor === 1) {
                        this._performZoomOut(0.5 * window.innerWidth, 0.5 * window.innerHeight, event);
                    }

                    this._lastZoomFactor = event.target.msContentZoomFactor;
                }
            },

            _onMouseWheel: function (ev) {
                // if the contained image cannot zoom-out further, then we should perform semantic zoom-out.
                if (ev.ctrlKey && ev.deltaY > 0 && !ev.currentTarget.winControl.canZoomOut()) {
                    this._performZoomOut(null, null, ev);
                    ev.stopPropagation();
                    ev.preventDefault();
                }
            },

            _performZoomOut: function (x, y, eventObject) {
                var semanticZoomDom = document.querySelector(".ssSemanticZoomDom");
                var location = { x: x, y: y };
                if (this.auto) {
                    this._stopAutoPlay();
                }
                // pass control to semantic zoom 
                if (semanticZoomDom && semanticZoomDom.winControl) {
                    var semanticZoomCtrl = semanticZoomDom.winControl;

                    if (!x || !y) {
                        location = semanticZoomCtrl._getPointerLocation(eventObject);
                    }
                    semanticZoomCtrl._zoom(true, location);
                }
            },

            _clearAutoPlay: function () {
                if (this._playPromise) {
                    this._playPromise.cancel();
                    this._playPromise = null;
                }
            },

            _registerEvents: function () {
                var eventListeners = this._eventListeners;
                var paginatedViewManager = this._paginatedViewManager;
                if (paginatedViewManager) {
                    paginatedViewManager.attachEventListeners(this._flipViewControl._contentDiv);
                    var pageTransitionListener = this._pageTransitionListener;
                    paginatedViewManager.onpagetransition = pageTransitionListener;
                    eventListeners.push({
                        object: paginatedViewManager,
                        eventName: "pagetransition",
                        listener: pageTransitionListener
                    });
                }
            },

            _pageTransition: function (eventData) {
                this.dispatchEvent("pagetransition", eventData.detail);
            }

        })
    });

    WinJS.Class.mix(BingApps.UI.SlideshowControlBase,
        WinJS.Utilities.eventMixin,
        WinJS.Utilities.createEventProperties("pagetransition")
        );
})();


/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function SlideshowControlInit() {
    "use strict";

    WinJS.Namespace.define("BingApps.UI", {
        /// <summary locid="BingApps.UI.SlideshowControl">
        /// Displays a collection of images one at a time
        /// </summary>
        SlideshowControl: WinJS.Class.define(function slideshowControl_ctor(element, options) {
            /// <summary>
            /// Creates an instance of Slideshow control
            /// </summary>
            /// <param name="element">
            /// The DOM element that hosts the Slideshow control.
            /// </param>
            /// <param name="options">
            /// An object that contains one or more property/value pairs to apply to the new control.
            /// Each property of the options object corresponds to one of the control's properties or events.
            /// - slideShowData: Gets or sets the data source that provides the Slideshow with items to display. 
            /// - overlayTemplate: Gets or sets a Template or function that defines the HTML for each item's page.
            /// - currentPage: index of the slideshow image to show.
            /// </param>
            /// <returns type="BingApps.UI.SlideshowControl">
            /// The new SlideshowControl.
            /// </returns>

            this._element = element || document.createElement("div");
            this.element.winControl = this;
            options = options || {};
            this._eventListeners = [];

            // Create the DOM elements
            WinJS.Utilities.addClass(this.element, "slideView");
            this._canvas = document.createElement("div");
            this._canvas.setAttribute("aria-label", BingApps.UI.Slideshow.STRINGS.SLIDESHOW);
            this.element.appendChild(this._canvas);
            this._canvas.className = "viewPort";

            this._semanticZoomDom = document.createElement("div");
            WinJS.Utilities.addClass(this._semanticZoomDom, "ssSemanticZoomDom");
            this._zoomInDom = document.createElement("div");
            WinJS.Utilities.addClass(this._zoomInDom, "ssZoomIn");
            WinJS.Utilities.addClass(this._zoomInDom, "platformParallaxImageViewport");
            this._zoomOutDom = document.createElement("div");
            WinJS.Utilities.addClass(this._zoomOutDom, "ssZoomOut");
            // Add the semantic zoom dom
            this._canvas.appendChild(this._semanticZoomDom);
            // Add the two list view doms
            this._semanticZoomDom.appendChild(this._zoomInDom);
            this._semanticZoomDom.appendChild(this._zoomOutDom);
            // Create the zoomed in list view
            this._zoomedInItem = new BingApps.UI.SlideshowControlBase(this._zoomInDom);
            this._slideshowControlBase = this._zoomedInItem;

            this._relayoutTimer = false;
            this._renderTimer = false;
            this._renderingPromise = WinJS.Promise.wrap(null);
            this._createBackButton(this.element);
            this._pageTransitionListener = this._pageTransition.bind(this);

            this._init = true;
            WinJS.UI.setOptions(this, options);
            this._init = false;

            this._registerEvents();

            // render after all options are set
            this._render();
        },
        {
            //PRIVATE VARIABLES - SET TO DEFAULT VALUES

            _currentPage: 0,
            _data: null,
            _overlayTemplate: null,

            // PUBLIC PROPERTIES

            /// <field type="HTMLElement" domElement="true" hidden="true" locid="BingApps.UI.Slideshow.element" helpKeyword="BingApps.UI.Slideshow.element">
            /// Gets the DOM element that hosts the Slideshow.
            /// </field>
            element: {
                get: function () {
                    return this._element;
                }
            },

            /// <field type="Number" domElement="true" Integer="true" locid="BingApps.UI.Slideshow.currentPage" helpKeyword="BingApps.UI.Slideshow.currentPage">
            /// Gets or sets the index of the currently displayed page.
            /// </field>
            currentPage: {
                get: function () {
                    if (this._slideshowControlBase) {
                        return this._slideshowControlBase.currentPage;
                    } else {
                        return this._currentPage;
                    }
                },
                set: function (value) {
                    if (value !== this._currentPage) {
                        if ((typeof value !== "number") || (value < 0)) {
                            value = 0;
                        }
                        this._currentPage = value;
                        this._slideshowControlBase.currentPage = value;
                        this.forceLayout();
                    }
                }
            },

            /// <field type="Object" locid="BingApps.UI.Slideshow.slideShowData" helpKeyword="BingApps.UI.Slideshow.slideShowData">
            /// Gets or sets the data source that provides items for the Slideshow.
            /// </field>
            slideShowData: {
                get: function () {
                    return this._data;
                },
                set: function (value) {
                    if (value) {
                        this._data = value;
                    }
                    if (!this._init) {
                        //render if data changes
                        this._render();
                    }
                }
            },

            /// <field type="Object" locid="BingApps.UI.Slideshow.overlayTemplate" helpKeyword="BingApps.UI.Slideshow.overlayTemplate">
            /// Gets or sets a template that defines the HTML for each slide's overlay data.
            /// </field>
            overlayTemplate: {
                get: function () {
                    return this._overlayTemplate;
                },
                set: function (value) {
                    this._overlayTemplate = value;
                    this._slideshowControlBase.overlayTemplate = value;
                    this.forceLayout();
                }
            },

            /// <field type="Object" locid="BingApps.UI.Slideshow.renderPromise" helpKeyword="BingApps.UI.Slideshow.renderPromise">
            /// Gets the render promise for Slideshow. You can use it to schedule things to happen after the render is complete.
            /// </field>
            renderPromise: {
                get: function () {
                    return this._renderingPromise;
                }
            },

            // PUBLIC METHODS

            setCustomAnimations: function (animations) {
                /// <signature helpKeyword="BingApps.UI.Slideshow.setCustomAnimations">
                /// <summary locid="BingApps.UI.Slideshow.setCustomAnimations">
                /// Sets custom animations for the slideshow to use when navigating between pages. 
                /// These custom animations only apply to keyboard, mouse, and programmatically triggered navigations.
                /// </summary>
                /// <param name="animations">An object that contains up to three fields, one for each navigation action: next, previous, and jump</param>
                /// </signature>
                this._slideshowControlBase.animations = animations;
            },

            startAutoPlay: function (slideInterval) {
                /// <signature helpKeyword="BingApps.UI.Slideshow.startAutoPlay">
                /// <summary locid="BingApps.UI.Slideshow.startAutoPlay">
                /// Navigates through the slides automatically. 
                /// </summary>
                /// <param name="SlideInterval">Time taken before navigating to the next slide</param>
                /// </signature>     
                this._slideshowControlBase.startAutoPlay(slideInterval);
            },

            stopAutoPlay: function () {
                /// <signature helpKeyword="BingApps.UI.Slideshow.stopAutoPlay">
                /// <summary locid="BingApps.UI.Slideshow.stopAutoPlay">
                /// Stops the Autoplay
                /// </summary>
                /// </signature>
                this._slideshowControlBase.stopAutoPlay();
            },

            forceLayout: function () {
                /// <signature helpKeyword="BingApps.UI.Slideshow.forceLayout">
                /// <summary locid="BingApps.UI.Slideshow.forceLayout">
                /// Forces the SlideshowControl to update its layout.
                /// </summary>
                /// </signature>

                // Avoid calling forceLayout when set options during control constuctor 
                if (!this._init) {
                    var that = this;
                    if (!that._relayoutTimer && !that._renderTimer) {
                        that._relayoutTimer = true;
                        var currentRenderingPromise = that._renderingPromise;

                        // by using _relayoutTimer and timeout to avoid do relayout multiple times 
                        // when modifying multiple properties at the same time
                        that._renderingPromise = WinJS.Promise.timeout(0)
                            .then(function () {
                                return currentRenderingPromise.then(function () {
                                    return that._relayout();
                                });
                            });
                    }
                    return that._renderingPromise;
                }
            },

            dispose: function () {
                /// <signature helpKeyword="BingApps.UI.Slideshow.dispose">
                /// <summary locid="BingApps.UI.Slideshow.dispose">
                /// Manual trigger of dispose for Slideshow control.
                /// </summary>
                /// </signature>
                try {
                    if (this._slideshowControlBase) {
                        this._slideshowControlBase.dispose();
                    }
                    var that = this;
                    var eventListeners = this._eventListeners;
                    if (eventListeners) {
                        eventListeners.forEach(function (evtListener) {
                            that._removeEventListener(evtListener.object, evtListener.eventName, evtListener.listener);
                            evtListener.object = null;
                        });
                    }
                } catch (ex) {
                    //Continue on exception
                }
            },

            // PRIVATE METHODS

            _addEventListener: function (object, eventName, listener, capture) {
                var eventListeners = this._eventListeners;
                object.addEventListener(eventName, listener, capture);
                eventListeners.push({
                    object: object,
                    eventName: eventName,
                    listener: listener
                });
            },

            _removeEventListener: function (object, eventName, listener) {
                object.removeEventListener(eventName, listener);
            },

            _getSmDataSource: function () {
                if (!this._smDS) {
                    var slides = [];
                    var rawData = this.slideShowData;
                    for (var i = 0, len = rawData.length; i < len; i++) {
                        var dataItem = rawData[i];
                        slides.push({ key: "r" + i, data: dataItem, itemOffset: i, uniqueID: i });
                    }
                    var itemsList = new WinJS.Binding.List(slides);

                    var charPostfix = "A";

                    // Create the groups for the ListView from the item data and the grouping functions
                    var groupedItemsList = itemsList.createGrouped(function slideshowControl_createdGroup(item) {
                        if (item) {
                            return item.itemOffset + charPostfix;
                        }
                        return charPostfix;
                    },
                    function slideshowControl_groupItem(item) {
                        return item;
                    },
                    function slideshowControl_groupCompare(l, r) {
                        return 0;
                    });

                    this._smDS = groupedItemsList;
                }

                return this._smDS;
            },

            _semanticZoomRenderer: function (itemPromise) {
                var that = this;
                return {
                    element: itemPromise.then(function slideshowControl_semanticZoomRendererItemPromiseComplete(item) {
                        var d = document.createElement("div");
                        d.setAttribute("aria-label", BingApps.UI.Slideshow.STRINGS.SLIDE + " " + item.index);
                        WinJS.Utilities.addClass(d, "ssZoomedOutTemplate");

                        //prevent crash when the feed has invalid data
                        if (item.data && item.data.data) {
                            var thumbnail = item.data.data.thumbnail ? item.data.data.thumbnail : item.data.data.image;
                            var imageCard = new BingApps.UI.Slideshow.ImageCard(d, {
                                imageSource: {
                                    url: thumbnail.url,
                                    width: thumbnail.width,
                                    height: thumbnail.height
                                },
                                alternateText: item.data.data.altText,
                                fill: true,
                                zoomInEnabled: false
                            });
                        }

                        return d;
                    })
                };
            },

            _createBackButton: function (container) {
                var that = this;
                var h = document.createElement("div");
                container.appendChild(h);

                var backButton = this._headerBackButton = document.createElement("button");
                this._slideshowControlBase.backButton = backButton;
                WinJS.Utilities.addClass(backButton, "win-backbutton ssBackButton");
                backButton.setAttribute("aria-label", WinJS.Resources.getString("BingApps/GoBack"));
                BingApps.Utilities.setAutomationId(backButton, this._domElement, "backButton");
                h.appendChild(backButton);

                if (WinJS.Navigation.canGoBack) {
                    backButton.isfocused = false;
                    this._onBackButtonBlurredHandler = onBackButtonBlurred.bind(this);
                    this._onBackButtonFocusedHandler = onBackButtonFocused.bind(this);
                    this._onBackButtonClickHandler = onBackButtonClick.bind(this);
                    this._addEventListener(backButton, "blur", this._onBackButtonBlurredHandler);
                    this._addEventListener(backButton, "focus", this._onBackButtonFocusedHandler);
                    this._addEventListener(backButton, "click", this._onBackButtonClickHandler);
                    this._addEventListener(document, "keydown", this._onBackButtonClickHandler, false);
                } else {
                    backButton.disabled = "disabled";
                    WinJS.Utilities.addClass(backButton, "platformHide");
                }

                function onBackButtonBlurred(event) {
                    backButton.isfocused = false;
                }

                function onBackButtonFocused(event) {
                    backButton.isfocused = true;
                }

                function onBackButtonClick(event) {
                    if (!event.channel) {
                        event.channel = WinJS.Navigation.location.channelId;
                    }

                    if (ifNavigateBack(event)) {
                        WinJS.Navigation.back();
                    }
                }

                function ifNavigateBack(event) {
                    var isBackButtonClicked = event.type === "click" && backButton.isfocused;
                    var isBackSpacePressed = event.keyCode === WinJS.Utilities.Key.backspace && event.channel === WinJS.Navigation.location.channelId;

                    return backButton && (isBackButtonClicked || (isBackSpacePressed))
                        && (!WinJS.Navigation || WinJS.Navigation.canGoBack);
                }
            },

            _render: function () {
                var that = this;
                if (!that._renderTimer) {
                    that._renderTimer = true;
                    var currentRenderingPromise = that._renderingPromise;
                    that._renderingPromise = WinJS.Promise.timeout(0)
                            .then(function () {
                                return currentRenderingPromise.then(function () {
                                    return that._renderImpl();
                                });
                            });
                    return that._renderingPromise;
                }
            },

            _renderImpl: function () {
                var that = this;
                this._renderTimer = false;

                if (!this.slideShowData) {
                    return;
                }
                // Create the zoomed out listview for semantic zoom
                var zoomOutOptions = { selectionMode: "none", crossSlide: "none" };
                zoomOutOptions.itemDataSource = this._getSmDataSource().groups.dataSource;
                this._zoomedOutItem = new WinJS.UI.ListView(this._zoomOutDom, zoomOutOptions);
                this._zoomedOutItem.itemTemplate = this._semanticZoomRenderer.bind(this);
                // Create the semantic zoom control
                this._semanticZoom = new WinJS.UI.SemanticZoom(this._semanticZoomDom);

                // This function sets focus on the flipview container after exiting zoomed-out view,
                // so that keyboard navigation works on the flipview
                function setFocusOnFlipContainer(event) {
                    if (!that._semanticZoom.zoomedOut) {
                        var flipContainer = that._zoomInDom.querySelector(".flipContainer");
                        if (flipContainer) {
                            flipContainer.focus();
                        }
                    }
                };
                this._addEventListener(this._semanticZoom, "zoomchanged", setFocusOnFlipContainer);
                // zoomedInItem is the slideshowControlBase
                this._zoomedInItem.slideCount = this.slideShowData.length;
                this._zoomedInItem.smDataSource = this._getSmDataSource();
                this._zoomedInItem.render();
            },

            _relayout: function () {
                this._relayoutTimer = false;
                if (this._slideshowControlBase) {
                    this._slideshowControlBase.render();
                    return WinJS.Promise.wrap(true);
                }
                else {
                    return WinJS.Promise.wrap(null);
                }
            },

            _registerEvents: function () {
                /// <summary>
                /// Internal function to register control events
                /// </summary>
                var eventListeners = this._eventListeners;
                var slideshowControlBase = this._slideshowControlBase;
                if (slideshowControlBase) {
                    var pageTransitionListener = this._pageTransitionListener;
                    slideshowControlBase.onpagetransition = pageTransitionListener;
                    eventListeners.push({
                        object: slideshowControlBase,
                        eventName: "pagetransition",
                        listener: pageTransitionListener
                    });
                }
            },

            _pageTransition: function (eventData) {
                var eventProperties = eventData ? eventData.detail : null;
                eventProperties.item = this.slideShowData;
                this.dispatchEvent("pagetransition", eventProperties);
            }

        }),
    });

    WinJS.Class.mix(BingApps.UI.SlideshowControl,
        BingApps.Utilities.DOMEventMixinWithBubbling,
        WinJS.Utilities.createEventProperties("pagetransition"));
})();
/********************************************************
* *
* © Microsoft. All rights reserved. *
* *
*********************************************************/

(function appexPlatformControlsButtonInit() {
    "use strict";

    var NS = WinJS.Namespace.define("BingApps.UI",
    {
        /// <summary>
        /// A Button that can toggle, have mutliple states, show flyouts, show other action bars
        /// </summary>
        Button: WinJS.Class.define(function button_ctor(element, options) {
            /// <summary>
            /// constructor
            /// </summary>
            /// <param name="element">
            /// The DOM element
            /// </param>
            /// <param name="options">
            /// Options structure
            /// </param>

            // Create the button
            this.element = element || document.createElement("button");
            this.element.winControl = this;
            BingApps.Utilities.setAutomationId(this.element);


            WinJS.Utilities.addClass(this.element, "win-commandring win-commandicon roundUIBtnLight");

            this.element.setAttribute("tabIndex", 0);

            var that = this;
            this.element.addEventListener("MSPointerDown", function button_onMSPointerDown(event) {
                that._onpointerdown(event);
                that._pointerDown = true;
            });
            this.element.addEventListener("MSPointerUp", function button_onMSPointerUp(event) {
                that._onpointerup(event);
                that._pointerDown = false;
                if (WinJS.Utilities.eventWithinElement(that.element, event)) {
                    console.log("MSPointerUP event registered");
                }
            });
            this.element.addEventListener("MSPointerCancel", function button_onMSPointerCancel(event) {
                that._onpointerup(event);
            });
            this.element.addEventListener("blur", function button_onBlur(event) {
                that._onpointerup(event);
            });
            this.element.addEventListener("deactivate", function button_onDeactivate(event) {
                that._onpointerup(event);
            });
            this.element.addEventListener("MSLostPointerCapture", function button_onMSLostPointerCapture(event) {
                that._onpointerup(event);
            });

            this.element.addEventListener("MSPointerOut", function button_onMSPointerOut(event) {
                if (that._pointerDown) {
                    try {
                        that.element.msSetPointerCapture(event.pointerId);
                    }
                    catch (e) {
                        //someone else got capture before us. if this element is in semantic zoom, that's most likely what happened.
                        //see ui.js in winjs sdk for similar patterns of try/catching msSetPointerCapture
                    };
                }
            });

            this.isToggle = false;
            this.onclick = null;
            this.mode = null;
            this.selected = false;

            this._currentState = null;
            this._flyout = null;
            this._actionBar = null;
            this._flyoutShown = false;
            WinJS.UI.setOptions(this, options);

        },
        {
            /// <field>
            /// The selected state: true or false
            /// </field>
            selected: false,

            /// <field>
            /// The placement of flyout to show when the button is clicked
            /// </field>
            flyoutPlacement: null,

            /// <field>
            /// The DOM element container
            /// </field>
            element: null,

            /// <field>
            /// Selection mode. Possible values are : BingApps.UI.Button.Toggle, BingApps.UI.Button.Dynamic, BingApps.UI.Button.Radio, BingApps.UI.Button.Simple
            /// </field>
            mode: null,

            /// <field>
            /// The image to use when the button is pressed
            /// </field>
            pressedIcon: null,

            _states: {},
            _currentState: null,
            _flyout: null,
            _actionBar: null,
            _flyoutShown: false,
            _iconRest: null,

            _onpointerdown: function (event) {
                if (this.pressedIcon && this.pressedIcon.length > 0) {
                    this._setIcon(this.pressedIcon);
                }
            },

            _onpointerup: function (event) {
                this._setIcon(this.icon);
            },

            _getParentActionBar: function () {
                /// <summary>
                /// Returns the parent action bar
                /// <returns>
                /// The parent action bar if the button is contained within an appbar
                /// </returns>
                /// </summary>

                var appBarDom = this.element.parentNode;
                if (appBarDom) {
                    var appBar = appBarDom.winControl;
                    if (appBar &&
                        appBar.hide) {
                        return appBar;
                    }
                }
            },

            /// <field>
            /// Disabled
            /// </field>
            disabled: {
                set: function (value) {
                    if (value) {
                        this.element.disabled = "disabled";
                    } else {
                        this.element.removeAttribute("disabled");
                    }
                }
            },



            /// <field>
            /// change the css style that platform button is using
            /// </field>
            theme: {
                set: function (value) {
                    var ele = this.element;
                    if (value === "dark") {
                        WinJS.Utilities.removeClass(ele, "roundUIBtnLight");
                        WinJS.Utilities.addClass(ele, "roundUIBtnDark");
                    } else if (value === "light") {
                        WinJS.Utilities.removeClass(ele, "roundUIBtnDark");
                        WinJS.Utilities.addClass(ele, "roundUIBtnLight");
                    } else {
                        console.log("Incorrect platform button theme, possible values are: light|dark");
                    }
                }
            },

            /// <field>
            /// The icon for the button. May be a CSS class or a URL
            /// </field>
            icon: {
                set: function (value) {
                    this._iconRest = value;
                    this._setIcon(value);
                },
                get: function () {
                    return this._iconRest;
                }

            },

            _setIcon: function (value) {
                if (value &&
                    value.substring(0, 4) === "url(") {
                    console.error("image icon button is not supported, please use appexFont: " + value);
                } else {
                    // Check to see if there is an icon available to use
                    if (WinJS.UI.AppBarIcon[value]) {
                        this.element.textContent = WinJS.UI.AppBarIcon[value];
                    } else {
                        //add css content to the element, which contains font symbols
                        WinJS.Utilities.addClass(this.element, value);
                    }
                }

            },

            /// <field>
            /// The title for the button
            /// </field>
            title: {
                set: function (value) {
                    this.element.setAttribute("aria-label", value);

                }
            },

            _invokeButton: function (event, handler) {
                var parentActionBar = null;
                if (this.mode === BingApps.UI.Button.Toggle) {
                    this.selected = !this.selected;
                }
                if (this._flyout && !this._flyoutShown && this._flyout.hidden) {
                    this._flyoutShown = true;
                    this._flyout.show(this.element, this.flyoutPlacement || "top");
                }

                if (this._actionBar) {
                    parentActionBar = this._getParentActionBar();
                    if (parentActionBar) {
                        parentActionBar.hide();
                    }
                    this._actionBar.disabled = false;
                    this._actionBar.show();
                }

                if (handler) {
                    handler(event);
                }
            },

            /// <field>
            /// The onclick handler
            /// </field>
            onclick: {
                set: function (value) {
                    var that = this;

                    this.element.onclick = function (event) {
                        if (event.offsetX > that.element.offsetWidth ||
                            event.offsetY > that.element.offsetHeight ||
                            event.offsetX < 0 ||
                            event.offsetY < 0) {
                            return;
                        }
                        that._invokeButton(event, value);
                    };

                    this.element.onkeydown = function (event) {
                        switch (event.keyCode) {
                            case WinJS.Utilities.Key.enter:
                            case WinJS.Utilities.Key.space:
                                that._invokeButton(event, value);
                                break;
                            default:
                                break;
                        }
                    };
                }
            },

            /// <field>
            /// The possible states for the button. A state should be:
            /// {
            ///    id: string,
            ///    title: string,
            ///    icon: string
            /// }
            /// </field>
            states: {
                set: function (value) {
                    var i = 0;

                    this._states = {};

                    for (i = 0; i < value.length; i++) {
                        this._states[value[i].id] = value[i];
                    }
                }
            },

            /// <field>
            /// The current state id
            /// </field>
            currentState: {
                set: function (value) {
                    var state = this._states[value];
                    if (state) {
                        this._currentState = value;
                        if (state.icon) {
                            this.icon = state.icon;
                        }
                        if (state.iconRemove) {
                            WinJS.Utilities.removeClass(this.element, state.iconRemove);
                        }
                        if (state.iconAdd) {
                            WinJS.Utilities.addClass(this.element, state.iconAdd);
                        }
                        this.title = state.title;
                        if (!(typeof state.pressedIcon === "undefined")) {
                            this.pressedIcon = state.pressedIcon;
                        }
                    }
                    else {
                        BingApps.Utilities.onError("Invalid state id");
                    }

                },
                get: function () {
                    return this._currentState;
                }
            },

            /// <field>
            /// The DOM id or DOM element for the flyout to show when the button is clicked
            /// </field>
            flyout: {
                set: function (value) {
                    var that = this;
                    this.element.setAttribute("aria-haspopup", true);
                    this._flyout = BingApps.Utilities.getControl(value);
                    if (this._flyout) {
                        this._flyout.addEventListener("afterhide", function button_onAfterHideFlyout() {
                            that._flyoutShown = false;
                        });
                    }
                }
            },

            /// <field>
            /// The DOM id or DOM element for the appbar to show when the button is clicked
            /// </field>
            actionBar: {
                set: function (value) {
                    var that = this;
                    this._actionBar = BingApps.Utilities.getControl(value);
                    if (this._actionBar) {
                        this._actionBar.addEventListener("afterhide", function button_onAfterHideActionBar() {
                            that._actionBar.disabled = true;
                        });
                    }
                }
            }


        },
        {
            /// <field>
            /// The selection mode where the button behaves as a toggle button
            /// </field>
            Toggle: "Toggle",

            /// <field>
            /// The selection mode where the button behaves as a radio button
            /// </field>
            Radio: "Radio",

            /// <field>
            /// The selection mode where the button can have multiple states
            /// </field>
            Dynamic: "Dynamic",

            /// <field>
            /// Just a regular button
            /// </field>
            Simple: "Simple"
        }),
    });
})();
